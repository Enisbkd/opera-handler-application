/* tslint:disable max-line-length */
import axios from 'axios';
import sinon from 'sinon';
import dayjs from 'dayjs';

import ReservationStatDailyService from './reservation-stat-daily.service';
import { DATE_FORMAT } from '@/shared/composables/date-format';
import { ReservationStatDaily } from '@/shared/model/reservation-stat-daily.model';

const error = {
  response: {
    status: null,
    data: {
      type: null,
    },
  },
};

const axiosStub = {
  get: sinon.stub(axios, 'get'),
  post: sinon.stub(axios, 'post'),
  put: sinon.stub(axios, 'put'),
  patch: sinon.stub(axios, 'patch'),
  delete: sinon.stub(axios, 'delete'),
};

describe('Service Tests', () => {
  describe('ReservationStatDaily Service', () => {
    let service: ReservationStatDailyService;
    let elemDefault;
    let currentDate: Date;

    beforeEach(() => {
      service = new ReservationStatDailyService();
      currentDate = new Date();
      elemDefault = new ReservationStatDaily(
        123,
        'AAAAAAA',
        currentDate,
        0,
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        0,
        0,
        0,
        0,
        'AAAAAAA',
        currentDate,
        currentDate,
        0,
        0,
        0,
        'AAAAAAA',
        'AAAAAAA',
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        currentDate,
        currentDate,
        'AAAAAAA',
        currentDate,
        'AAAAAAA',
        'AAAAAAA',
        currentDate,
        currentDate,
        'AAAAAAA',
        0,
        0,
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        0,
        0,
        0,
        0,
        'AAAAAAA',
        'AAAAAAA',
        0,
        0,
        0,
        0,
        0,
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        0,
        'AAAAAAA',
        currentDate,
        0,
        0,
        'AAAAAAA',
        'AAAAAAA',
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        'AAAAAAA',
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        currentDate,
        'AAAAAAA',
      );
    });

    describe('Service methods', () => {
      it('should find an element', async () => {
        const returnedFromService = Object.assign(
          {
            businessDate: dayjs(currentDate).format(DATE_FORMAT),
            truncBeginDate: dayjs(currentDate).format(DATE_FORMAT),
            truncEndDate: dayjs(currentDate).format(DATE_FORMAT),
            insertDate: dayjs(currentDate).format(DATE_FORMAT),
            originalEndDate: dayjs(currentDate).format(DATE_FORMAT),
            reservationDate: dayjs(currentDate).format(DATE_FORMAT),
            cancellationDate: dayjs(currentDate).format(DATE_FORMAT),
            birthDate: dayjs(currentDate).format(DATE_FORMAT),
            businessDateCreated: dayjs(currentDate).format(DATE_FORMAT),
            updateDate: dayjs(currentDate).format(DATE_FORMAT),
          },
          elemDefault,
        );
        axiosStub.get.resolves({ data: returnedFromService });

        return service.find(123).then(res => {
          expect(res).toMatchObject(elemDefault);
        });
      });

      it('should not find an element', async () => {
        axiosStub.get.rejects(error);
        return service
          .find(123)
          .then()
          .catch(err => {
            expect(err).toMatchObject(error);
          });
      });

      it('should create a ReservationStatDaily', async () => {
        const returnedFromService = Object.assign(
          {
            id: 123,
            businessDate: dayjs(currentDate).format(DATE_FORMAT),
            truncBeginDate: dayjs(currentDate).format(DATE_FORMAT),
            truncEndDate: dayjs(currentDate).format(DATE_FORMAT),
            insertDate: dayjs(currentDate).format(DATE_FORMAT),
            originalEndDate: dayjs(currentDate).format(DATE_FORMAT),
            reservationDate: dayjs(currentDate).format(DATE_FORMAT),
            cancellationDate: dayjs(currentDate).format(DATE_FORMAT),
            birthDate: dayjs(currentDate).format(DATE_FORMAT),
            businessDateCreated: dayjs(currentDate).format(DATE_FORMAT),
            updateDate: dayjs(currentDate).format(DATE_FORMAT),
          },
          elemDefault,
        );
        const expected = Object.assign(
          {
            businessDate: currentDate,
            truncBeginDate: currentDate,
            truncEndDate: currentDate,
            insertDate: currentDate,
            originalEndDate: currentDate,
            reservationDate: currentDate,
            cancellationDate: currentDate,
            birthDate: currentDate,
            businessDateCreated: currentDate,
            updateDate: currentDate,
          },
          returnedFromService,
        );

        axiosStub.post.resolves({ data: returnedFromService });
        return service.create({}).then(res => {
          expect(res).toMatchObject(expected);
        });
      });

      it('should not create a ReservationStatDaily', async () => {
        axiosStub.post.rejects(error);

        return service
          .create({})
          .then()
          .catch(err => {
            expect(err).toMatchObject(error);
          });
      });

      it('should update a ReservationStatDaily', async () => {
        const returnedFromService = Object.assign(
          {
            resort: 'BBBBBB',
            businessDate: dayjs(currentDate).format(DATE_FORMAT),
            nameId: 1,
            rateCode: 'BBBBBB',
            sourceCode: 'BBBBBB',
            marketCode: 'BBBBBB',
            roomCategory: 'BBBBBB',
            companyId: 1,
            agentId: 1,
            groupId: 1,
            sourceProfId: 1,
            resvStatus: 'BBBBBB',
            truncBeginDate: dayjs(currentDate).format(DATE_FORMAT),
            truncEndDate: dayjs(currentDate).format(DATE_FORMAT),
            resvNameId: 1,
            quantity: 1,
            physicalQuantity: 1,
            dueOutYn: 'BBBBBB',
            roomResvStatus: 'BBBBBB',
            adults: 1,
            children: 1,
            roomAdults: 1,
            roomChildren: 1,
            primaryYn: 1,
            allotmentHeaderId: 1,
            roomRevenue: 1,
            foodRevenue: 1,
            packageRoomRevenue: 1,
            packageFoodRevenue: 1,
            totalRoomTax: 1,
            totalFoodTax: 1,
            totalPackageRevenue: 1,
            totalRevenue: 1,
            totalTax: 1,
            insertDate: dayjs(currentDate).format(DATE_FORMAT),
            originalEndDate: dayjs(currentDate).format(DATE_FORMAT),
            walkinYn: 'BBBBBB',
            reservationDate: dayjs(currentDate).format(DATE_FORMAT),
            roomClass: 'BBBBBB',
            vipStatus: 'BBBBBB',
            cancellationDate: dayjs(currentDate).format(DATE_FORMAT),
            birthDate: dayjs(currentDate).format(DATE_FORMAT),
            room: 'BBBBBB',
            membershipId: 1,
            contactId: 1,
            rateCategory: 'BBBBBB',
            marketMainGroup: 'BBBBBB',
            sourceMainGroup: 'BBBBBB',
            channel: 'BBBBBB',
            country: 'BBBBBB',
            regionCode: 'BBBBBB',
            nationality: 'BBBBBB',
            psuedoRoomYn: 'BBBBBB',
            adultsTaxFree: 1,
            childrenTaxFree: 1,
            stayRooms: 1,
            stayPersons: 1,
            stayAdults: 1,
            stayChildren: 1,
            arrRooms: 1,
            arrPersons: 1,
            depRooms: 1,
            depPersons: 1,
            dayUseRooms: 1,
            dayUsePersons: 1,
            cancelledRooms: 1,
            cancelledPersons: 1,
            noShowRooms: 1,
            noShowPersons: 1,
            singleOccupancy: 1,
            multipleOccupancy: 1,
            cribs: 1,
            extraBeds: 1,
            otherRevenue: 1,
            packageOtherRevenue: 1,
            totalOtherTax: 1,
            countryMainGroup: 'BBBBBB',
            state: 'BBBBBB',
            fiscalRegionCode: 'BBBBBB',
            nonRevenue: 1,
            packageNonRevenue: 1,
            totalNonRevenueTax: 1,
            prRoomRevenue: 1,
            prFoodRevenue: 1,
            prPackageRoomRevenue: 1,
            prPackageFoodRevenue: 1,
            prTotalRoomTax: 1,
            prTotalFoodTax: 1,
            prTotalPackageRevenue: 1,
            prTotalRevenue: 1,
            prTotalTax: 1,
            prOtherRevenue: 1,
            prPackageOtherRevenue: 1,
            prTotalOtherTax: 1,
            prNonRevenue: 1,
            prPackageNonRevenue: 1,
            prTotalNonRevenueTax: 1,
            nights: 1,
            noOfStays: 1,
            reservationNights: 1,
            reservationArrivals: 1,
            reservationNoOfStays: 1,
            dayUseReservations: 1,
            cancelledReservations: 1,
            noShowReservations: 1,
            city: 'BBBBBB',
            zipCode: 'BBBBBB',
            district: 'BBBBBB',
            cashRoomNts: 1,
            compRoomNts: 1,
            cashRoomRevenue: 1,
            compRoomRevenue: 1,
            resInsertSource: 'BBBBBB',
            resInsertSourceType: 'BBBBBB',
            children1: 1,
            children2: 1,
            children3: 1,
            children4: 1,
            children5: 1,
            ffMembershipType: 'BBBBBB',
            fgMembershipType: 'BBBBBB',
            promotionCode: 'BBBBBB',
            ownerFfFlag: 'BBBBBB',
            ownerRentalFlag: 'BBBBBB',
            centralCurrencyCode: 'BBBBBB',
            centralExchangeRate: 1,
            bookedRoomCategory: 'BBBBBB',
            businessDateCreated: dayjs(currentDate).format(DATE_FORMAT),
            rateAmount: 1,
            parentCompanyId: 1,
            houseUseYn: 'BBBBBB',
            complimentaryYn: 'BBBBBB',
            biResvNameId: 1,
            advFoodRevenue: 1,
            advNonRevenue: 1,
            advOtherRevenue: 1,
            advRoomRevenue: 1,
            advTotalFoodTax: 1,
            advTotalNonRevenueTax: 1,
            advTotalOtherTax: 1,
            advTotalRevenue: 1,
            advTotalRoomTax: 1,
            advTotalTax: 1,
            prAdvFoodRevenue: 1,
            prAdvNonRevenue: 1,
            prAdvOtherRevenue: 1,
            prAdvRoomRevenue: 1,
            prAdvTotalFoodTax: 1,
            prAdvTotalNonRevenueTax: 1,
            prAdvTotalOtherTax: 1,
            prAdvTotalRevenue: 1,
            prAdvTotalRoomTax: 1,
            prAdvTotalTax: 1,
            upsoldRevenue: 1,
            flgdRoomRevenue: 1,
            flgdFoodRevenue: 1,
            flgdNonRevenue: 1,
            flgdOtherRevenue: 1,
            flgdTotalRoomTax: 1,
            flgdTotalFoodTax: 1,
            flgdTotalNonRevenueTax: 1,
            flgdTotalOtherTax: 1,
            flgdTotalRevenue: 1,
            flgdTotalTax: 1,
            contactYn: 'BBBBBB',
            extendedStayTier: 1,
            rsAdvTotalRevenue: 1,
            rsAdvRoomRevenue: 1,
            rsAdvFoodRevenue: 1,
            rsAdvOtherRevenue: 1,
            rsAdvNonRevenue: 1,
            rsAdvTotalTax: 1,
            rsAdvRoomTax: 1,
            rsAdvFoodTax: 1,
            rsAdvOtherTax: 1,
            rsAdvNonRevenueTax: 1,
            updateDate: dayjs(currentDate).format(DATE_FORMAT),
            guid: 'BBBBBB',
          },
          elemDefault,
        );

        const expected = Object.assign(
          {
            businessDate: currentDate,
            truncBeginDate: currentDate,
            truncEndDate: currentDate,
            insertDate: currentDate,
            originalEndDate: currentDate,
            reservationDate: currentDate,
            cancellationDate: currentDate,
            birthDate: currentDate,
            businessDateCreated: currentDate,
            updateDate: currentDate,
          },
          returnedFromService,
        );
        axiosStub.put.resolves({ data: returnedFromService });

        return service.update(expected).then(res => {
          expect(res).toMatchObject(expected);
        });
      });

      it('should not update a ReservationStatDaily', async () => {
        axiosStub.put.rejects(error);

        return service
          .update({})
          .then()
          .catch(err => {
            expect(err).toMatchObject(error);
          });
      });

      it('should partial update a ReservationStatDaily', async () => {
        const patchObject = Object.assign(
          {
            resort: 'BBBBBB',
            businessDate: dayjs(currentDate).format(DATE_FORMAT),
            rateCode: 'BBBBBB',
            sourceCode: 'BBBBBB',
            roomCategory: 'BBBBBB',
            companyId: 1,
            groupId: 1,
            sourceProfId: 1,
            resvStatus: 'BBBBBB',
            roomResvStatus: 'BBBBBB',
            adults: 1,
            roomAdults: 1,
            roomRevenue: 1,
            foodRevenue: 1,
            packageRoomRevenue: 1,
            totalFoodTax: 1,
            totalPackageRevenue: 1,
            totalRevenue: 1,
            totalTax: 1,
            insertDate: dayjs(currentDate).format(DATE_FORMAT),
            originalEndDate: dayjs(currentDate).format(DATE_FORMAT),
            walkinYn: 'BBBBBB',
            vipStatus: 'BBBBBB',
            birthDate: dayjs(currentDate).format(DATE_FORMAT),
            membershipId: 1,
            contactId: 1,
            channel: 'BBBBBB',
            regionCode: 'BBBBBB',
            psuedoRoomYn: 'BBBBBB',
            stayRooms: 1,
            stayChildren: 1,
            arrRooms: 1,
            arrPersons: 1,
            depRooms: 1,
            dayUseRooms: 1,
            dayUsePersons: 1,
            cancelledPersons: 1,
            multipleOccupancy: 1,
            cribs: 1,
            extraBeds: 1,
            otherRevenue: 1,
            totalOtherTax: 1,
            state: 'BBBBBB',
            fiscalRegionCode: 'BBBBBB',
            nonRevenue: 1,
            prPackageFoodRevenue: 1,
            prTotalRoomTax: 1,
            prTotalFoodTax: 1,
            prTotalTax: 1,
            prOtherRevenue: 1,
            prPackageOtherRevenue: 1,
            prTotalOtherTax: 1,
            prTotalNonRevenueTax: 1,
            noOfStays: 1,
            reservationNights: 1,
            reservationNoOfStays: 1,
            cancelledReservations: 1,
            noShowReservations: 1,
            cashRoomNts: 1,
            compRoomNts: 1,
            cashRoomRevenue: 1,
            children2: 1,
            fgMembershipType: 'BBBBBB',
            centralCurrencyCode: 'BBBBBB',
            bookedRoomCategory: 'BBBBBB',
            businessDateCreated: dayjs(currentDate).format(DATE_FORMAT),
            biResvNameId: 1,
            advFoodRevenue: 1,
            advOtherRevenue: 1,
            advRoomRevenue: 1,
            advTotalFoodTax: 1,
            advTotalTax: 1,
            prAdvFoodRevenue: 1,
            prAdvOtherRevenue: 1,
            prAdvTotalNonRevenueTax: 1,
            prAdvTotalRevenue: 1,
            prAdvTotalRoomTax: 1,
            upsoldRevenue: 1,
            flgdRoomRevenue: 1,
            flgdNonRevenue: 1,
            flgdOtherRevenue: 1,
            flgdTotalRoomTax: 1,
            flgdTotalFoodTax: 1,
            flgdTotalTax: 1,
            contactYn: 'BBBBBB',
            extendedStayTier: 1,
            rsAdvRoomRevenue: 1,
            rsAdvFoodRevenue: 1,
            rsAdvTotalTax: 1,
            rsAdvRoomTax: 1,
            rsAdvNonRevenueTax: 1,
            guid: 'BBBBBB',
          },
          new ReservationStatDaily(),
        );
        const returnedFromService = Object.assign(patchObject, elemDefault);

        const expected = Object.assign(
          {
            businessDate: currentDate,
            truncBeginDate: currentDate,
            truncEndDate: currentDate,
            insertDate: currentDate,
            originalEndDate: currentDate,
            reservationDate: currentDate,
            cancellationDate: currentDate,
            birthDate: currentDate,
            businessDateCreated: currentDate,
            updateDate: currentDate,
          },
          returnedFromService,
        );
        axiosStub.patch.resolves({ data: returnedFromService });

        return service.partialUpdate(patchObject).then(res => {
          expect(res).toMatchObject(expected);
        });
      });

      it('should not partial update a ReservationStatDaily', async () => {
        axiosStub.patch.rejects(error);

        return service
          .partialUpdate({})
          .then()
          .catch(err => {
            expect(err).toMatchObject(error);
          });
      });

      it('should return a list of ReservationStatDaily', async () => {
        const returnedFromService = Object.assign(
          {
            resort: 'BBBBBB',
            businessDate: dayjs(currentDate).format(DATE_FORMAT),
            nameId: 1,
            rateCode: 'BBBBBB',
            sourceCode: 'BBBBBB',
            marketCode: 'BBBBBB',
            roomCategory: 'BBBBBB',
            companyId: 1,
            agentId: 1,
            groupId: 1,
            sourceProfId: 1,
            resvStatus: 'BBBBBB',
            truncBeginDate: dayjs(currentDate).format(DATE_FORMAT),
            truncEndDate: dayjs(currentDate).format(DATE_FORMAT),
            resvNameId: 1,
            quantity: 1,
            physicalQuantity: 1,
            dueOutYn: 'BBBBBB',
            roomResvStatus: 'BBBBBB',
            adults: 1,
            children: 1,
            roomAdults: 1,
            roomChildren: 1,
            primaryYn: 1,
            allotmentHeaderId: 1,
            roomRevenue: 1,
            foodRevenue: 1,
            packageRoomRevenue: 1,
            packageFoodRevenue: 1,
            totalRoomTax: 1,
            totalFoodTax: 1,
            totalPackageRevenue: 1,
            totalRevenue: 1,
            totalTax: 1,
            insertDate: dayjs(currentDate).format(DATE_FORMAT),
            originalEndDate: dayjs(currentDate).format(DATE_FORMAT),
            walkinYn: 'BBBBBB',
            reservationDate: dayjs(currentDate).format(DATE_FORMAT),
            roomClass: 'BBBBBB',
            vipStatus: 'BBBBBB',
            cancellationDate: dayjs(currentDate).format(DATE_FORMAT),
            birthDate: dayjs(currentDate).format(DATE_FORMAT),
            room: 'BBBBBB',
            membershipId: 1,
            contactId: 1,
            rateCategory: 'BBBBBB',
            marketMainGroup: 'BBBBBB',
            sourceMainGroup: 'BBBBBB',
            channel: 'BBBBBB',
            country: 'BBBBBB',
            regionCode: 'BBBBBB',
            nationality: 'BBBBBB',
            psuedoRoomYn: 'BBBBBB',
            adultsTaxFree: 1,
            childrenTaxFree: 1,
            stayRooms: 1,
            stayPersons: 1,
            stayAdults: 1,
            stayChildren: 1,
            arrRooms: 1,
            arrPersons: 1,
            depRooms: 1,
            depPersons: 1,
            dayUseRooms: 1,
            dayUsePersons: 1,
            cancelledRooms: 1,
            cancelledPersons: 1,
            noShowRooms: 1,
            noShowPersons: 1,
            singleOccupancy: 1,
            multipleOccupancy: 1,
            cribs: 1,
            extraBeds: 1,
            otherRevenue: 1,
            packageOtherRevenue: 1,
            totalOtherTax: 1,
            countryMainGroup: 'BBBBBB',
            state: 'BBBBBB',
            fiscalRegionCode: 'BBBBBB',
            nonRevenue: 1,
            packageNonRevenue: 1,
            totalNonRevenueTax: 1,
            prRoomRevenue: 1,
            prFoodRevenue: 1,
            prPackageRoomRevenue: 1,
            prPackageFoodRevenue: 1,
            prTotalRoomTax: 1,
            prTotalFoodTax: 1,
            prTotalPackageRevenue: 1,
            prTotalRevenue: 1,
            prTotalTax: 1,
            prOtherRevenue: 1,
            prPackageOtherRevenue: 1,
            prTotalOtherTax: 1,
            prNonRevenue: 1,
            prPackageNonRevenue: 1,
            prTotalNonRevenueTax: 1,
            nights: 1,
            noOfStays: 1,
            reservationNights: 1,
            reservationArrivals: 1,
            reservationNoOfStays: 1,
            dayUseReservations: 1,
            cancelledReservations: 1,
            noShowReservations: 1,
            city: 'BBBBBB',
            zipCode: 'BBBBBB',
            district: 'BBBBBB',
            cashRoomNts: 1,
            compRoomNts: 1,
            cashRoomRevenue: 1,
            compRoomRevenue: 1,
            resInsertSource: 'BBBBBB',
            resInsertSourceType: 'BBBBBB',
            children1: 1,
            children2: 1,
            children3: 1,
            children4: 1,
            children5: 1,
            ffMembershipType: 'BBBBBB',
            fgMembershipType: 'BBBBBB',
            promotionCode: 'BBBBBB',
            ownerFfFlag: 'BBBBBB',
            ownerRentalFlag: 'BBBBBB',
            centralCurrencyCode: 'BBBBBB',
            centralExchangeRate: 1,
            bookedRoomCategory: 'BBBBBB',
            businessDateCreated: dayjs(currentDate).format(DATE_FORMAT),
            rateAmount: 1,
            parentCompanyId: 1,
            houseUseYn: 'BBBBBB',
            complimentaryYn: 'BBBBBB',
            biResvNameId: 1,
            advFoodRevenue: 1,
            advNonRevenue: 1,
            advOtherRevenue: 1,
            advRoomRevenue: 1,
            advTotalFoodTax: 1,
            advTotalNonRevenueTax: 1,
            advTotalOtherTax: 1,
            advTotalRevenue: 1,
            advTotalRoomTax: 1,
            advTotalTax: 1,
            prAdvFoodRevenue: 1,
            prAdvNonRevenue: 1,
            prAdvOtherRevenue: 1,
            prAdvRoomRevenue: 1,
            prAdvTotalFoodTax: 1,
            prAdvTotalNonRevenueTax: 1,
            prAdvTotalOtherTax: 1,
            prAdvTotalRevenue: 1,
            prAdvTotalRoomTax: 1,
            prAdvTotalTax: 1,
            upsoldRevenue: 1,
            flgdRoomRevenue: 1,
            flgdFoodRevenue: 1,
            flgdNonRevenue: 1,
            flgdOtherRevenue: 1,
            flgdTotalRoomTax: 1,
            flgdTotalFoodTax: 1,
            flgdTotalNonRevenueTax: 1,
            flgdTotalOtherTax: 1,
            flgdTotalRevenue: 1,
            flgdTotalTax: 1,
            contactYn: 'BBBBBB',
            extendedStayTier: 1,
            rsAdvTotalRevenue: 1,
            rsAdvRoomRevenue: 1,
            rsAdvFoodRevenue: 1,
            rsAdvOtherRevenue: 1,
            rsAdvNonRevenue: 1,
            rsAdvTotalTax: 1,
            rsAdvRoomTax: 1,
            rsAdvFoodTax: 1,
            rsAdvOtherTax: 1,
            rsAdvNonRevenueTax: 1,
            updateDate: dayjs(currentDate).format(DATE_FORMAT),
            guid: 'BBBBBB',
          },
          elemDefault,
        );
        const expected = Object.assign(
          {
            businessDate: currentDate,
            truncBeginDate: currentDate,
            truncEndDate: currentDate,
            insertDate: currentDate,
            originalEndDate: currentDate,
            reservationDate: currentDate,
            cancellationDate: currentDate,
            birthDate: currentDate,
            businessDateCreated: currentDate,
            updateDate: currentDate,
          },
          returnedFromService,
        );
        axiosStub.get.resolves([returnedFromService]);
        return service.retrieve({ sort: {}, page: 0, size: 10 }).then(res => {
          expect(res).toContainEqual(expected);
        });
      });

      it('should not return a list of ReservationStatDaily', async () => {
        axiosStub.get.rejects(error);

        return service
          .retrieve()
          .then()
          .catch(err => {
            expect(err).toMatchObject(error);
          });
      });

      it('should delete a ReservationStatDaily', async () => {
        axiosStub.delete.resolves({ ok: true });
        return service.delete(123).then(res => {
          expect(res.ok).toBeTruthy();
        });
      });

      it('should not delete a ReservationStatDaily', async () => {
        axiosStub.delete.rejects(error);

        return service
          .delete(123)
          .then()
          .catch(err => {
            expect(err).toMatchObject(error);
          });
      });
    });
  });
});
