/* tslint:disable max-line-length */
import axios from 'axios';
import sinon from 'sinon';
import dayjs from 'dayjs';

import FinancialTransactionsService from './financial-transactions.service';
import { DATE_FORMAT } from '@/shared/composables/date-format';
import { FinancialTransactions } from '@/shared/model/financial-transactions.model';

const error = {
  response: {
    status: null,
    data: {
      type: null,
    },
  },
};

const axiosStub = {
  get: sinon.stub(axios, 'get'),
  post: sinon.stub(axios, 'post'),
  put: sinon.stub(axios, 'put'),
  patch: sinon.stub(axios, 'patch'),
  delete: sinon.stub(axios, 'delete'),
};

describe('Service Tests', () => {
  describe('FinancialTransactions Service', () => {
    let service: FinancialTransactionsService;
    let elemDefault;
    let currentDate: Date;

    beforeEach(() => {
      service = new FinancialTransactionsService();
      currentDate = new Date();
      elemDefault = new FinancialTransactions(
        123,
        0,
        'AAAAAAA',
        currentDate,
        currentDate,
        currentDate,
        currentDate,
        currentDate,
        currentDate,
        currentDate,
        currentDate,
        currentDate,
        currentDate,
        currentDate,
        currentDate,
        currentDate,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
      );
    });

    describe('Service methods', () => {
      it('should find an element', async () => {
        const returnedFromService = Object.assign(
          {
            invoiceCloseDate: dayjs(currentDate).format(DATE_FORMAT),
            arTransferDate: dayjs(currentDate).format(DATE_FORMAT),
            trxDate: dayjs(currentDate).format(DATE_FORMAT),
            businessDate: dayjs(currentDate).format(DATE_FORMAT),
            insertDate: dayjs(currentDate).format(DATE_FORMAT),
            updateDate: dayjs(currentDate).format(DATE_FORMAT),
            trnsActivityDate: dayjs(currentDate).format(DATE_FORMAT),
            approvalDate: dayjs(currentDate).format(DATE_FORMAT),
            postingDate: dayjs(currentDate).format(DATE_FORMAT),
            exchangeDate: dayjs(currentDate).format(DATE_FORMAT),
            routingDate: dayjs(currentDate).format(DATE_FORMAT),
            effectiveDate: dayjs(currentDate).format(DATE_FORMAT),
            customChargeDate: dayjs(currentDate).format(DATE_FORMAT),
          },
          elemDefault,
        );
        axiosStub.get.resolves({ data: returnedFromService });

        return service.find(123).then(res => {
          expect(res).toMatchObject(elemDefault);
        });
      });

      it('should not find an element', async () => {
        axiosStub.get.rejects(error);
        return service
          .find(123)
          .then()
          .catch(err => {
            expect(err).toMatchObject(error);
          });
      });

      it('should create a FinancialTransactions', async () => {
        const returnedFromService = Object.assign(
          {
            id: 123,
            invoiceCloseDate: dayjs(currentDate).format(DATE_FORMAT),
            arTransferDate: dayjs(currentDate).format(DATE_FORMAT),
            trxDate: dayjs(currentDate).format(DATE_FORMAT),
            businessDate: dayjs(currentDate).format(DATE_FORMAT),
            insertDate: dayjs(currentDate).format(DATE_FORMAT),
            updateDate: dayjs(currentDate).format(DATE_FORMAT),
            trnsActivityDate: dayjs(currentDate).format(DATE_FORMAT),
            approvalDate: dayjs(currentDate).format(DATE_FORMAT),
            postingDate: dayjs(currentDate).format(DATE_FORMAT),
            exchangeDate: dayjs(currentDate).format(DATE_FORMAT),
            routingDate: dayjs(currentDate).format(DATE_FORMAT),
            effectiveDate: dayjs(currentDate).format(DATE_FORMAT),
            customChargeDate: dayjs(currentDate).format(DATE_FORMAT),
          },
          elemDefault,
        );
        const expected = Object.assign(
          {
            invoiceCloseDate: currentDate,
            arTransferDate: currentDate,
            trxDate: currentDate,
            businessDate: currentDate,
            insertDate: currentDate,
            updateDate: currentDate,
            trnsActivityDate: currentDate,
            approvalDate: currentDate,
            postingDate: currentDate,
            exchangeDate: currentDate,
            routingDate: currentDate,
            effectiveDate: currentDate,
            customChargeDate: currentDate,
          },
          returnedFromService,
        );

        axiosStub.post.resolves({ data: returnedFromService });
        return service.create({}).then(res => {
          expect(res).toMatchObject(expected);
        });
      });

      it('should not create a FinancialTransactions', async () => {
        axiosStub.post.rejects(error);

        return service
          .create({})
          .then()
          .catch(err => {
            expect(err).toMatchObject(error);
          });
      });

      it('should update a FinancialTransactions', async () => {
        const returnedFromService = Object.assign(
          {
            trxNo: 1,
            ftSubtype: 'BBBBBB',
            invoiceCloseDate: dayjs(currentDate).format(DATE_FORMAT),
            arTransferDate: dayjs(currentDate).format(DATE_FORMAT),
            trxDate: dayjs(currentDate).format(DATE_FORMAT),
            businessDate: dayjs(currentDate).format(DATE_FORMAT),
            insertDate: dayjs(currentDate).format(DATE_FORMAT),
            updateDate: dayjs(currentDate).format(DATE_FORMAT),
            trnsActivityDate: dayjs(currentDate).format(DATE_FORMAT),
            approvalDate: dayjs(currentDate).format(DATE_FORMAT),
            postingDate: dayjs(currentDate).format(DATE_FORMAT),
            exchangeDate: dayjs(currentDate).format(DATE_FORMAT),
            routingDate: dayjs(currentDate).format(DATE_FORMAT),
            effectiveDate: dayjs(currentDate).format(DATE_FORMAT),
            customChargeDate: dayjs(currentDate).format(DATE_FORMAT),
            recptNo: 1,
            trxNoAdjust: 1,
            trxNoAddedBy: 1,
            trxNoAgainstPackage: 1,
            trxNoHeader: 1,
            arNumber: 1,
            resvNameId: 1,
            cashierId: 1,
            creditCardId: 1,
            nameId: 1,
            tranActionId: 1,
            finDmlSeqNo: 1,
            routingInstrnId: 1,
            fromResvId: 1,
            genCashierId: 1,
            folioNo: 1,
            invoiceNo: 1,
            insertUser: 1,
            updateUser: 1,
            arrangementId: 1,
            trnsFromAcct: 1,
            trnsToAcct: 1,
            billNo: 1,
            revisionNo: 1,
            resvDepositId: 1,
            linkTrxNo: 1,
            authorizerId: 1,
            compLinkTrxNo: 1,
            mtrxNoAgainstPackage: 1,
            forexCommPerc: 1,
            forexCommAmount: 1,
            articleId: 1,
            toResvNameId: 1,
            roomNts: 1,
            orgArLedDebit: 1,
            closureNo: 1,
            originalResvNameId: 1,
            orgBillNo: 1,
            membershipId: 1,
            installments: 1,
            contractGuestDebit: 1,
            contractGuestCredit: 1,
            contractNetAmount: 1,
            contractGrossAmount: 1,
            postitNo: 1,
            ccTrxFeeAmount: 1,
            changeDue: 1,
            postingSourceNameId: 1,
            bonusCheckId: 1,
            roundLinkTrxno: 1,
            reversePaymentTrxNo: 1,
            electronicVoucherNo: 1,
            thresholdDiversionId: 1,
            thresholdEntityQty: 1,
            trxNoSplit: 1,
            exchDiffTrxNo: 1,
            associatedTrxNo: 1,
            taxRate: 1,
            propChargeId: 1,
            quantity: 1,
            netAmount: 1,
            grossAmount: 1,
            cashierOpeningBalance: 1,
            pricePerUnit: 1,
            trxAmount: 1,
            postedAmount: 1,
            guestAccountCredit: 1,
            exchangeRate: 1,
            guestAccountDebit: 1,
            cashierCredit: 1,
            cashierDebit: 1,
            packageCredit: 1,
            packageDebit: 1,
            depLedCredit: 1,
            depLedDebit: 1,
            revenueAmt: 1,
            arLedCredit: 1,
            arLedDebit: 1,
            euroExchangeRate: 1,
            inhDebit: 1,
            inhCredit: 1,
            packageAllowance: 1,
            parallelGuestCredit: 1,
            parallelGuestDebit: 1,
            parallelNetAmount: 1,
            parallelGrossAmount: 1,
            orgPostedAmount: 1,
            roomNtsEffective: 1,
            paymentSurchargeAmt: 1,
            folioView: 1,
            taxInclusiveYn: 'BBBBBB',
            deferredYn: 'BBBBBB',
            indAdjustmentYn: 'BBBBBB',
            fixedChargesYn: 'BBBBBB',
            taCommissionableYn: 'BBBBBB',
            taxGeneratedYn: 'BBBBBB',
            compressedYn: 'BBBBBB',
            displayYn: 'BBBBBB',
            collAgentPostingYn: 'BBBBBB',
            fiscalTrxCodeType: 'BBBBBB',
            deferredTaxesYn: 'BBBBBB',
            advancedGenerateYn: 'BBBBBB',
            forexType: 'BBBBBB',
            taCommissionNetYn: 'BBBBBB',
            sourceCommissionNetYn: 'BBBBBB',
            settlementFlag: 'BBBBBB',
            accTypeFlag: 'BBBBBB',
            profitLossFlag: 'BBBBBB',
            proformaYn: 'BBBBBB',
            holdYn: 'BBBBBB',
            exchangeDifferenceYn: 'BBBBBB',
            calcPointsYn: 'BBBBBB',
            arChargeTransferYn: 'BBBBBB',
            processed8300Yn: 'BBBBBB',
            asbFlag: 'BBBBBB',
            postitYn: 'BBBBBB',
            autoSettleYn: 'BBBBBB',
            depTaxTransferedYn: 'BBBBBB',
            autoCreditbillYn: 'BBBBBB',
            asbOnlyPostTaxesOnceYn: 'BBBBBB',
            roundFactorYn: 'BBBBBB',
            depPostingFlag: 'BBBBBB',
            correctionYn: 'BBBBBB',
            routedYn: 'BBBBBB',
            upsellChargeYn: 'BBBBBB',
            advanceBillYn: 'BBBBBB',
            advanceBillReversedYn: 'BBBBBB',
            incTaxDeductedYn: 'BBBBBB',
            gpAwardCancelledYn: 'BBBBBB',
            serviceRecoveryAdjustmentYn: 'BBBBBB',
            splitType: 'BBBBBB',
            bucketRedempYn: 'BBBBBB',
            vatOffsetYn: 'BBBBBB',
            forexTaxYn: 'BBBBBB',
            stampDutyYn: 'BBBBBB',
            covers: 'BBBBBB',
            advGenerateAdjustment: 'BBBBBB',
            expInvoiceType: 'BBBBBB',
            folioType: 'BBBBBB',
            orgFolioType: 'BBBBBB',
            invoiceType: 'BBBBBB',
            arState: 'BBBBBB',
            exchangeType: 'BBBBBB',
            recptType: 'BBBBBB',
            roomClass: 'BBBBBB',
            resort: 'BBBBBB',
            tcGroup: 'BBBBBB',
            tcSubgroup: 'BBBBBB',
            trxCode: 'BBBBBB',
            room: 'BBBBBB',
            tclCode1: 'BBBBBB',
            currency: 'BBBBBB',
            ftGeneratedType: 'BBBBBB',
            tclCode2: 'BBBBBB',
            marketCode: 'BBBBBB',
            sourceCode: 'BBBBBB',
            rateCode: 'BBBBBB',
            hotelAcct: 'BBBBBB',
            reasonCode: 'BBBBBB',
            product: 'BBBBBB',
            targetResort: 'BBBBBB',
            nameTaxType: 'BBBBBB',
            taxInvNo: 'BBBBBB',
            approvalCode: 'BBBBBB',
            approvalStatus: 'BBBBBB',
            compLinkTrxCode: 'BBBBBB',
            compTypeCode: 'BBBBBB',
            couponNo: 'BBBBBB',
            originalRoom: 'BBBBBB',
            allowanceType: 'BBBBBB',
            advGenerateTrxCode: 'BBBBBB',
            trxServiceType: 'BBBBBB',
            postingType: 'BBBBBB',
            parallelCurrency: 'BBBBBB',
            contractCurrency: 'BBBBBB',
            fbaCertificateNumber: 'BBBBBB',
            postingRhythm: 'BBBBBB',
            asbTaxFlag: 'BBBBBB',
            packageArrangementCode: 'BBBBBB',
            gpAwardCode: 'BBBBBB',
            gpAwardCancelCode: 'BBBBBB',
            serviceRecoveryDeptCode: 'BBBBBB',
            bucketCode: 'BBBBBB',
            taxRateType: 'BBBBBB',
            chequeNumber: 'BBBBBB',
            passerByName: 'BBBBBB',
            esignedReceiptName: 'BBBBBB',
            remark: 'BBBBBB',
            reference: 'BBBBBB',
            oTrxDesc: 'BBBBBB',
            comments: 'BBBBBB',
            fiscalBillNo: 'BBBBBB',
            extSysResultMsg: 'BBBBBB',
            queueName: 'BBBBBB',
            paymentType: 'BBBBBB',
            ccRefundPosting: 'BBBBBB',
            thresholdEntityType: 'BBBBBB',
            thresholdTreatmentFlag: 'BBBBBB',
            paymentSurchargeType: 'BBBBBB',
            propertyBillPrefix: 'BBBBBB',
            taxElements: 'BBBBBB',
            numberDialed: 'BBBBBB',
            checkFileId: 'BBBBBB',
            extTrxId: 'BBBBBB',
            packageTrxType: 'BBBBBB',
            expOriginalInvoice: 'BBBBBB',
            depositTransactionId: 'BBBBBB',
          },
          elemDefault,
        );

        const expected = Object.assign(
          {
            invoiceCloseDate: currentDate,
            arTransferDate: currentDate,
            trxDate: currentDate,
            businessDate: currentDate,
            insertDate: currentDate,
            updateDate: currentDate,
            trnsActivityDate: currentDate,
            approvalDate: currentDate,
            postingDate: currentDate,
            exchangeDate: currentDate,
            routingDate: currentDate,
            effectiveDate: currentDate,
            customChargeDate: currentDate,
          },
          returnedFromService,
        );
        axiosStub.put.resolves({ data: returnedFromService });

        return service.update(expected).then(res => {
          expect(res).toMatchObject(expected);
        });
      });

      it('should not update a FinancialTransactions', async () => {
        axiosStub.put.rejects(error);

        return service
          .update({})
          .then()
          .catch(err => {
            expect(err).toMatchObject(error);
          });
      });

      it('should partial update a FinancialTransactions', async () => {
        const patchObject = Object.assign(
          {
            ftSubtype: 'BBBBBB',
            invoiceCloseDate: dayjs(currentDate).format(DATE_FORMAT),
            arTransferDate: dayjs(currentDate).format(DATE_FORMAT),
            businessDate: dayjs(currentDate).format(DATE_FORMAT),
            insertDate: dayjs(currentDate).format(DATE_FORMAT),
            exchangeDate: dayjs(currentDate).format(DATE_FORMAT),
            routingDate: dayjs(currentDate).format(DATE_FORMAT),
            trxNoAgainstPackage: 1,
            trxNoHeader: 1,
            resvNameId: 1,
            finDmlSeqNo: 1,
            routingInstrnId: 1,
            invoiceNo: 1,
            arrangementId: 1,
            revisionNo: 1,
            resvDepositId: 1,
            mtrxNoAgainstPackage: 1,
            forexCommPerc: 1,
            toResvNameId: 1,
            roomNts: 1,
            orgBillNo: 1,
            installments: 1,
            contractGuestDebit: 1,
            contractNetAmount: 1,
            contractGrossAmount: 1,
            postitNo: 1,
            ccTrxFeeAmount: 1,
            changeDue: 1,
            postingSourceNameId: 1,
            bonusCheckId: 1,
            thresholdEntityQty: 1,
            trxNoSplit: 1,
            associatedTrxNo: 1,
            grossAmount: 1,
            cashierOpeningBalance: 1,
            pricePerUnit: 1,
            postedAmount: 1,
            exchangeRate: 1,
            guestAccountDebit: 1,
            cashierDebit: 1,
            packageDebit: 1,
            depLedCredit: 1,
            depLedDebit: 1,
            euroExchangeRate: 1,
            inhCredit: 1,
            packageAllowance: 1,
            parallelGuestCredit: 1,
            parallelGuestDebit: 1,
            orgPostedAmount: 1,
            roomNtsEffective: 1,
            paymentSurchargeAmt: 1,
            deferredYn: 'BBBBBB',
            taCommissionableYn: 'BBBBBB',
            taxGeneratedYn: 'BBBBBB',
            compressedYn: 'BBBBBB',
            deferredTaxesYn: 'BBBBBB',
            settlementFlag: 'BBBBBB',
            proformaYn: 'BBBBBB',
            holdYn: 'BBBBBB',
            processed8300Yn: 'BBBBBB',
            postitYn: 'BBBBBB',
            autoSettleYn: 'BBBBBB',
            asbOnlyPostTaxesOnceYn: 'BBBBBB',
            roundFactorYn: 'BBBBBB',
            correctionYn: 'BBBBBB',
            routedYn: 'BBBBBB',
            upsellChargeYn: 'BBBBBB',
            advanceBillYn: 'BBBBBB',
            gpAwardCancelledYn: 'BBBBBB',
            serviceRecoveryAdjustmentYn: 'BBBBBB',
            splitType: 'BBBBBB',
            bucketRedempYn: 'BBBBBB',
            vatOffsetYn: 'BBBBBB',
            covers: 'BBBBBB',
            advGenerateAdjustment: 'BBBBBB',
            folioType: 'BBBBBB',
            invoiceType: 'BBBBBB',
            recptType: 'BBBBBB',
            resort: 'BBBBBB',
            trxCode: 'BBBBBB',
            room: 'BBBBBB',
            tclCode1: 'BBBBBB',
            currency: 'BBBBBB',
            tclCode2: 'BBBBBB',
            rateCode: 'BBBBBB',
            reasonCode: 'BBBBBB',
            product: 'BBBBBB',
            nameTaxType: 'BBBBBB',
            approvalCode: 'BBBBBB',
            approvalStatus: 'BBBBBB',
            compTypeCode: 'BBBBBB',
            couponNo: 'BBBBBB',
            originalRoom: 'BBBBBB',
            allowanceType: 'BBBBBB',
            postingType: 'BBBBBB',
            fbaCertificateNumber: 'BBBBBB',
            postingRhythm: 'BBBBBB',
            asbTaxFlag: 'BBBBBB',
            packageArrangementCode: 'BBBBBB',
            gpAwardCode: 'BBBBBB',
            serviceRecoveryDeptCode: 'BBBBBB',
            taxRateType: 'BBBBBB',
            chequeNumber: 'BBBBBB',
            esignedReceiptName: 'BBBBBB',
            reference: 'BBBBBB',
            comments: 'BBBBBB',
            fiscalBillNo: 'BBBBBB',
            queueName: 'BBBBBB',
            thresholdTreatmentFlag: 'BBBBBB',
            propertyBillPrefix: 'BBBBBB',
            taxElements: 'BBBBBB',
            checkFileId: 'BBBBBB',
            extTrxId: 'BBBBBB',
            expOriginalInvoice: 'BBBBBB',
          },
          new FinancialTransactions(),
        );
        const returnedFromService = Object.assign(patchObject, elemDefault);

        const expected = Object.assign(
          {
            invoiceCloseDate: currentDate,
            arTransferDate: currentDate,
            trxDate: currentDate,
            businessDate: currentDate,
            insertDate: currentDate,
            updateDate: currentDate,
            trnsActivityDate: currentDate,
            approvalDate: currentDate,
            postingDate: currentDate,
            exchangeDate: currentDate,
            routingDate: currentDate,
            effectiveDate: currentDate,
            customChargeDate: currentDate,
          },
          returnedFromService,
        );
        axiosStub.patch.resolves({ data: returnedFromService });

        return service.partialUpdate(patchObject).then(res => {
          expect(res).toMatchObject(expected);
        });
      });

      it('should not partial update a FinancialTransactions', async () => {
        axiosStub.patch.rejects(error);

        return service
          .partialUpdate({})
          .then()
          .catch(err => {
            expect(err).toMatchObject(error);
          });
      });

      it('should return a list of FinancialTransactions', async () => {
        const returnedFromService = Object.assign(
          {
            trxNo: 1,
            ftSubtype: 'BBBBBB',
            invoiceCloseDate: dayjs(currentDate).format(DATE_FORMAT),
            arTransferDate: dayjs(currentDate).format(DATE_FORMAT),
            trxDate: dayjs(currentDate).format(DATE_FORMAT),
            businessDate: dayjs(currentDate).format(DATE_FORMAT),
            insertDate: dayjs(currentDate).format(DATE_FORMAT),
            updateDate: dayjs(currentDate).format(DATE_FORMAT),
            trnsActivityDate: dayjs(currentDate).format(DATE_FORMAT),
            approvalDate: dayjs(currentDate).format(DATE_FORMAT),
            postingDate: dayjs(currentDate).format(DATE_FORMAT),
            exchangeDate: dayjs(currentDate).format(DATE_FORMAT),
            routingDate: dayjs(currentDate).format(DATE_FORMAT),
            effectiveDate: dayjs(currentDate).format(DATE_FORMAT),
            customChargeDate: dayjs(currentDate).format(DATE_FORMAT),
            recptNo: 1,
            trxNoAdjust: 1,
            trxNoAddedBy: 1,
            trxNoAgainstPackage: 1,
            trxNoHeader: 1,
            arNumber: 1,
            resvNameId: 1,
            cashierId: 1,
            creditCardId: 1,
            nameId: 1,
            tranActionId: 1,
            finDmlSeqNo: 1,
            routingInstrnId: 1,
            fromResvId: 1,
            genCashierId: 1,
            folioNo: 1,
            invoiceNo: 1,
            insertUser: 1,
            updateUser: 1,
            arrangementId: 1,
            trnsFromAcct: 1,
            trnsToAcct: 1,
            billNo: 1,
            revisionNo: 1,
            resvDepositId: 1,
            linkTrxNo: 1,
            authorizerId: 1,
            compLinkTrxNo: 1,
            mtrxNoAgainstPackage: 1,
            forexCommPerc: 1,
            forexCommAmount: 1,
            articleId: 1,
            toResvNameId: 1,
            roomNts: 1,
            orgArLedDebit: 1,
            closureNo: 1,
            originalResvNameId: 1,
            orgBillNo: 1,
            membershipId: 1,
            installments: 1,
            contractGuestDebit: 1,
            contractGuestCredit: 1,
            contractNetAmount: 1,
            contractGrossAmount: 1,
            postitNo: 1,
            ccTrxFeeAmount: 1,
            changeDue: 1,
            postingSourceNameId: 1,
            bonusCheckId: 1,
            roundLinkTrxno: 1,
            reversePaymentTrxNo: 1,
            electronicVoucherNo: 1,
            thresholdDiversionId: 1,
            thresholdEntityQty: 1,
            trxNoSplit: 1,
            exchDiffTrxNo: 1,
            associatedTrxNo: 1,
            taxRate: 1,
            propChargeId: 1,
            quantity: 1,
            netAmount: 1,
            grossAmount: 1,
            cashierOpeningBalance: 1,
            pricePerUnit: 1,
            trxAmount: 1,
            postedAmount: 1,
            guestAccountCredit: 1,
            exchangeRate: 1,
            guestAccountDebit: 1,
            cashierCredit: 1,
            cashierDebit: 1,
            packageCredit: 1,
            packageDebit: 1,
            depLedCredit: 1,
            depLedDebit: 1,
            revenueAmt: 1,
            arLedCredit: 1,
            arLedDebit: 1,
            euroExchangeRate: 1,
            inhDebit: 1,
            inhCredit: 1,
            packageAllowance: 1,
            parallelGuestCredit: 1,
            parallelGuestDebit: 1,
            parallelNetAmount: 1,
            parallelGrossAmount: 1,
            orgPostedAmount: 1,
            roomNtsEffective: 1,
            paymentSurchargeAmt: 1,
            folioView: 1,
            taxInclusiveYn: 'BBBBBB',
            deferredYn: 'BBBBBB',
            indAdjustmentYn: 'BBBBBB',
            fixedChargesYn: 'BBBBBB',
            taCommissionableYn: 'BBBBBB',
            taxGeneratedYn: 'BBBBBB',
            compressedYn: 'BBBBBB',
            displayYn: 'BBBBBB',
            collAgentPostingYn: 'BBBBBB',
            fiscalTrxCodeType: 'BBBBBB',
            deferredTaxesYn: 'BBBBBB',
            advancedGenerateYn: 'BBBBBB',
            forexType: 'BBBBBB',
            taCommissionNetYn: 'BBBBBB',
            sourceCommissionNetYn: 'BBBBBB',
            settlementFlag: 'BBBBBB',
            accTypeFlag: 'BBBBBB',
            profitLossFlag: 'BBBBBB',
            proformaYn: 'BBBBBB',
            holdYn: 'BBBBBB',
            exchangeDifferenceYn: 'BBBBBB',
            calcPointsYn: 'BBBBBB',
            arChargeTransferYn: 'BBBBBB',
            processed8300Yn: 'BBBBBB',
            asbFlag: 'BBBBBB',
            postitYn: 'BBBBBB',
            autoSettleYn: 'BBBBBB',
            depTaxTransferedYn: 'BBBBBB',
            autoCreditbillYn: 'BBBBBB',
            asbOnlyPostTaxesOnceYn: 'BBBBBB',
            roundFactorYn: 'BBBBBB',
            depPostingFlag: 'BBBBBB',
            correctionYn: 'BBBBBB',
            routedYn: 'BBBBBB',
            upsellChargeYn: 'BBBBBB',
            advanceBillYn: 'BBBBBB',
            advanceBillReversedYn: 'BBBBBB',
            incTaxDeductedYn: 'BBBBBB',
            gpAwardCancelledYn: 'BBBBBB',
            serviceRecoveryAdjustmentYn: 'BBBBBB',
            splitType: 'BBBBBB',
            bucketRedempYn: 'BBBBBB',
            vatOffsetYn: 'BBBBBB',
            forexTaxYn: 'BBBBBB',
            stampDutyYn: 'BBBBBB',
            covers: 'BBBBBB',
            advGenerateAdjustment: 'BBBBBB',
            expInvoiceType: 'BBBBBB',
            folioType: 'BBBBBB',
            orgFolioType: 'BBBBBB',
            invoiceType: 'BBBBBB',
            arState: 'BBBBBB',
            exchangeType: 'BBBBBB',
            recptType: 'BBBBBB',
            roomClass: 'BBBBBB',
            resort: 'BBBBBB',
            tcGroup: 'BBBBBB',
            tcSubgroup: 'BBBBBB',
            trxCode: 'BBBBBB',
            room: 'BBBBBB',
            tclCode1: 'BBBBBB',
            currency: 'BBBBBB',
            ftGeneratedType: 'BBBBBB',
            tclCode2: 'BBBBBB',
            marketCode: 'BBBBBB',
            sourceCode: 'BBBBBB',
            rateCode: 'BBBBBB',
            hotelAcct: 'BBBBBB',
            reasonCode: 'BBBBBB',
            product: 'BBBBBB',
            targetResort: 'BBBBBB',
            nameTaxType: 'BBBBBB',
            taxInvNo: 'BBBBBB',
            approvalCode: 'BBBBBB',
            approvalStatus: 'BBBBBB',
            compLinkTrxCode: 'BBBBBB',
            compTypeCode: 'BBBBBB',
            couponNo: 'BBBBBB',
            originalRoom: 'BBBBBB',
            allowanceType: 'BBBBBB',
            advGenerateTrxCode: 'BBBBBB',
            trxServiceType: 'BBBBBB',
            postingType: 'BBBBBB',
            parallelCurrency: 'BBBBBB',
            contractCurrency: 'BBBBBB',
            fbaCertificateNumber: 'BBBBBB',
            postingRhythm: 'BBBBBB',
            asbTaxFlag: 'BBBBBB',
            packageArrangementCode: 'BBBBBB',
            gpAwardCode: 'BBBBBB',
            gpAwardCancelCode: 'BBBBBB',
            serviceRecoveryDeptCode: 'BBBBBB',
            bucketCode: 'BBBBBB',
            taxRateType: 'BBBBBB',
            chequeNumber: 'BBBBBB',
            passerByName: 'BBBBBB',
            esignedReceiptName: 'BBBBBB',
            remark: 'BBBBBB',
            reference: 'BBBBBB',
            oTrxDesc: 'BBBBBB',
            comments: 'BBBBBB',
            fiscalBillNo: 'BBBBBB',
            extSysResultMsg: 'BBBBBB',
            queueName: 'BBBBBB',
            paymentType: 'BBBBBB',
            ccRefundPosting: 'BBBBBB',
            thresholdEntityType: 'BBBBBB',
            thresholdTreatmentFlag: 'BBBBBB',
            paymentSurchargeType: 'BBBBBB',
            propertyBillPrefix: 'BBBBBB',
            taxElements: 'BBBBBB',
            numberDialed: 'BBBBBB',
            checkFileId: 'BBBBBB',
            extTrxId: 'BBBBBB',
            packageTrxType: 'BBBBBB',
            expOriginalInvoice: 'BBBBBB',
            depositTransactionId: 'BBBBBB',
          },
          elemDefault,
        );
        const expected = Object.assign(
          {
            invoiceCloseDate: currentDate,
            arTransferDate: currentDate,
            trxDate: currentDate,
            businessDate: currentDate,
            insertDate: currentDate,
            updateDate: currentDate,
            trnsActivityDate: currentDate,
            approvalDate: currentDate,
            postingDate: currentDate,
            exchangeDate: currentDate,
            routingDate: currentDate,
            effectiveDate: currentDate,
            customChargeDate: currentDate,
          },
          returnedFromService,
        );
        axiosStub.get.resolves([returnedFromService]);
        return service.retrieve({ sort: {}, page: 0, size: 10 }).then(res => {
          expect(res).toContainEqual(expected);
        });
      });

      it('should not return a list of FinancialTransactions', async () => {
        axiosStub.get.rejects(error);

        return service
          .retrieve()
          .then()
          .catch(err => {
            expect(err).toMatchObject(error);
          });
      });

      it('should delete a FinancialTransactions', async () => {
        axiosStub.delete.resolves({ ok: true });
        return service.delete(123).then(res => {
          expect(res.ok).toBeTruthy();
        });
      });

      it('should not delete a FinancialTransactions', async () => {
        axiosStub.delete.rejects(error);

        return service
          .delete(123)
          .then()
          .catch(err => {
            expect(err).toMatchObject(error);
          });
      });
    });
  });
});
