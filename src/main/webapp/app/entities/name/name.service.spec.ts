/* tslint:disable max-line-length */
import axios from 'axios';
import sinon from 'sinon';
import dayjs from 'dayjs';

import NameService from './name.service';
import { DATE_FORMAT } from '@/shared/composables/date-format';
import { Name } from '@/shared/model/name.model';

const error = {
  response: {
    status: null,
    data: {
      type: null,
    },
  },
};

const axiosStub = {
  get: sinon.stub(axios, 'get'),
  post: sinon.stub(axios, 'post'),
  put: sinon.stub(axios, 'put'),
  patch: sinon.stub(axios, 'patch'),
  delete: sinon.stub(axios, 'delete'),
};

describe('Service Tests', () => {
  describe('Name Service', () => {
    let service: NameService;
    let elemDefault;
    let currentDate: Date;

    beforeEach(() => {
      service = new NameService();
      currentDate = new Date();
      elemDefault = new Name(
        123,
        0,
        'AAAAAAA',
        0,
        currentDate,
        0,
        currentDate,
        0,
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        currentDate,
        currentDate,
        currentDate,
        currentDate,
        0,
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        0,
        'AAAAAAA',
        0,
        0,
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        0,
        0,
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        currentDate,
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        0,
        currentDate,
        currentDate,
        0,
        0,
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        currentDate,
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        currentDate,
        currentDate,
        currentDate,
        currentDate,
        currentDate,
        currentDate,
        currentDate,
        currentDate,
        currentDate,
        currentDate,
        currentDate,
        currentDate,
        currentDate,
        currentDate,
        currentDate,
        currentDate,
        currentDate,
        currentDate,
        currentDate,
        currentDate,
        0,
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        0,
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        0,
        'AAAAAAA',
        'AAAAAAA',
        0,
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        0,
        'AAAAAAA',
        'AAAAAAA',
        currentDate,
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        currentDate,
      );
    });

    describe('Service methods', () => {
      it('should find an element', async () => {
        const returnedFromService = Object.assign(
          {
            insertDate: dayjs(currentDate).format(DATE_FORMAT),
            updateDate: dayjs(currentDate).format(DATE_FORMAT),
            inactiveDate: dayjs(currentDate).format(DATE_FORMAT),
            arcUpdateDate: dayjs(currentDate).format(DATE_FORMAT),
            updateFaxDate: dayjs(currentDate).format(DATE_FORMAT),
            birthDate: dayjs(currentDate).format(DATE_FORMAT),
            contractRecvDate: dayjs(currentDate).format(DATE_FORMAT),
            downloadDate: dayjs(currentDate).format(DATE_FORMAT),
            uploadDate: dayjs(currentDate).format(DATE_FORMAT),
            idDate: dayjs(currentDate).format(DATE_FORMAT),
            udfd01: dayjs(currentDate).format(DATE_FORMAT),
            udfd02: dayjs(currentDate).format(DATE_FORMAT),
            udfd03: dayjs(currentDate).format(DATE_FORMAT),
            udfd04: dayjs(currentDate).format(DATE_FORMAT),
            udfd05: dayjs(currentDate).format(DATE_FORMAT),
            udfd06: dayjs(currentDate).format(DATE_FORMAT),
            udfd07: dayjs(currentDate).format(DATE_FORMAT),
            udfd08: dayjs(currentDate).format(DATE_FORMAT),
            udfd09: dayjs(currentDate).format(DATE_FORMAT),
            udfd10: dayjs(currentDate).format(DATE_FORMAT),
            udfd11: dayjs(currentDate).format(DATE_FORMAT),
            udfd12: dayjs(currentDate).format(DATE_FORMAT),
            udfd13: dayjs(currentDate).format(DATE_FORMAT),
            udfd14: dayjs(currentDate).format(DATE_FORMAT),
            udfd15: dayjs(currentDate).format(DATE_FORMAT),
            udfd16: dayjs(currentDate).format(DATE_FORMAT),
            udfd17: dayjs(currentDate).format(DATE_FORMAT),
            udfd18: dayjs(currentDate).format(DATE_FORMAT),
            udfd19: dayjs(currentDate).format(DATE_FORMAT),
            udfd20: dayjs(currentDate).format(DATE_FORMAT),
            eInvLiableLastUpdated: dayjs(currentDate).format(DATE_FORMAT),
            anonymizationDate: dayjs(currentDate).format(DATE_FORMAT),
          },
          elemDefault,
        );
        axiosStub.get.resolves({ data: returnedFromService });

        return service.find(123).then(res => {
          expect(res).toMatchObject(elemDefault);
        });
      });

      it('should not find an element', async () => {
        axiosStub.get.rejects(error);
        return service
          .find(123)
          .then()
          .catch(err => {
            expect(err).toMatchObject(error);
          });
      });

      it('should create a Name', async () => {
        const returnedFromService = Object.assign(
          {
            id: 123,
            insertDate: dayjs(currentDate).format(DATE_FORMAT),
            updateDate: dayjs(currentDate).format(DATE_FORMAT),
            inactiveDate: dayjs(currentDate).format(DATE_FORMAT),
            arcUpdateDate: dayjs(currentDate).format(DATE_FORMAT),
            updateFaxDate: dayjs(currentDate).format(DATE_FORMAT),
            birthDate: dayjs(currentDate).format(DATE_FORMAT),
            contractRecvDate: dayjs(currentDate).format(DATE_FORMAT),
            downloadDate: dayjs(currentDate).format(DATE_FORMAT),
            uploadDate: dayjs(currentDate).format(DATE_FORMAT),
            idDate: dayjs(currentDate).format(DATE_FORMAT),
            udfd01: dayjs(currentDate).format(DATE_FORMAT),
            udfd02: dayjs(currentDate).format(DATE_FORMAT),
            udfd03: dayjs(currentDate).format(DATE_FORMAT),
            udfd04: dayjs(currentDate).format(DATE_FORMAT),
            udfd05: dayjs(currentDate).format(DATE_FORMAT),
            udfd06: dayjs(currentDate).format(DATE_FORMAT),
            udfd07: dayjs(currentDate).format(DATE_FORMAT),
            udfd08: dayjs(currentDate).format(DATE_FORMAT),
            udfd09: dayjs(currentDate).format(DATE_FORMAT),
            udfd10: dayjs(currentDate).format(DATE_FORMAT),
            udfd11: dayjs(currentDate).format(DATE_FORMAT),
            udfd12: dayjs(currentDate).format(DATE_FORMAT),
            udfd13: dayjs(currentDate).format(DATE_FORMAT),
            udfd14: dayjs(currentDate).format(DATE_FORMAT),
            udfd15: dayjs(currentDate).format(DATE_FORMAT),
            udfd16: dayjs(currentDate).format(DATE_FORMAT),
            udfd17: dayjs(currentDate).format(DATE_FORMAT),
            udfd18: dayjs(currentDate).format(DATE_FORMAT),
            udfd19: dayjs(currentDate).format(DATE_FORMAT),
            udfd20: dayjs(currentDate).format(DATE_FORMAT),
            eInvLiableLastUpdated: dayjs(currentDate).format(DATE_FORMAT),
            anonymizationDate: dayjs(currentDate).format(DATE_FORMAT),
          },
          elemDefault,
        );
        const expected = Object.assign(
          {
            insertDate: currentDate,
            updateDate: currentDate,
            inactiveDate: currentDate,
            arcUpdateDate: currentDate,
            updateFaxDate: currentDate,
            birthDate: currentDate,
            contractRecvDate: currentDate,
            downloadDate: currentDate,
            uploadDate: currentDate,
            idDate: currentDate,
            udfd01: currentDate,
            udfd02: currentDate,
            udfd03: currentDate,
            udfd04: currentDate,
            udfd05: currentDate,
            udfd06: currentDate,
            udfd07: currentDate,
            udfd08: currentDate,
            udfd09: currentDate,
            udfd10: currentDate,
            udfd11: currentDate,
            udfd12: currentDate,
            udfd13: currentDate,
            udfd14: currentDate,
            udfd15: currentDate,
            udfd16: currentDate,
            udfd17: currentDate,
            udfd18: currentDate,
            udfd19: currentDate,
            udfd20: currentDate,
            eInvLiableLastUpdated: currentDate,
            anonymizationDate: currentDate,
          },
          returnedFromService,
        );

        axiosStub.post.resolves({ data: returnedFromService });
        return service.create({}).then(res => {
          expect(res).toMatchObject(expected);
        });
      });

      it('should not create a Name', async () => {
        axiosStub.post.rejects(error);

        return service
          .create({})
          .then()
          .catch(err => {
            expect(err).toMatchObject(error);
          });
      });

      it('should update a Name', async () => {
        const returnedFromService = Object.assign(
          {
            nameId: 1,
            nameCode: 'BBBBBB',
            insertUser: 1,
            insertDate: dayjs(currentDate).format(DATE_FORMAT),
            updateUser: 1,
            updateDate: dayjs(currentDate).format(DATE_FORMAT),
            primaryNameId: 1,
            repeatGuestId: 'BBBBBB',
            mailList: 'BBBBBB',
            mailType: 'BBBBBB',
            followOn: 'BBBBBB',
            businessTitle: 'BBBBBB',
            inactiveDate: dayjs(currentDate).format(DATE_FORMAT),
            arcUpdateDate: dayjs(currentDate).format(DATE_FORMAT),
            updateFaxDate: dayjs(currentDate).format(DATE_FORMAT),
            birthDate: dayjs(currentDate).format(DATE_FORMAT),
            collectionUserId: 1,
            company: 'BBBBBB',
            soundExCompany: 'BBBBBB',
            legalCompany: 'BBBBBB',
            first: 'BBBBBB',
            middle: 'BBBBBB',
            last: 'BBBBBB',
            nickname: 'BBBBBB',
            title: 'BBBBBB',
            soundExLast: 'BBBBBB',
            externalReferenceRequ: 'BBBBBB',
            vipStatus: 'BBBBBB',
            vipAuthorization: 'BBBBBB',
            billingProfileCode: 'BBBBBB',
            rateStructure: 'BBBBBB',
            nameComment: 'BBBBBB',
            tourOperatorType: 'BBBBBB',
            region: 'BBBBBB',
            typeOf1099: 'BBBBBB',
            tax1No: 'BBBBBB',
            companyNameId: 1,
            externalReferenceRequired: 'BBBBBB',
            vendorId: 1,
            vendorSiteId: 1,
            arcOfficeType: 'BBBBBB',
            tax2No: 'BBBBBB',
            arcMailFlag: 'BBBBBB',
            name2: 'BBBBBB',
            name3: 'BBBBBB',
            salesrep: 'BBBBBB',
            tracecode: 'BBBBBB',
            geographicRegion: 'BBBBBB',
            guestClassification: 'BBBBBB',
            primaryAddressId: 1,
            primaryPhoneId: 1,
            taxExemptStatus: 'BBBBBB',
            gdsName: 'BBBBBB',
            gdsTransactionNo: 'BBBBBB',
            nationality: 'BBBBBB',
            language: 'BBBBBB',
            salutation: 'BBBBBB',
            passport: 'BBBBBB',
            historyYn: 'BBBBBB',
            resvContact: 'BBBBBB',
            contractNo: 'BBBBBB',
            contractRecvDate: dayjs(currentDate).format(DATE_FORMAT),
            acctContact: 'BBBBBB',
            priority: 'BBBBBB',
            industryCode: 'BBBBBB',
            roomsPotential: 'BBBBBB',
            competitionCode: 'BBBBBB',
            scope: 'BBBBBB',
            scopeCity: 'BBBBBB',
            territory: 'BBBBBB',
            actioncode: 'BBBBBB',
            activeYn: 'BBBBBB',
            masterAccountYn: 'BBBBBB',
            nameType: 'BBBBBB',
            sname: 'BBBBBB',
            nameTaxType: 'BBBBBB',
            sfirst: 'BBBBBB',
            arNo: 'BBBBBB',
            availabilityOverride: 'BBBBBB',
            billingCode: 'BBBBBB',
            cashBlInd: 'BBBBBB',
            blMsg: 'BBBBBB',
            currencyCode: 'BBBBBB',
            commissionCode: 'BBBBBB',
            holdCode: 'BBBBBB',
            interest: 'BBBBBB',
            summRefCc: 'BBBBBB',
            iataCompType: 'BBBBBB',
            srepCode: 'BBBBBB',
            accountsource: 'BBBBBB',
            markets: 'BBBBBB',
            productInterest: 'BBBBBB',
            keyword: 'BBBBBB',
            letterGreeting: 'BBBBBB',
            influence: 'BBBBBB',
            deptId: 'BBBBBB',
            department: 'BBBBBB',
            contactYn: 'BBBBBB',
            accountType: 'BBBBBB',
            downloadResort: 'BBBBBB',
            downloadSrep: 1,
            downloadDate: dayjs(currentDate).format(DATE_FORMAT),
            uploadDate: dayjs(currentDate).format(DATE_FORMAT),
            laptopChange: 1,
            crsNameid: 1,
            commPayCentral: 'BBBBBB',
            ccProfileYn: 'BBBBBB',
            gender: 'BBBBBB',
            birthPlace: 'BBBBBB',
            birthCountry: 'BBBBBB',
            profession: 'BBBBBB',
            idType: 'BBBBBB',
            idNumber: 'BBBBBB',
            idDate: dayjs(currentDate).format(DATE_FORMAT),
            idPlace: 'BBBBBB',
            idCountry: 'BBBBBB',
            udfc01: 'BBBBBB',
            udfc02: 'BBBBBB',
            udfc03: 'BBBBBB',
            udfc04: 'BBBBBB',
            udfc05: 'BBBBBB',
            udfc06: 'BBBBBB',
            udfc07: 'BBBBBB',
            udfc08: 'BBBBBB',
            udfc09: 'BBBBBB',
            udfc10: 'BBBBBB',
            udfc11: 'BBBBBB',
            udfc12: 'BBBBBB',
            udfc13: 'BBBBBB',
            udfc14: 'BBBBBB',
            udfc15: 'BBBBBB',
            udfc16: 'BBBBBB',
            udfc17: 'BBBBBB',
            udfc18: 'BBBBBB',
            udfc19: 'BBBBBB',
            udfc20: 'BBBBBB',
            udfc21: 'BBBBBB',
            udfc22: 'BBBBBB',
            udfc23: 'BBBBBB',
            udfc24: 'BBBBBB',
            udfc25: 'BBBBBB',
            udfc26: 'BBBBBB',
            udfc27: 'BBBBBB',
            udfc28: 'BBBBBB',
            udfc29: 'BBBBBB',
            udfc30: 'BBBBBB',
            udfc31: 'BBBBBB',
            udfc32: 'BBBBBB',
            udfc33: 'BBBBBB',
            udfc34: 'BBBBBB',
            udfc35: 'BBBBBB',
            udfc36: 'BBBBBB',
            udfc37: 'BBBBBB',
            udfc38: 'BBBBBB',
            udfc39: 'BBBBBB',
            udfc40: 'BBBBBB',
            udfn01: 1,
            udfn02: 1,
            udfn03: 1,
            udfn04: 1,
            udfn05: 1,
            udfn06: 1,
            udfn07: 1,
            udfn08: 1,
            udfn09: 1,
            udfn10: 1,
            udfn11: 1,
            udfn12: 1,
            udfn13: 1,
            udfn14: 1,
            udfn15: 1,
            udfn16: 1,
            udfn17: 1,
            udfn18: 1,
            udfn19: 1,
            udfn20: 1,
            udfn21: 1,
            udfn22: 1,
            udfn23: 1,
            udfn24: 1,
            udfn25: 1,
            udfn26: 1,
            udfn27: 1,
            udfn28: 1,
            udfn29: 1,
            udfn30: 1,
            udfn31: 1,
            udfn32: 1,
            udfn33: 1,
            udfn34: 1,
            udfn35: 1,
            udfn36: 1,
            udfn37: 1,
            udfn38: 1,
            udfn39: 1,
            udfn40: 1,
            udfd01: dayjs(currentDate).format(DATE_FORMAT),
            udfd02: dayjs(currentDate).format(DATE_FORMAT),
            udfd03: dayjs(currentDate).format(DATE_FORMAT),
            udfd04: dayjs(currentDate).format(DATE_FORMAT),
            udfd05: dayjs(currentDate).format(DATE_FORMAT),
            udfd06: dayjs(currentDate).format(DATE_FORMAT),
            udfd07: dayjs(currentDate).format(DATE_FORMAT),
            udfd08: dayjs(currentDate).format(DATE_FORMAT),
            udfd09: dayjs(currentDate).format(DATE_FORMAT),
            udfd10: dayjs(currentDate).format(DATE_FORMAT),
            udfd11: dayjs(currentDate).format(DATE_FORMAT),
            udfd12: dayjs(currentDate).format(DATE_FORMAT),
            udfd13: dayjs(currentDate).format(DATE_FORMAT),
            udfd14: dayjs(currentDate).format(DATE_FORMAT),
            udfd15: dayjs(currentDate).format(DATE_FORMAT),
            udfd16: dayjs(currentDate).format(DATE_FORMAT),
            udfd17: dayjs(currentDate).format(DATE_FORMAT),
            udfd18: dayjs(currentDate).format(DATE_FORMAT),
            udfd19: dayjs(currentDate).format(DATE_FORMAT),
            udfd20: dayjs(currentDate).format(DATE_FORMAT),
            paymentDueDays: 1,
            suffix: 'BBBBBB',
            externalId: 'BBBBBB',
            guestPrivYn: 'BBBBBB',
            emailYn: 'BBBBBB',
            mailYn: 'BBBBBB',
            indexName: 'BBBBBB',
            xlastName: 'BBBBBB',
            xfirstName: 'BBBBBB',
            xcompanyName: 'BBBBBB',
            xtitle: 'BBBBBB',
            xsalutation: 'BBBBBB',
            sxname: 'BBBBBB',
            sxfirstName: 'BBBBBB',
            lastUpdatedResort: 'BBBBBB',
            envelopeGreeting: 'BBBBBB',
            xenvelopeGreeting: 'BBBBBB',
            directBillBatchType: 'BBBBBB',
            resortRegistered: 'BBBBBB',
            taxOffice: 'BBBBBB',
            taxType: 'BBBBBB',
            taxCategory: 'BBBBBB',
            preferredRoomNo: 'BBBBBB',
            phoneYn: 'BBBBBB',
            smsYn: 'BBBBBB',
            isProtected: 'BBBBBB',
            xlanguage: 'BBBBBB',
            marketResearchYn: 'BBBBBB',
            thirdPartyYn: 'BBBBBB',
            autoenrollMemberYn: 'BBBBBB',
            chainCode: 'BBBBBB',
            companyGroupId: 'BBBBBB',
            includeIn1099Yn: 'BBBBBB',
            creditRating: 'BBBBBB',
            titleSuffix: 1,
            inactiveReason: 'BBBBBB',
            iataConsortia: 'BBBBBB',
            psuedoProfileYn: 'BBBBBB',
            profilePrivacyFlg: 'BBBBBB',
            replaceAddress: 'BBBBBB',
            alienRegistrationNo: 'BBBBBB',
            immigrationStatus: 'BBBBBB',
            visaValidityType: 'BBBBBB',
            idDocumentAttachId: 1,
            superSearchIndexText: 'BBBBBB',
            birthDateStr: 'BBBBBB',
            origNameId: 1,
            dOptInMailListFlg: 'BBBBBB',
            dOptInMarketResearchFlg: 'BBBBBB',
            dOptInThirdPartyFlg: 'BBBBBB',
            dOptInAutoenrollMemberFlg: 'BBBBBB',
            dOptInEmailFlg: 'BBBBBB',
            dOptInPhoneFlg: 'BBBBBB',
            dOptInSmsFlg: 'BBBBBB',
            dOptInGuestPrivFlg: 'BBBBBB',
            arCreditLimitYn: 'BBBBBB',
            profileCreditLimit: 1,
            xmiddleName: 'BBBBBB',
            eInvoiceLiableYn: 'BBBBBB',
            eInvLiableLastUpdated: dayjs(currentDate).format(DATE_FORMAT),
            internalBillYn: 'BBBBBB',
            compPreApprovalRequiredYn: 'BBBBBB',
            anonymizationStatus: 'BBBBBB',
            anonymizationDate: dayjs(currentDate).format(DATE_FORMAT),
          },
          elemDefault,
        );

        const expected = Object.assign(
          {
            insertDate: currentDate,
            updateDate: currentDate,
            inactiveDate: currentDate,
            arcUpdateDate: currentDate,
            updateFaxDate: currentDate,
            birthDate: currentDate,
            contractRecvDate: currentDate,
            downloadDate: currentDate,
            uploadDate: currentDate,
            idDate: currentDate,
            udfd01: currentDate,
            udfd02: currentDate,
            udfd03: currentDate,
            udfd04: currentDate,
            udfd05: currentDate,
            udfd06: currentDate,
            udfd07: currentDate,
            udfd08: currentDate,
            udfd09: currentDate,
            udfd10: currentDate,
            udfd11: currentDate,
            udfd12: currentDate,
            udfd13: currentDate,
            udfd14: currentDate,
            udfd15: currentDate,
            udfd16: currentDate,
            udfd17: currentDate,
            udfd18: currentDate,
            udfd19: currentDate,
            udfd20: currentDate,
            eInvLiableLastUpdated: currentDate,
            anonymizationDate: currentDate,
          },
          returnedFromService,
        );
        axiosStub.put.resolves({ data: returnedFromService });

        return service.update(expected).then(res => {
          expect(res).toMatchObject(expected);
        });
      });

      it('should not update a Name', async () => {
        axiosStub.put.rejects(error);

        return service
          .update({})
          .then()
          .catch(err => {
            expect(err).toMatchObject(error);
          });
      });

      it('should partial update a Name', async () => {
        const patchObject = Object.assign(
          {
            nameCode: 'BBBBBB',
            updateDate: dayjs(currentDate).format(DATE_FORMAT),
            primaryNameId: 1,
            mailList: 'BBBBBB',
            mailType: 'BBBBBB',
            followOn: 'BBBBBB',
            businessTitle: 'BBBBBB',
            inactiveDate: dayjs(currentDate).format(DATE_FORMAT),
            birthDate: dayjs(currentDate).format(DATE_FORMAT),
            collectionUserId: 1,
            company: 'BBBBBB',
            soundExLast: 'BBBBBB',
            externalReferenceRequ: 'BBBBBB',
            vipAuthorization: 'BBBBBB',
            billingProfileCode: 'BBBBBB',
            nameComment: 'BBBBBB',
            region: 'BBBBBB',
            typeOf1099: 'BBBBBB',
            vendorSiteId: 1,
            arcOfficeType: 'BBBBBB',
            name3: 'BBBBBB',
            primaryPhoneId: 1,
            taxExemptStatus: 'BBBBBB',
            gdsName: 'BBBBBB',
            gdsTransactionNo: 'BBBBBB',
            language: 'BBBBBB',
            passport: 'BBBBBB',
            contractNo: 'BBBBBB',
            priority: 'BBBBBB',
            industryCode: 'BBBBBB',
            roomsPotential: 'BBBBBB',
            territory: 'BBBBBB',
            actioncode: 'BBBBBB',
            activeYn: 'BBBBBB',
            masterAccountYn: 'BBBBBB',
            nameType: 'BBBBBB',
            arNo: 'BBBBBB',
            availabilityOverride: 'BBBBBB',
            billingCode: 'BBBBBB',
            interest: 'BBBBBB',
            summRefCc: 'BBBBBB',
            iataCompType: 'BBBBBB',
            srepCode: 'BBBBBB',
            markets: 'BBBBBB',
            keyword: 'BBBBBB',
            letterGreeting: 'BBBBBB',
            deptId: 'BBBBBB',
            accountType: 'BBBBBB',
            downloadSrep: 1,
            uploadDate: dayjs(currentDate).format(DATE_FORMAT),
            crsNameid: 1,
            commPayCentral: 'BBBBBB',
            birthPlace: 'BBBBBB',
            idType: 'BBBBBB',
            idPlace: 'BBBBBB',
            udfc01: 'BBBBBB',
            udfc02: 'BBBBBB',
            udfc04: 'BBBBBB',
            udfc07: 'BBBBBB',
            udfc08: 'BBBBBB',
            udfc11: 'BBBBBB',
            udfc13: 'BBBBBB',
            udfc18: 'BBBBBB',
            udfc19: 'BBBBBB',
            udfc20: 'BBBBBB',
            udfc25: 'BBBBBB',
            udfc27: 'BBBBBB',
            udfc29: 'BBBBBB',
            udfc30: 'BBBBBB',
            udfc31: 'BBBBBB',
            udfc32: 'BBBBBB',
            udfc34: 'BBBBBB',
            udfc38: 'BBBBBB',
            udfc39: 'BBBBBB',
            udfn01: 1,
            udfn02: 1,
            udfn05: 1,
            udfn08: 1,
            udfn11: 1,
            udfn13: 1,
            udfn15: 1,
            udfn16: 1,
            udfn17: 1,
            udfn18: 1,
            udfn20: 1,
            udfn21: 1,
            udfn29: 1,
            udfn30: 1,
            udfn31: 1,
            udfn34: 1,
            udfn35: 1,
            udfn36: 1,
            udfn38: 1,
            udfd05: dayjs(currentDate).format(DATE_FORMAT),
            udfd06: dayjs(currentDate).format(DATE_FORMAT),
            udfd08: dayjs(currentDate).format(DATE_FORMAT),
            udfd10: dayjs(currentDate).format(DATE_FORMAT),
            udfd11: dayjs(currentDate).format(DATE_FORMAT),
            udfd13: dayjs(currentDate).format(DATE_FORMAT),
            udfd14: dayjs(currentDate).format(DATE_FORMAT),
            udfd15: dayjs(currentDate).format(DATE_FORMAT),
            udfd16: dayjs(currentDate).format(DATE_FORMAT),
            udfd17: dayjs(currentDate).format(DATE_FORMAT),
            udfd18: dayjs(currentDate).format(DATE_FORMAT),
            udfd19: dayjs(currentDate).format(DATE_FORMAT),
            paymentDueDays: 1,
            guestPrivYn: 'BBBBBB',
            emailYn: 'BBBBBB',
            xcompanyName: 'BBBBBB',
            sxfirstName: 'BBBBBB',
            xenvelopeGreeting: 'BBBBBB',
            directBillBatchType: 'BBBBBB',
            resortRegistered: 'BBBBBB',
            taxOffice: 'BBBBBB',
            taxCategory: 'BBBBBB',
            preferredRoomNo: 'BBBBBB',
            phoneYn: 'BBBBBB',
            isProtected: 'BBBBBB',
            xlanguage: 'BBBBBB',
            marketResearchYn: 'BBBBBB',
            chainCode: 'BBBBBB',
            includeIn1099Yn: 'BBBBBB',
            creditRating: 'BBBBBB',
            titleSuffix: 1,
            profilePrivacyFlg: 'BBBBBB',
            replaceAddress: 'BBBBBB',
            alienRegistrationNo: 'BBBBBB',
            immigrationStatus: 'BBBBBB',
            idDocumentAttachId: 1,
            birthDateStr: 'BBBBBB',
            dOptInMarketResearchFlg: 'BBBBBB',
            dOptInEmailFlg: 'BBBBBB',
            dOptInSmsFlg: 'BBBBBB',
            eInvLiableLastUpdated: dayjs(currentDate).format(DATE_FORMAT),
            compPreApprovalRequiredYn: 'BBBBBB',
          },
          new Name(),
        );
        const returnedFromService = Object.assign(patchObject, elemDefault);

        const expected = Object.assign(
          {
            insertDate: currentDate,
            updateDate: currentDate,
            inactiveDate: currentDate,
            arcUpdateDate: currentDate,
            updateFaxDate: currentDate,
            birthDate: currentDate,
            contractRecvDate: currentDate,
            downloadDate: currentDate,
            uploadDate: currentDate,
            idDate: currentDate,
            udfd01: currentDate,
            udfd02: currentDate,
            udfd03: currentDate,
            udfd04: currentDate,
            udfd05: currentDate,
            udfd06: currentDate,
            udfd07: currentDate,
            udfd08: currentDate,
            udfd09: currentDate,
            udfd10: currentDate,
            udfd11: currentDate,
            udfd12: currentDate,
            udfd13: currentDate,
            udfd14: currentDate,
            udfd15: currentDate,
            udfd16: currentDate,
            udfd17: currentDate,
            udfd18: currentDate,
            udfd19: currentDate,
            udfd20: currentDate,
            eInvLiableLastUpdated: currentDate,
            anonymizationDate: currentDate,
          },
          returnedFromService,
        );
        axiosStub.patch.resolves({ data: returnedFromService });

        return service.partialUpdate(patchObject).then(res => {
          expect(res).toMatchObject(expected);
        });
      });

      it('should not partial update a Name', async () => {
        axiosStub.patch.rejects(error);

        return service
          .partialUpdate({})
          .then()
          .catch(err => {
            expect(err).toMatchObject(error);
          });
      });

      it('should return a list of Name', async () => {
        const returnedFromService = Object.assign(
          {
            nameId: 1,
            nameCode: 'BBBBBB',
            insertUser: 1,
            insertDate: dayjs(currentDate).format(DATE_FORMAT),
            updateUser: 1,
            updateDate: dayjs(currentDate).format(DATE_FORMAT),
            primaryNameId: 1,
            repeatGuestId: 'BBBBBB',
            mailList: 'BBBBBB',
            mailType: 'BBBBBB',
            followOn: 'BBBBBB',
            businessTitle: 'BBBBBB',
            inactiveDate: dayjs(currentDate).format(DATE_FORMAT),
            arcUpdateDate: dayjs(currentDate).format(DATE_FORMAT),
            updateFaxDate: dayjs(currentDate).format(DATE_FORMAT),
            birthDate: dayjs(currentDate).format(DATE_FORMAT),
            collectionUserId: 1,
            company: 'BBBBBB',
            soundExCompany: 'BBBBBB',
            legalCompany: 'BBBBBB',
            first: 'BBBBBB',
            middle: 'BBBBBB',
            last: 'BBBBBB',
            nickname: 'BBBBBB',
            title: 'BBBBBB',
            soundExLast: 'BBBBBB',
            externalReferenceRequ: 'BBBBBB',
            vipStatus: 'BBBBBB',
            vipAuthorization: 'BBBBBB',
            billingProfileCode: 'BBBBBB',
            rateStructure: 'BBBBBB',
            nameComment: 'BBBBBB',
            tourOperatorType: 'BBBBBB',
            region: 'BBBBBB',
            typeOf1099: 'BBBBBB',
            tax1No: 'BBBBBB',
            companyNameId: 1,
            externalReferenceRequired: 'BBBBBB',
            vendorId: 1,
            vendorSiteId: 1,
            arcOfficeType: 'BBBBBB',
            tax2No: 'BBBBBB',
            arcMailFlag: 'BBBBBB',
            name2: 'BBBBBB',
            name3: 'BBBBBB',
            salesrep: 'BBBBBB',
            tracecode: 'BBBBBB',
            geographicRegion: 'BBBBBB',
            guestClassification: 'BBBBBB',
            primaryAddressId: 1,
            primaryPhoneId: 1,
            taxExemptStatus: 'BBBBBB',
            gdsName: 'BBBBBB',
            gdsTransactionNo: 'BBBBBB',
            nationality: 'BBBBBB',
            language: 'BBBBBB',
            salutation: 'BBBBBB',
            passport: 'BBBBBB',
            historyYn: 'BBBBBB',
            resvContact: 'BBBBBB',
            contractNo: 'BBBBBB',
            contractRecvDate: dayjs(currentDate).format(DATE_FORMAT),
            acctContact: 'BBBBBB',
            priority: 'BBBBBB',
            industryCode: 'BBBBBB',
            roomsPotential: 'BBBBBB',
            competitionCode: 'BBBBBB',
            scope: 'BBBBBB',
            scopeCity: 'BBBBBB',
            territory: 'BBBBBB',
            actioncode: 'BBBBBB',
            activeYn: 'BBBBBB',
            masterAccountYn: 'BBBBBB',
            nameType: 'BBBBBB',
            sname: 'BBBBBB',
            nameTaxType: 'BBBBBB',
            sfirst: 'BBBBBB',
            arNo: 'BBBBBB',
            availabilityOverride: 'BBBBBB',
            billingCode: 'BBBBBB',
            cashBlInd: 'BBBBBB',
            blMsg: 'BBBBBB',
            currencyCode: 'BBBBBB',
            commissionCode: 'BBBBBB',
            holdCode: 'BBBBBB',
            interest: 'BBBBBB',
            summRefCc: 'BBBBBB',
            iataCompType: 'BBBBBB',
            srepCode: 'BBBBBB',
            accountsource: 'BBBBBB',
            markets: 'BBBBBB',
            productInterest: 'BBBBBB',
            keyword: 'BBBBBB',
            letterGreeting: 'BBBBBB',
            influence: 'BBBBBB',
            deptId: 'BBBBBB',
            department: 'BBBBBB',
            contactYn: 'BBBBBB',
            accountType: 'BBBBBB',
            downloadResort: 'BBBBBB',
            downloadSrep: 1,
            downloadDate: dayjs(currentDate).format(DATE_FORMAT),
            uploadDate: dayjs(currentDate).format(DATE_FORMAT),
            laptopChange: 1,
            crsNameid: 1,
            commPayCentral: 'BBBBBB',
            ccProfileYn: 'BBBBBB',
            gender: 'BBBBBB',
            birthPlace: 'BBBBBB',
            birthCountry: 'BBBBBB',
            profession: 'BBBBBB',
            idType: 'BBBBBB',
            idNumber: 'BBBBBB',
            idDate: dayjs(currentDate).format(DATE_FORMAT),
            idPlace: 'BBBBBB',
            idCountry: 'BBBBBB',
            udfc01: 'BBBBBB',
            udfc02: 'BBBBBB',
            udfc03: 'BBBBBB',
            udfc04: 'BBBBBB',
            udfc05: 'BBBBBB',
            udfc06: 'BBBBBB',
            udfc07: 'BBBBBB',
            udfc08: 'BBBBBB',
            udfc09: 'BBBBBB',
            udfc10: 'BBBBBB',
            udfc11: 'BBBBBB',
            udfc12: 'BBBBBB',
            udfc13: 'BBBBBB',
            udfc14: 'BBBBBB',
            udfc15: 'BBBBBB',
            udfc16: 'BBBBBB',
            udfc17: 'BBBBBB',
            udfc18: 'BBBBBB',
            udfc19: 'BBBBBB',
            udfc20: 'BBBBBB',
            udfc21: 'BBBBBB',
            udfc22: 'BBBBBB',
            udfc23: 'BBBBBB',
            udfc24: 'BBBBBB',
            udfc25: 'BBBBBB',
            udfc26: 'BBBBBB',
            udfc27: 'BBBBBB',
            udfc28: 'BBBBBB',
            udfc29: 'BBBBBB',
            udfc30: 'BBBBBB',
            udfc31: 'BBBBBB',
            udfc32: 'BBBBBB',
            udfc33: 'BBBBBB',
            udfc34: 'BBBBBB',
            udfc35: 'BBBBBB',
            udfc36: 'BBBBBB',
            udfc37: 'BBBBBB',
            udfc38: 'BBBBBB',
            udfc39: 'BBBBBB',
            udfc40: 'BBBBBB',
            udfn01: 1,
            udfn02: 1,
            udfn03: 1,
            udfn04: 1,
            udfn05: 1,
            udfn06: 1,
            udfn07: 1,
            udfn08: 1,
            udfn09: 1,
            udfn10: 1,
            udfn11: 1,
            udfn12: 1,
            udfn13: 1,
            udfn14: 1,
            udfn15: 1,
            udfn16: 1,
            udfn17: 1,
            udfn18: 1,
            udfn19: 1,
            udfn20: 1,
            udfn21: 1,
            udfn22: 1,
            udfn23: 1,
            udfn24: 1,
            udfn25: 1,
            udfn26: 1,
            udfn27: 1,
            udfn28: 1,
            udfn29: 1,
            udfn30: 1,
            udfn31: 1,
            udfn32: 1,
            udfn33: 1,
            udfn34: 1,
            udfn35: 1,
            udfn36: 1,
            udfn37: 1,
            udfn38: 1,
            udfn39: 1,
            udfn40: 1,
            udfd01: dayjs(currentDate).format(DATE_FORMAT),
            udfd02: dayjs(currentDate).format(DATE_FORMAT),
            udfd03: dayjs(currentDate).format(DATE_FORMAT),
            udfd04: dayjs(currentDate).format(DATE_FORMAT),
            udfd05: dayjs(currentDate).format(DATE_FORMAT),
            udfd06: dayjs(currentDate).format(DATE_FORMAT),
            udfd07: dayjs(currentDate).format(DATE_FORMAT),
            udfd08: dayjs(currentDate).format(DATE_FORMAT),
            udfd09: dayjs(currentDate).format(DATE_FORMAT),
            udfd10: dayjs(currentDate).format(DATE_FORMAT),
            udfd11: dayjs(currentDate).format(DATE_FORMAT),
            udfd12: dayjs(currentDate).format(DATE_FORMAT),
            udfd13: dayjs(currentDate).format(DATE_FORMAT),
            udfd14: dayjs(currentDate).format(DATE_FORMAT),
            udfd15: dayjs(currentDate).format(DATE_FORMAT),
            udfd16: dayjs(currentDate).format(DATE_FORMAT),
            udfd17: dayjs(currentDate).format(DATE_FORMAT),
            udfd18: dayjs(currentDate).format(DATE_FORMAT),
            udfd19: dayjs(currentDate).format(DATE_FORMAT),
            udfd20: dayjs(currentDate).format(DATE_FORMAT),
            paymentDueDays: 1,
            suffix: 'BBBBBB',
            externalId: 'BBBBBB',
            guestPrivYn: 'BBBBBB',
            emailYn: 'BBBBBB',
            mailYn: 'BBBBBB',
            indexName: 'BBBBBB',
            xlastName: 'BBBBBB',
            xfirstName: 'BBBBBB',
            xcompanyName: 'BBBBBB',
            xtitle: 'BBBBBB',
            xsalutation: 'BBBBBB',
            sxname: 'BBBBBB',
            sxfirstName: 'BBBBBB',
            lastUpdatedResort: 'BBBBBB',
            envelopeGreeting: 'BBBBBB',
            xenvelopeGreeting: 'BBBBBB',
            directBillBatchType: 'BBBBBB',
            resortRegistered: 'BBBBBB',
            taxOffice: 'BBBBBB',
            taxType: 'BBBBBB',
            taxCategory: 'BBBBBB',
            preferredRoomNo: 'BBBBBB',
            phoneYn: 'BBBBBB',
            smsYn: 'BBBBBB',
            isProtected: 'BBBBBB',
            xlanguage: 'BBBBBB',
            marketResearchYn: 'BBBBBB',
            thirdPartyYn: 'BBBBBB',
            autoenrollMemberYn: 'BBBBBB',
            chainCode: 'BBBBBB',
            companyGroupId: 'BBBBBB',
            includeIn1099Yn: 'BBBBBB',
            creditRating: 'BBBBBB',
            titleSuffix: 1,
            inactiveReason: 'BBBBBB',
            iataConsortia: 'BBBBBB',
            psuedoProfileYn: 'BBBBBB',
            profilePrivacyFlg: 'BBBBBB',
            replaceAddress: 'BBBBBB',
            alienRegistrationNo: 'BBBBBB',
            immigrationStatus: 'BBBBBB',
            visaValidityType: 'BBBBBB',
            idDocumentAttachId: 1,
            superSearchIndexText: 'BBBBBB',
            birthDateStr: 'BBBBBB',
            origNameId: 1,
            dOptInMailListFlg: 'BBBBBB',
            dOptInMarketResearchFlg: 'BBBBBB',
            dOptInThirdPartyFlg: 'BBBBBB',
            dOptInAutoenrollMemberFlg: 'BBBBBB',
            dOptInEmailFlg: 'BBBBBB',
            dOptInPhoneFlg: 'BBBBBB',
            dOptInSmsFlg: 'BBBBBB',
            dOptInGuestPrivFlg: 'BBBBBB',
            arCreditLimitYn: 'BBBBBB',
            profileCreditLimit: 1,
            xmiddleName: 'BBBBBB',
            eInvoiceLiableYn: 'BBBBBB',
            eInvLiableLastUpdated: dayjs(currentDate).format(DATE_FORMAT),
            internalBillYn: 'BBBBBB',
            compPreApprovalRequiredYn: 'BBBBBB',
            anonymizationStatus: 'BBBBBB',
            anonymizationDate: dayjs(currentDate).format(DATE_FORMAT),
          },
          elemDefault,
        );
        const expected = Object.assign(
          {
            insertDate: currentDate,
            updateDate: currentDate,
            inactiveDate: currentDate,
            arcUpdateDate: currentDate,
            updateFaxDate: currentDate,
            birthDate: currentDate,
            contractRecvDate: currentDate,
            downloadDate: currentDate,
            uploadDate: currentDate,
            idDate: currentDate,
            udfd01: currentDate,
            udfd02: currentDate,
            udfd03: currentDate,
            udfd04: currentDate,
            udfd05: currentDate,
            udfd06: currentDate,
            udfd07: currentDate,
            udfd08: currentDate,
            udfd09: currentDate,
            udfd10: currentDate,
            udfd11: currentDate,
            udfd12: currentDate,
            udfd13: currentDate,
            udfd14: currentDate,
            udfd15: currentDate,
            udfd16: currentDate,
            udfd17: currentDate,
            udfd18: currentDate,
            udfd19: currentDate,
            udfd20: currentDate,
            eInvLiableLastUpdated: currentDate,
            anonymizationDate: currentDate,
          },
          returnedFromService,
        );
        axiosStub.get.resolves([returnedFromService]);
        return service.retrieve({ sort: {}, page: 0, size: 10 }).then(res => {
          expect(res).toContainEqual(expected);
        });
      });

      it('should not return a list of Name', async () => {
        axiosStub.get.rejects(error);

        return service
          .retrieve()
          .then()
          .catch(err => {
            expect(err).toMatchObject(error);
          });
      });

      it('should delete a Name', async () => {
        axiosStub.delete.resolves({ ok: true });
        return service.delete(123).then(res => {
          expect(res.ok).toBeTruthy();
        });
      });

      it('should not delete a Name', async () => {
        axiosStub.delete.rejects(error);

        return service
          .delete(123)
          .then()
          .catch(err => {
            expect(err).toMatchObject(error);
          });
      });
    });
  });
});
