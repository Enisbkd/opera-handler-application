/* tslint:disable max-line-length */
import axios from 'axios';
import sinon from 'sinon';
import dayjs from 'dayjs';

import ResortService from './resort.service';
import { DATE_TIME_FORMAT } from '@/shared/composables/date-format';
import { Resort } from '@/shared/model/resort.model';

const error = {
  response: {
    status: null,
    data: {
      type: null,
    },
  },
};

const axiosStub = {
  get: sinon.stub(axios, 'get'),
  post: sinon.stub(axios, 'post'),
  put: sinon.stub(axios, 'put'),
  patch: sinon.stub(axios, 'patch'),
  delete: sinon.stub(axios, 'delete'),
};

describe('Service Tests', () => {
  describe('Resort Service', () => {
    let service: ResortService;
    let elemDefault;
    let currentDate: Date;

    beforeEach(() => {
      service = new ResortService();
      currentDate = new Date();
      elemDefault = new Resort(
        'ABC',
        'AAAAAAA',
        currentDate,
        currentDate,
        currentDate,
        currentDate,
        currentDate,
        currentDate,
        currentDate,
        currentDate,
        currentDate,
        currentDate,
        currentDate,
        currentDate,
        currentDate,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
      );
    });

    describe('Service methods', () => {
      it('should find an element', async () => {
        const returnedFromService = Object.assign(
          {
            beginDate: dayjs(currentDate).format(DATE_TIME_FORMAT),
            checkInTime: dayjs(currentDate).format(DATE_TIME_FORMAT),
            checkOutTime: dayjs(currentDate).format(DATE_TIME_FORMAT),
            videoCoStart: dayjs(currentDate).format(DATE_TIME_FORMAT),
            videoCoStop: dayjs(currentDate).format(DATE_TIME_FORMAT),
            insertDate: dayjs(currentDate).format(DATE_TIME_FORMAT),
            updateDate: dayjs(currentDate).format(DATE_TIME_FORMAT),
            expiryDate: dayjs(currentDate).format(DATE_TIME_FORMAT),
            endDate: dayjs(currentDate).format(DATE_TIME_FORMAT),
            fiscalStartDate: dayjs(currentDate).format(DATE_TIME_FORMAT),
            fiscalEndDate: dayjs(currentDate).format(DATE_TIME_FORMAT),
            reconcileDate: dayjs(currentDate).format(DATE_TIME_FORMAT),
            paymentDate: dayjs(currentDate).format(DATE_TIME_FORMAT),
          },
          elemDefault,
        );
        axiosStub.get.resolves({ data: returnedFromService });

        return service.find('ABC').then(res => {
          expect(res).toMatchObject(elemDefault);
        });
      });

      it('should not find an element', async () => {
        axiosStub.get.rejects(error);
        return service
          .find('ABC')
          .then()
          .catch(err => {
            expect(err).toMatchObject(error);
          });
      });

      it('should create a Resort', async () => {
        const returnedFromService = Object.assign(
          {
            id: 'ABC',
            beginDate: dayjs(currentDate).format(DATE_TIME_FORMAT),
            checkInTime: dayjs(currentDate).format(DATE_TIME_FORMAT),
            checkOutTime: dayjs(currentDate).format(DATE_TIME_FORMAT),
            videoCoStart: dayjs(currentDate).format(DATE_TIME_FORMAT),
            videoCoStop: dayjs(currentDate).format(DATE_TIME_FORMAT),
            insertDate: dayjs(currentDate).format(DATE_TIME_FORMAT),
            updateDate: dayjs(currentDate).format(DATE_TIME_FORMAT),
            expiryDate: dayjs(currentDate).format(DATE_TIME_FORMAT),
            endDate: dayjs(currentDate).format(DATE_TIME_FORMAT),
            fiscalStartDate: dayjs(currentDate).format(DATE_TIME_FORMAT),
            fiscalEndDate: dayjs(currentDate).format(DATE_TIME_FORMAT),
            reconcileDate: dayjs(currentDate).format(DATE_TIME_FORMAT),
            paymentDate: dayjs(currentDate).format(DATE_TIME_FORMAT),
          },
          elemDefault,
        );
        const expected = Object.assign(
          {
            beginDate: currentDate,
            checkInTime: currentDate,
            checkOutTime: currentDate,
            videoCoStart: currentDate,
            videoCoStop: currentDate,
            insertDate: currentDate,
            updateDate: currentDate,
            expiryDate: currentDate,
            endDate: currentDate,
            fiscalStartDate: currentDate,
            fiscalEndDate: currentDate,
            reconcileDate: currentDate,
            paymentDate: currentDate,
          },
          returnedFromService,
        );

        axiosStub.post.resolves({ data: returnedFromService });
        return service.create({}).then(res => {
          expect(res).toMatchObject(expected);
        });
      });

      it('should not create a Resort', async () => {
        axiosStub.post.rejects(error);

        return service
          .create({})
          .then()
          .catch(err => {
            expect(err).toMatchObject(error);
          });
      });

      it('should update a Resort', async () => {
        const returnedFromService = Object.assign(
          {
            resort: 'BBBBBB',
            beginDate: dayjs(currentDate).format(DATE_TIME_FORMAT),
            checkInTime: dayjs(currentDate).format(DATE_TIME_FORMAT),
            checkOutTime: dayjs(currentDate).format(DATE_TIME_FORMAT),
            videoCoStart: dayjs(currentDate).format(DATE_TIME_FORMAT),
            videoCoStop: dayjs(currentDate).format(DATE_TIME_FORMAT),
            insertDate: dayjs(currentDate).format(DATE_TIME_FORMAT),
            updateDate: dayjs(currentDate).format(DATE_TIME_FORMAT),
            expiryDate: dayjs(currentDate).format(DATE_TIME_FORMAT),
            endDate: dayjs(currentDate).format(DATE_TIME_FORMAT),
            fiscalStartDate: dayjs(currentDate).format(DATE_TIME_FORMAT),
            fiscalEndDate: dayjs(currentDate).format(DATE_TIME_FORMAT),
            reconcileDate: dayjs(currentDate).format(DATE_TIME_FORMAT),
            paymentDate: dayjs(currentDate).format(DATE_TIME_FORMAT),
            keepAvailability: 1,
            budgetMonth: 1,
            saveProfiles: 1,
            longStayControl: 1,
            creditLimit: 1,
            numberRooms: 1,
            numberFloors: 1,
            numberBeds: 1,
            rhythmSheets: 1,
            rhythmTowels: 1,
            warningAmount: 1,
            decimalPlaces: 1,
            font: 1,
            copies: 1,
            defaultFolioStyle: 1,
            individualRoomWarning: 1,
            groupRoomWarning: 1,
            agingLevel1: 1,
            agingLevel2: 1,
            agingLevel3: 1,
            agingLevel4: 1,
            agingLevel5: 1,
            zeroInvPurDays: 1,
            minDaysBet2ReminderLetter: 1,
            insertUser: 1,
            updateUser: 1,
            currencyDecimals: 1,
            nameIdLink: 1,
            sglRate1: 1,
            sglRate2: 1,
            dblRate1: 1,
            dblRate2: 1,
            tplRate1: 1,
            tplRate2: 1,
            suiRate1: 1,
            suiRate2: 1,
            meetSpace: 1,
            imgHotelId: 1,
            imgDirectionId: 1,
            imgMapId: 1,
            scriptId: 1,
            comNameXrefId: 1,
            pathId: 1,
            xresortNumber: 1,
            maxCreditDays: 1,
            currencyDivisor: 1,
            latitude: 1,
            longitude: 1,
            qtySingleRooms: 1,
            qtyDoubleRooms: 1,
            qtyTwinRooms: 1,
            qtySuites: 1,
            qtyGuestRoomFloors: 1,
            qtyGuestElevators: 1,
            qtyNonSmokingRooms: 1,
            qtyConnectingRooms: 1,
            qtyHandicappedRooms: 1,
            qtyFamilyRooms: 1,
            maxAdultsFamilyRoom: 1,
            maxChildrenFamilyRoom: 1,
            restaurant: 1,
            meetRooms: 1,
            totRooms: 1,
            brSeats: 1,
            meetSeats: 1,
            maxNoNights: 1,
            awardsTimeout: 1,
            guestLookupTimeout: 1,
            wakeUpDelay: 1,
            maxOccupancy: 1,
            inactiveDaysForGuestProfil: 1,
            perReservationRoomLimit: 1,
            licRoomInfo: 'BBBBBB',
            thousandSeparator: 'BBBBBB',
            dateSeparator: 'BBBBBB',
            arAcctNoMandYn: 'BBBBBB',
            exchangePostingType: 'BBBBBB',
            inventoryYn: 'BBBBBB',
            allowLoginYn: 'BBBBBB',
            accessCode: 'BBBBBB',
            disableLoginYn: 'BBBBBB',
            intTaxIncludedYn: 'BBBBBB',
            downloadRestYn: 'BBBBBB',
            translateMulticharYn: 'BBBBBB',
            externalScYn: 'BBBBBB',
            sendLeadAsBookingYn: 'BBBBBB',
            mbsSupportedYn: 'BBBBBB',
            quotedCurrency: 'BBBBBB',
            comMethod: 'BBBBBB',
            email: 'BBBBBB',
            genmgr: 'BBBBBB',
            dirsales: 'BBBBBB',
            leadsend: 'BBBBBB',
            airport: 'BBBBBB',
            comAddress: 'BBBBBB',
            season1: 'BBBBBB',
            season2: 'BBBBBB',
            season3: 'BBBBBB',
            season4: 'BBBBBB',
            season5: 'BBBBBB',
            floorNumExecutiveFloor: 'BBBBBB',
            crsResort: 'BBBBBB',
            postCode: 'BBBBBB',
            defaultReservationType: 'BBBBBB',
            block: 'BBBBBB',
            currencySymbol: 'BBBBBB',
            sourceCommission: 'BBBBBB',
            taCommission: 'BBBBBB',
            baseLanguage: 'BBBBBB',
            folioLanguage1: 'BBBBBB',
            folioLanguage2: 'BBBBBB',
            folioLanguage3: 'BBBBBB',
            folioLanguage4: 'BBBBBB',
            packageProfit: 'BBBBBB',
            packageLoss: 'BBBBBB',
            decimalSeparator: 'BBBBBB',
            shortDateFormat: 'BBBBBB',
            longDateFormat: 'BBBBBB',
            passerbySource: 'BBBBBB',
            passerbyMarket: 'BBBBBB',
            arCompany: 'BBBBBB',
            arAgent: 'BBBBBB',
            arGroups: 'BBBBBB',
            arIndividuals: 'BBBBBB',
            arAcctNoFormat: 'BBBBBB',
            allowancePeriodAdj: 'BBBBBB',
            currencyCode: 'BBBBBB',
            turnawayCode: 'BBBBBB',
            summCurrencyCode: 'BBBBBB',
            defaultPropertyAddress: 'BBBBBB',
            defaultGuestAddress: 'BBBBBB',
            licenseCode: 'BBBBBB',
            timeFormat: 'BBBBBB',
            chainCode: 'BBBBBB',
            resortType: 'BBBBBB',
            hotelType: 'BBBBBB',
            ownership: 'BBBBBB',
            arBalTrxCode: 'BBBBBB',
            arCreditTrxCode: 'BBBBBB',
            arSettleCode: 'BBBBBB',
            cashShiftDrop: 'BBBBBB',
            checkExgPaidout: 'BBBBBB',
            checkShiftDrop: 'BBBBBB',
            checkTrxcode: 'BBBBBB',
            currencyExgPaidout: 'BBBBBB',
            depositLedTrxCode: 'BBBBBB',
            fiscalPeriodType: 'BBBBBB',
            defaultCommissionPercentage: 'BBBBBB',
            defaultPrepaidComm: 'BBBBBB',
            defaultTrxCommCode: 'BBBBBB',
            configurationMode: 'BBBBBB',
            weekendDays: 'BBBBBB',
            defaultGroupsRateCode: 'BBBBBB',
            defaultPostingRoom: 'BBBBBB',
            dfltPkgTranCode: 'BBBBBB',
            dfltTranCodeRateCode: 'BBBBBB',
            defaultRateCode: 'BBBBBB',
            croCode: 'BBBBBB',
            flowCode: 'BBBBBB',
            extPropertyCode: 'BBBBBB',
            opusCurrencyCode: 'BBBBBB',
            destinationId: 'BBBBBB',
            flags: 'BBBBBB',
            touristNumber: 'BBBBBB',
            cateringCurrencyCode: 'BBBBBB',
            defaultRatecodeRack: 'BBBBBB',
            defaultRatecodePcr: 'BBBBBB',
            fnsTier: 'BBBBBB',
            brandCode: 'BBBBBB',
            webaddress: 'BBBBBB',
            vatId: 'BBBBBB',
            street: 'BBBBBB',
            hotelFc: 'BBBBBB',
            meetingFc: 'BBBBBB',
            arTypewriter: 'BBBBBB',
            fileTransferFormat: 'BBBBBB',
            confirmRegcardPrinter: 'BBBBBB',
            directions: 'BBBBBB',
            propinfoUrl: 'BBBBBB',
            roomAmenity: 'BBBBBB',
            shopDescription: 'BBBBBB',
            propPicUrl: 'BBBBBB',
            propMapUrl: 'BBBBBB',
            extExpFileLocation: 'BBBBBB',
            curtainColor: 'BBBBBB',
            countryCode: 'BBBBBB',
            state: 'BBBBBB',
            dateForAging: 'BBBBBB',
            regionCode: 'BBBBBB',
            city: 'BBBBBB',
            telephone: 'BBBBBB',
            fax: 'BBBBBB',
            tollfree: 'BBBBBB',
            defaultPrinter: 'BBBBBB',
            videocheckoutPrinter: 'BBBBBB',
            companyAddressType: 'BBBBBB',
            companyPhoneType: 'BBBBBB',
            defaultFaxType: 'BBBBBB',
            defaultMembershipType: 'BBBBBB',
            individualAddressType: 'BBBBBB',
            individualPhoneType: 'BBBBBB',
            notes: 'BBBBBB',
            blackoutPeriodNotes: 'BBBBBB',
            sglNum: 'BBBBBB',
            dblNum: 'BBBBBB',
            tplNum: 'BBBBBB',
            suiNum: 'BBBBBB',
            airportDistance: 'BBBBBB',
            airportTime: 'BBBBBB',
            brArea: 'BBBBBB',
            name: 'BBBBBB',
            legalOwner: 'BBBBBB',
            hotelId: 'BBBBBB',
            faxNoFormat: 'BBBBBB',
            telephoneNoFormat: 'BBBBBB',
            localCurrencyFormat: 'BBBBBB',
            dutyManagerPager: 'BBBBBB',
            defaultRegistrationCard: 'BBBBBB',
            nightAuditCashierId: 'BBBBBB',
            hotelCode: 'BBBBBB',
            path: 'BBBBBB',
            timezoneRegion: 'BBBBBB',
            cateringCurrencyFormat: 'BBBBBB',
            expHotelCode: 'BBBBBB',
          },
          elemDefault,
        );

        const expected = Object.assign(
          {
            beginDate: currentDate,
            checkInTime: currentDate,
            checkOutTime: currentDate,
            videoCoStart: currentDate,
            videoCoStop: currentDate,
            insertDate: currentDate,
            updateDate: currentDate,
            expiryDate: currentDate,
            endDate: currentDate,
            fiscalStartDate: currentDate,
            fiscalEndDate: currentDate,
            reconcileDate: currentDate,
            paymentDate: currentDate,
          },
          returnedFromService,
        );
        axiosStub.put.resolves({ data: returnedFromService });

        return service.update(expected).then(res => {
          expect(res).toMatchObject(expected);
        });
      });

      it('should not update a Resort', async () => {
        axiosStub.put.rejects(error);

        return service
          .update({})
          .then()
          .catch(err => {
            expect(err).toMatchObject(error);
          });
      });

      it('should partial update a Resort', async () => {
        const patchObject = Object.assign(
          {
            resort: 'BBBBBB',
            checkInTime: dayjs(currentDate).format(DATE_TIME_FORMAT),
            videoCoStop: dayjs(currentDate).format(DATE_TIME_FORMAT),
            updateDate: dayjs(currentDate).format(DATE_TIME_FORMAT),
            reconcileDate: dayjs(currentDate).format(DATE_TIME_FORMAT),
            keepAvailability: 1,
            budgetMonth: 1,
            saveProfiles: 1,
            longStayControl: 1,
            warningAmount: 1,
            decimalPlaces: 1,
            defaultFolioStyle: 1,
            individualRoomWarning: 1,
            groupRoomWarning: 1,
            agingLevel1: 1,
            agingLevel3: 1,
            zeroInvPurDays: 1,
            insertUser: 1,
            currencyDecimals: 1,
            nameIdLink: 1,
            sglRate2: 1,
            tplRate1: 1,
            suiRate2: 1,
            imgDirectionId: 1,
            imgMapId: 1,
            scriptId: 1,
            pathId: 1,
            xresortNumber: 1,
            latitude: 1,
            longitude: 1,
            qtySingleRooms: 1,
            qtyHandicappedRooms: 1,
            qtyFamilyRooms: 1,
            totRooms: 1,
            brSeats: 1,
            meetSeats: 1,
            awardsTimeout: 1,
            guestLookupTimeout: 1,
            wakeUpDelay: 1,
            thousandSeparator: 'BBBBBB',
            dateSeparator: 'BBBBBB',
            inventoryYn: 'BBBBBB',
            allowLoginYn: 'BBBBBB',
            accessCode: 'BBBBBB',
            disableLoginYn: 'BBBBBB',
            translateMulticharYn: 'BBBBBB',
            externalScYn: 'BBBBBB',
            sendLeadAsBookingYn: 'BBBBBB',
            mbsSupportedYn: 'BBBBBB',
            quotedCurrency: 'BBBBBB',
            email: 'BBBBBB',
            leadsend: 'BBBBBB',
            airport: 'BBBBBB',
            comAddress: 'BBBBBB',
            season5: 'BBBBBB',
            floorNumExecutiveFloor: 'BBBBBB',
            crsResort: 'BBBBBB',
            postCode: 'BBBBBB',
            block: 'BBBBBB',
            taCommission: 'BBBBBB',
            baseLanguage: 'BBBBBB',
            folioLanguage1: 'BBBBBB',
            folioLanguage2: 'BBBBBB',
            folioLanguage3: 'BBBBBB',
            folioLanguage4: 'BBBBBB',
            packageLoss: 'BBBBBB',
            shortDateFormat: 'BBBBBB',
            longDateFormat: 'BBBBBB',
            passerbySource: 'BBBBBB',
            arAgent: 'BBBBBB',
            arIndividuals: 'BBBBBB',
            arAcctNoFormat: 'BBBBBB',
            allowancePeriodAdj: 'BBBBBB',
            currencyCode: 'BBBBBB',
            turnawayCode: 'BBBBBB',
            summCurrencyCode: 'BBBBBB',
            defaultGuestAddress: 'BBBBBB',
            resortType: 'BBBBBB',
            ownership: 'BBBBBB',
            arCreditTrxCode: 'BBBBBB',
            cashShiftDrop: 'BBBBBB',
            checkTrxcode: 'BBBBBB',
            fiscalPeriodType: 'BBBBBB',
            defaultPrepaidComm: 'BBBBBB',
            defaultGroupsRateCode: 'BBBBBB',
            dfltPkgTranCode: 'BBBBBB',
            defaultRateCode: 'BBBBBB',
            croCode: 'BBBBBB',
            flowCode: 'BBBBBB',
            extPropertyCode: 'BBBBBB',
            opusCurrencyCode: 'BBBBBB',
            touristNumber: 'BBBBBB',
            cateringCurrencyCode: 'BBBBBB',
            defaultRatecodeRack: 'BBBBBB',
            defaultRatecodePcr: 'BBBBBB',
            fnsTier: 'BBBBBB',
            vatId: 'BBBBBB',
            hotelFc: 'BBBBBB',
            meetingFc: 'BBBBBB',
            fileTransferFormat: 'BBBBBB',
            confirmRegcardPrinter: 'BBBBBB',
            propinfoUrl: 'BBBBBB',
            propPicUrl: 'BBBBBB',
            curtainColor: 'BBBBBB',
            dateForAging: 'BBBBBB',
            regionCode: 'BBBBBB',
            telephone: 'BBBBBB',
            videocheckoutPrinter: 'BBBBBB',
            defaultMembershipType: 'BBBBBB',
            notes: 'BBBBBB',
            blackoutPeriodNotes: 'BBBBBB',
            sglNum: 'BBBBBB',
            dblNum: 'BBBBBB',
            tplNum: 'BBBBBB',
            suiNum: 'BBBBBB',
            airportDistance: 'BBBBBB',
            airportTime: 'BBBBBB',
            brArea: 'BBBBBB',
            name: 'BBBBBB',
            dutyManagerPager: 'BBBBBB',
            defaultRegistrationCard: 'BBBBBB',
            hotelCode: 'BBBBBB',
            expHotelCode: 'BBBBBB',
          },
          new Resort(),
        );
        const returnedFromService = Object.assign(patchObject, elemDefault);

        const expected = Object.assign(
          {
            beginDate: currentDate,
            checkInTime: currentDate,
            checkOutTime: currentDate,
            videoCoStart: currentDate,
            videoCoStop: currentDate,
            insertDate: currentDate,
            updateDate: currentDate,
            expiryDate: currentDate,
            endDate: currentDate,
            fiscalStartDate: currentDate,
            fiscalEndDate: currentDate,
            reconcileDate: currentDate,
            paymentDate: currentDate,
          },
          returnedFromService,
        );
        axiosStub.patch.resolves({ data: returnedFromService });

        return service.partialUpdate(patchObject).then(res => {
          expect(res).toMatchObject(expected);
        });
      });

      it('should not partial update a Resort', async () => {
        axiosStub.patch.rejects(error);

        return service
          .partialUpdate({})
          .then()
          .catch(err => {
            expect(err).toMatchObject(error);
          });
      });

      it('should return a list of Resort', async () => {
        const returnedFromService = Object.assign(
          {
            resort: 'BBBBBB',
            beginDate: dayjs(currentDate).format(DATE_TIME_FORMAT),
            checkInTime: dayjs(currentDate).format(DATE_TIME_FORMAT),
            checkOutTime: dayjs(currentDate).format(DATE_TIME_FORMAT),
            videoCoStart: dayjs(currentDate).format(DATE_TIME_FORMAT),
            videoCoStop: dayjs(currentDate).format(DATE_TIME_FORMAT),
            insertDate: dayjs(currentDate).format(DATE_TIME_FORMAT),
            updateDate: dayjs(currentDate).format(DATE_TIME_FORMAT),
            expiryDate: dayjs(currentDate).format(DATE_TIME_FORMAT),
            endDate: dayjs(currentDate).format(DATE_TIME_FORMAT),
            fiscalStartDate: dayjs(currentDate).format(DATE_TIME_FORMAT),
            fiscalEndDate: dayjs(currentDate).format(DATE_TIME_FORMAT),
            reconcileDate: dayjs(currentDate).format(DATE_TIME_FORMAT),
            paymentDate: dayjs(currentDate).format(DATE_TIME_FORMAT),
            keepAvailability: 1,
            budgetMonth: 1,
            saveProfiles: 1,
            longStayControl: 1,
            creditLimit: 1,
            numberRooms: 1,
            numberFloors: 1,
            numberBeds: 1,
            rhythmSheets: 1,
            rhythmTowels: 1,
            warningAmount: 1,
            decimalPlaces: 1,
            font: 1,
            copies: 1,
            defaultFolioStyle: 1,
            individualRoomWarning: 1,
            groupRoomWarning: 1,
            agingLevel1: 1,
            agingLevel2: 1,
            agingLevel3: 1,
            agingLevel4: 1,
            agingLevel5: 1,
            zeroInvPurDays: 1,
            minDaysBet2ReminderLetter: 1,
            insertUser: 1,
            updateUser: 1,
            currencyDecimals: 1,
            nameIdLink: 1,
            sglRate1: 1,
            sglRate2: 1,
            dblRate1: 1,
            dblRate2: 1,
            tplRate1: 1,
            tplRate2: 1,
            suiRate1: 1,
            suiRate2: 1,
            meetSpace: 1,
            imgHotelId: 1,
            imgDirectionId: 1,
            imgMapId: 1,
            scriptId: 1,
            comNameXrefId: 1,
            pathId: 1,
            xresortNumber: 1,
            maxCreditDays: 1,
            currencyDivisor: 1,
            latitude: 1,
            longitude: 1,
            qtySingleRooms: 1,
            qtyDoubleRooms: 1,
            qtyTwinRooms: 1,
            qtySuites: 1,
            qtyGuestRoomFloors: 1,
            qtyGuestElevators: 1,
            qtyNonSmokingRooms: 1,
            qtyConnectingRooms: 1,
            qtyHandicappedRooms: 1,
            qtyFamilyRooms: 1,
            maxAdultsFamilyRoom: 1,
            maxChildrenFamilyRoom: 1,
            restaurant: 1,
            meetRooms: 1,
            totRooms: 1,
            brSeats: 1,
            meetSeats: 1,
            maxNoNights: 1,
            awardsTimeout: 1,
            guestLookupTimeout: 1,
            wakeUpDelay: 1,
            maxOccupancy: 1,
            inactiveDaysForGuestProfil: 1,
            perReservationRoomLimit: 1,
            licRoomInfo: 'BBBBBB',
            thousandSeparator: 'BBBBBB',
            dateSeparator: 'BBBBBB',
            arAcctNoMandYn: 'BBBBBB',
            exchangePostingType: 'BBBBBB',
            inventoryYn: 'BBBBBB',
            allowLoginYn: 'BBBBBB',
            accessCode: 'BBBBBB',
            disableLoginYn: 'BBBBBB',
            intTaxIncludedYn: 'BBBBBB',
            downloadRestYn: 'BBBBBB',
            translateMulticharYn: 'BBBBBB',
            externalScYn: 'BBBBBB',
            sendLeadAsBookingYn: 'BBBBBB',
            mbsSupportedYn: 'BBBBBB',
            quotedCurrency: 'BBBBBB',
            comMethod: 'BBBBBB',
            email: 'BBBBBB',
            genmgr: 'BBBBBB',
            dirsales: 'BBBBBB',
            leadsend: 'BBBBBB',
            airport: 'BBBBBB',
            comAddress: 'BBBBBB',
            season1: 'BBBBBB',
            season2: 'BBBBBB',
            season3: 'BBBBBB',
            season4: 'BBBBBB',
            season5: 'BBBBBB',
            floorNumExecutiveFloor: 'BBBBBB',
            crsResort: 'BBBBBB',
            postCode: 'BBBBBB',
            defaultReservationType: 'BBBBBB',
            block: 'BBBBBB',
            currencySymbol: 'BBBBBB',
            sourceCommission: 'BBBBBB',
            taCommission: 'BBBBBB',
            baseLanguage: 'BBBBBB',
            folioLanguage1: 'BBBBBB',
            folioLanguage2: 'BBBBBB',
            folioLanguage3: 'BBBBBB',
            folioLanguage4: 'BBBBBB',
            packageProfit: 'BBBBBB',
            packageLoss: 'BBBBBB',
            decimalSeparator: 'BBBBBB',
            shortDateFormat: 'BBBBBB',
            longDateFormat: 'BBBBBB',
            passerbySource: 'BBBBBB',
            passerbyMarket: 'BBBBBB',
            arCompany: 'BBBBBB',
            arAgent: 'BBBBBB',
            arGroups: 'BBBBBB',
            arIndividuals: 'BBBBBB',
            arAcctNoFormat: 'BBBBBB',
            allowancePeriodAdj: 'BBBBBB',
            currencyCode: 'BBBBBB',
            turnawayCode: 'BBBBBB',
            summCurrencyCode: 'BBBBBB',
            defaultPropertyAddress: 'BBBBBB',
            defaultGuestAddress: 'BBBBBB',
            licenseCode: 'BBBBBB',
            timeFormat: 'BBBBBB',
            chainCode: 'BBBBBB',
            resortType: 'BBBBBB',
            hotelType: 'BBBBBB',
            ownership: 'BBBBBB',
            arBalTrxCode: 'BBBBBB',
            arCreditTrxCode: 'BBBBBB',
            arSettleCode: 'BBBBBB',
            cashShiftDrop: 'BBBBBB',
            checkExgPaidout: 'BBBBBB',
            checkShiftDrop: 'BBBBBB',
            checkTrxcode: 'BBBBBB',
            currencyExgPaidout: 'BBBBBB',
            depositLedTrxCode: 'BBBBBB',
            fiscalPeriodType: 'BBBBBB',
            defaultCommissionPercentage: 'BBBBBB',
            defaultPrepaidComm: 'BBBBBB',
            defaultTrxCommCode: 'BBBBBB',
            configurationMode: 'BBBBBB',
            weekendDays: 'BBBBBB',
            defaultGroupsRateCode: 'BBBBBB',
            defaultPostingRoom: 'BBBBBB',
            dfltPkgTranCode: 'BBBBBB',
            dfltTranCodeRateCode: 'BBBBBB',
            defaultRateCode: 'BBBBBB',
            croCode: 'BBBBBB',
            flowCode: 'BBBBBB',
            extPropertyCode: 'BBBBBB',
            opusCurrencyCode: 'BBBBBB',
            destinationId: 'BBBBBB',
            flags: 'BBBBBB',
            touristNumber: 'BBBBBB',
            cateringCurrencyCode: 'BBBBBB',
            defaultRatecodeRack: 'BBBBBB',
            defaultRatecodePcr: 'BBBBBB',
            fnsTier: 'BBBBBB',
            brandCode: 'BBBBBB',
            webaddress: 'BBBBBB',
            vatId: 'BBBBBB',
            street: 'BBBBBB',
            hotelFc: 'BBBBBB',
            meetingFc: 'BBBBBB',
            arTypewriter: 'BBBBBB',
            fileTransferFormat: 'BBBBBB',
            confirmRegcardPrinter: 'BBBBBB',
            directions: 'BBBBBB',
            propinfoUrl: 'BBBBBB',
            roomAmenity: 'BBBBBB',
            shopDescription: 'BBBBBB',
            propPicUrl: 'BBBBBB',
            propMapUrl: 'BBBBBB',
            extExpFileLocation: 'BBBBBB',
            curtainColor: 'BBBBBB',
            countryCode: 'BBBBBB',
            state: 'BBBBBB',
            dateForAging: 'BBBBBB',
            regionCode: 'BBBBBB',
            city: 'BBBBBB',
            telephone: 'BBBBBB',
            fax: 'BBBBBB',
            tollfree: 'BBBBBB',
            defaultPrinter: 'BBBBBB',
            videocheckoutPrinter: 'BBBBBB',
            companyAddressType: 'BBBBBB',
            companyPhoneType: 'BBBBBB',
            defaultFaxType: 'BBBBBB',
            defaultMembershipType: 'BBBBBB',
            individualAddressType: 'BBBBBB',
            individualPhoneType: 'BBBBBB',
            notes: 'BBBBBB',
            blackoutPeriodNotes: 'BBBBBB',
            sglNum: 'BBBBBB',
            dblNum: 'BBBBBB',
            tplNum: 'BBBBBB',
            suiNum: 'BBBBBB',
            airportDistance: 'BBBBBB',
            airportTime: 'BBBBBB',
            brArea: 'BBBBBB',
            name: 'BBBBBB',
            legalOwner: 'BBBBBB',
            hotelId: 'BBBBBB',
            faxNoFormat: 'BBBBBB',
            telephoneNoFormat: 'BBBBBB',
            localCurrencyFormat: 'BBBBBB',
            dutyManagerPager: 'BBBBBB',
            defaultRegistrationCard: 'BBBBBB',
            nightAuditCashierId: 'BBBBBB',
            hotelCode: 'BBBBBB',
            path: 'BBBBBB',
            timezoneRegion: 'BBBBBB',
            cateringCurrencyFormat: 'BBBBBB',
            expHotelCode: 'BBBBBB',
          },
          elemDefault,
        );
        const expected = Object.assign(
          {
            beginDate: currentDate,
            checkInTime: currentDate,
            checkOutTime: currentDate,
            videoCoStart: currentDate,
            videoCoStop: currentDate,
            insertDate: currentDate,
            updateDate: currentDate,
            expiryDate: currentDate,
            endDate: currentDate,
            fiscalStartDate: currentDate,
            fiscalEndDate: currentDate,
            reconcileDate: currentDate,
            paymentDate: currentDate,
          },
          returnedFromService,
        );
        axiosStub.get.resolves([returnedFromService]);
        return service.retrieve({ sort: {}, page: 0, size: 10 }).then(res => {
          expect(res).toContainEqual(expected);
        });
      });

      it('should not return a list of Resort', async () => {
        axiosStub.get.rejects(error);

        return service
          .retrieve()
          .then()
          .catch(err => {
            expect(err).toMatchObject(error);
          });
      });

      it('should delete a Resort', async () => {
        axiosStub.delete.resolves({ ok: true });
        return service.delete('ABC').then(res => {
          expect(res.ok).toBeTruthy();
        });
      });

      it('should not delete a Resort', async () => {
        axiosStub.delete.rejects(error);

        return service
          .delete('ABC')
          .then()
          .catch(err => {
            expect(err).toMatchObject(error);
          });
      });
    });
  });
});
