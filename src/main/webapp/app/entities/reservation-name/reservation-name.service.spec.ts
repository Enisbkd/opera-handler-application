/* tslint:disable max-line-length */
import axios from 'axios';
import sinon from 'sinon';
import dayjs from 'dayjs';

import ReservationNameService from './reservation-name.service';
import { DATE_FORMAT } from '@/shared/composables/date-format';
import { ReservationName } from '@/shared/model/reservation-name.model';

const error = {
  response: {
    status: null,
    data: {
      type: null,
    },
  },
};

const axiosStub = {
  get: sinon.stub(axios, 'get'),
  post: sinon.stub(axios, 'post'),
  put: sinon.stub(axios, 'put'),
  patch: sinon.stub(axios, 'patch'),
  delete: sinon.stub(axios, 'delete'),
};

describe('Service Tests', () => {
  describe('ReservationName Service', () => {
    let service: ReservationNameService;
    let elemDefault;
    let currentDate: Date;

    beforeEach(() => {
      service = new ReservationNameService();
      currentDate = new Date();
      elemDefault = new ReservationName(
        123,
        'AAAAAAA',
        0,
        0,
        'AAAAAAA',
        0,
        currentDate,
        0,
        0,
        currentDate,
        'AAAAAAA',
        'AAAAAAA',
        0,
        0,
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        0,
        'AAAAAAA',
        currentDate,
        currentDate,
        0,
        0,
        'AAAAAAA',
        'AAAAAAA',
        0,
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        currentDate,
        currentDate,
        currentDate,
        currentDate,
        0,
        0,
        0,
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        currentDate,
        currentDate,
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        currentDate,
        currentDate,
        'AAAAAAA',
        'AAAAAAA',
        currentDate,
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        currentDate,
        0,
        0,
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        0,
        0,
        'AAAAAAA',
        0,
        'AAAAAAA',
        currentDate,
        currentDate,
        'AAAAAAA',
        0,
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        currentDate,
        currentDate,
        currentDate,
        currentDate,
        currentDate,
        currentDate,
        currentDate,
        currentDate,
        currentDate,
        currentDate,
        0,
        0,
        currentDate,
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        0,
        'AAAAAAA',
        0,
        'AAAAAAA',
        0,
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        0,
        'AAAAAAA',
        0,
        0,
        0,
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        currentDate,
        currentDate,
        currentDate,
        currentDate,
        0,
        0,
        'AAAAAAA',
        'AAAAAAA',
        0,
        0,
        0,
        'AAAAAAA',
        currentDate,
        'AAAAAAA',
        0,
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        0,
        currentDate,
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        currentDate,
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        0,
        'AAAAAAA',
        0,
        0,
        'AAAAAAA',
        currentDate,
        'AAAAAAA',
        0,
        'AAAAAAA',
        currentDate,
        currentDate,
        0,
        'AAAAAAA',
        0,
        'AAAAAAA',
        0,
        'AAAAAAA',
        currentDate,
        currentDate,
        0,
        0,
        'AAAAAAA',
        'AAAAAAA',
        0,
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        0,
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        currentDate,
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        currentDate,
        'AAAAAAA',
        'AAAAAAA',
        0,
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
        currentDate,
        'AAAAAAA',
        'AAAAAAA',
        'AAAAAAA',
      );
    });

    describe('Service methods', () => {
      it('should find an element', async () => {
        const returnedFromService = Object.assign(
          {
            insertDate: dayjs(currentDate).format(DATE_FORMAT),
            updateDate: dayjs(currentDate).format(DATE_FORMAT),
            beginDate: dayjs(currentDate).format(DATE_FORMAT),
            endDate: dayjs(currentDate).format(DATE_FORMAT),
            actualCheckInDate: dayjs(currentDate).format(DATE_FORMAT),
            truncActualCheckInDate: dayjs(currentDate).format(DATE_FORMAT),
            actualCheckOutDate: dayjs(currentDate).format(DATE_FORMAT),
            truncActualCheckOutDate: dayjs(currentDate).format(DATE_FORMAT),
            arrivalDateTime: dayjs(currentDate).format(DATE_FORMAT),
            arrivalEstimateTime: dayjs(currentDate).format(DATE_FORMAT),
            departureDateTime: dayjs(currentDate).format(DATE_FORMAT),
            departureEstimateTime: dayjs(currentDate).format(DATE_FORMAT),
            cancellationDate: dayjs(currentDate).format(DATE_FORMAT),
            originalEndDate: dayjs(currentDate).format(DATE_FORMAT),
            truncBeginDate: dayjs(currentDate).format(DATE_FORMAT),
            truncEndDate: dayjs(currentDate).format(DATE_FORMAT),
            udfd01: dayjs(currentDate).format(DATE_FORMAT),
            udfd02: dayjs(currentDate).format(DATE_FORMAT),
            udfd03: dayjs(currentDate).format(DATE_FORMAT),
            udfd04: dayjs(currentDate).format(DATE_FORMAT),
            udfd05: dayjs(currentDate).format(DATE_FORMAT),
            udfd06: dayjs(currentDate).format(DATE_FORMAT),
            udfd07: dayjs(currentDate).format(DATE_FORMAT),
            udfd08: dayjs(currentDate).format(DATE_FORMAT),
            udfd09: dayjs(currentDate).format(DATE_FORMAT),
            udfd10: dayjs(currentDate).format(DATE_FORMAT),
            businessDateCreated: dayjs(currentDate).format(DATE_FORMAT),
            reinstateDate: dayjs(currentDate).format(DATE_FORMAT),
            purgeDate: dayjs(currentDate).format(DATE_FORMAT),
            lastSettleDate: dayjs(currentDate).format(DATE_FORMAT),
            lastPeriodicFolioDate: dayjs(currentDate).format(DATE_FORMAT),
            entryDate: dayjs(currentDate).format(DATE_FORMAT),
            originalBeginDate: dayjs(currentDate).format(DATE_FORMAT),
            folioCloseDate: dayjs(currentDate).format(DATE_FORMAT),
            keyValidUntil: dayjs(currentDate).format(DATE_FORMAT),
            visaIssueDate: dayjs(currentDate).format(DATE_FORMAT),
            visaExpirationDate: dayjs(currentDate).format(DATE_FORMAT),
            dateOfArrivalInCountry: dayjs(currentDate).format(DATE_FORMAT),
            preArrReviewedDt: dayjs(currentDate).format(DATE_FORMAT),
            beginSystemDateTime: dayjs(currentDate).format(DATE_FORMAT),
            mobileActionAlertIssued: dayjs(currentDate).format(DATE_FORMAT),
            expectedTimeOfReturn: dayjs(currentDate).format(DATE_FORMAT),
          },
          elemDefault,
        );
        axiosStub.get.resolves({ data: returnedFromService });

        return service.find(123).then(res => {
          expect(res).toMatchObject(elemDefault);
        });
      });

      it('should not find an element', async () => {
        axiosStub.get.rejects(error);
        return service
          .find(123)
          .then()
          .catch(err => {
            expect(err).toMatchObject(error);
          });
      });

      it('should create a ReservationName', async () => {
        const returnedFromService = Object.assign(
          {
            id: 123,
            insertDate: dayjs(currentDate).format(DATE_FORMAT),
            updateDate: dayjs(currentDate).format(DATE_FORMAT),
            beginDate: dayjs(currentDate).format(DATE_FORMAT),
            endDate: dayjs(currentDate).format(DATE_FORMAT),
            actualCheckInDate: dayjs(currentDate).format(DATE_FORMAT),
            truncActualCheckInDate: dayjs(currentDate).format(DATE_FORMAT),
            actualCheckOutDate: dayjs(currentDate).format(DATE_FORMAT),
            truncActualCheckOutDate: dayjs(currentDate).format(DATE_FORMAT),
            arrivalDateTime: dayjs(currentDate).format(DATE_FORMAT),
            arrivalEstimateTime: dayjs(currentDate).format(DATE_FORMAT),
            departureDateTime: dayjs(currentDate).format(DATE_FORMAT),
            departureEstimateTime: dayjs(currentDate).format(DATE_FORMAT),
            cancellationDate: dayjs(currentDate).format(DATE_FORMAT),
            originalEndDate: dayjs(currentDate).format(DATE_FORMAT),
            truncBeginDate: dayjs(currentDate).format(DATE_FORMAT),
            truncEndDate: dayjs(currentDate).format(DATE_FORMAT),
            udfd01: dayjs(currentDate).format(DATE_FORMAT),
            udfd02: dayjs(currentDate).format(DATE_FORMAT),
            udfd03: dayjs(currentDate).format(DATE_FORMAT),
            udfd04: dayjs(currentDate).format(DATE_FORMAT),
            udfd05: dayjs(currentDate).format(DATE_FORMAT),
            udfd06: dayjs(currentDate).format(DATE_FORMAT),
            udfd07: dayjs(currentDate).format(DATE_FORMAT),
            udfd08: dayjs(currentDate).format(DATE_FORMAT),
            udfd09: dayjs(currentDate).format(DATE_FORMAT),
            udfd10: dayjs(currentDate).format(DATE_FORMAT),
            businessDateCreated: dayjs(currentDate).format(DATE_FORMAT),
            reinstateDate: dayjs(currentDate).format(DATE_FORMAT),
            purgeDate: dayjs(currentDate).format(DATE_FORMAT),
            lastSettleDate: dayjs(currentDate).format(DATE_FORMAT),
            lastPeriodicFolioDate: dayjs(currentDate).format(DATE_FORMAT),
            entryDate: dayjs(currentDate).format(DATE_FORMAT),
            originalBeginDate: dayjs(currentDate).format(DATE_FORMAT),
            folioCloseDate: dayjs(currentDate).format(DATE_FORMAT),
            keyValidUntil: dayjs(currentDate).format(DATE_FORMAT),
            visaIssueDate: dayjs(currentDate).format(DATE_FORMAT),
            visaExpirationDate: dayjs(currentDate).format(DATE_FORMAT),
            dateOfArrivalInCountry: dayjs(currentDate).format(DATE_FORMAT),
            preArrReviewedDt: dayjs(currentDate).format(DATE_FORMAT),
            beginSystemDateTime: dayjs(currentDate).format(DATE_FORMAT),
            mobileActionAlertIssued: dayjs(currentDate).format(DATE_FORMAT),
            expectedTimeOfReturn: dayjs(currentDate).format(DATE_FORMAT),
          },
          elemDefault,
        );
        const expected = Object.assign(
          {
            insertDate: currentDate,
            updateDate: currentDate,
            beginDate: currentDate,
            endDate: currentDate,
            actualCheckInDate: currentDate,
            truncActualCheckInDate: currentDate,
            actualCheckOutDate: currentDate,
            truncActualCheckOutDate: currentDate,
            arrivalDateTime: currentDate,
            arrivalEstimateTime: currentDate,
            departureDateTime: currentDate,
            departureEstimateTime: currentDate,
            cancellationDate: currentDate,
            originalEndDate: currentDate,
            truncBeginDate: currentDate,
            truncEndDate: currentDate,
            udfd01: currentDate,
            udfd02: currentDate,
            udfd03: currentDate,
            udfd04: currentDate,
            udfd05: currentDate,
            udfd06: currentDate,
            udfd07: currentDate,
            udfd08: currentDate,
            udfd09: currentDate,
            udfd10: currentDate,
            businessDateCreated: currentDate,
            reinstateDate: currentDate,
            purgeDate: currentDate,
            lastSettleDate: currentDate,
            lastPeriodicFolioDate: currentDate,
            entryDate: currentDate,
            originalBeginDate: currentDate,
            folioCloseDate: currentDate,
            keyValidUntil: currentDate,
            visaIssueDate: currentDate,
            visaExpirationDate: currentDate,
            dateOfArrivalInCountry: currentDate,
            preArrReviewedDt: currentDate,
            beginSystemDateTime: currentDate,
            mobileActionAlertIssued: currentDate,
            expectedTimeOfReturn: currentDate,
          },
          returnedFromService,
        );

        axiosStub.post.resolves({ data: returnedFromService });
        return service.create({}).then(res => {
          expect(res).toMatchObject(expected);
        });
      });

      it('should not create a ReservationName', async () => {
        axiosStub.post.rejects(error);

        return service
          .create({})
          .then()
          .catch(err => {
            expect(err).toMatchObject(error);
          });
      });

      it('should update a ReservationName', async () => {
        const returnedFromService = Object.assign(
          {
            resort: 'BBBBBB',
            resvNameId: 1,
            nameId: 1,
            nameUsageType: 'BBBBBB',
            contactNameId: 1,
            insertDate: dayjs(currentDate).format(DATE_FORMAT),
            insertUser: 1,
            updateUser: 1,
            updateDate: dayjs(currentDate).format(DATE_FORMAT),
            resvStatus: 'BBBBBB',
            commissionCode: 'BBBBBB',
            addressId: 1,
            phoneId: 1,
            faxYn: 'BBBBBB',
            mailYn: 'BBBBBB',
            printRateYn: 'BBBBBB',
            reportId: 'BBBBBB',
            resvNo: 1,
            confirmationNo: 'BBBBBB',
            beginDate: dayjs(currentDate).format(DATE_FORMAT),
            endDate: dayjs(currentDate).format(DATE_FORMAT),
            faxId: 1,
            emailId: 1,
            emailYn: 'BBBBBB',
            consumerYn: 'BBBBBB',
            creditCardId: 1,
            financiallyResponsibleYn: 'BBBBBB',
            paymentMethod: 'BBBBBB',
            intermediaryYn: 'BBBBBB',
            postingAllowedYn: 'BBBBBB',
            displayColor: 'BBBBBB',
            actualCheckInDate: dayjs(currentDate).format(DATE_FORMAT),
            truncActualCheckInDate: dayjs(currentDate).format(DATE_FORMAT),
            actualCheckOutDate: dayjs(currentDate).format(DATE_FORMAT),
            truncActualCheckOutDate: dayjs(currentDate).format(DATE_FORMAT),
            creditLimit: 1,
            authorizedBy: 1,
            parentResvNameId: 1,
            cancellationNo: 'BBBBBB',
            cancellationReasonCode: 'BBBBBB',
            cancellationReasonDesc: 'BBBBBB',
            arrivalTransportType: 'BBBBBB',
            arrivalStationCode: 'BBBBBB',
            arrivalCarrierCode: 'BBBBBB',
            arrivalTransportCode: 'BBBBBB',
            arrivalDateTime: dayjs(currentDate).format(DATE_FORMAT),
            arrivalEstimateTime: dayjs(currentDate).format(DATE_FORMAT),
            arrivalTranportationYn: 'BBBBBB',
            arrivalComments: 'BBBBBB',
            departureTransportType: 'BBBBBB',
            departureStationCode: 'BBBBBB',
            departureCarrierCode: 'BBBBBB',
            departureTransportCode: 'BBBBBB',
            departureDateTime: dayjs(currentDate).format(DATE_FORMAT),
            departureEstimateTime: dayjs(currentDate).format(DATE_FORMAT),
            departureTransportationYn: 'BBBBBB',
            departureComments: 'BBBBBB',
            cancellationDate: dayjs(currentDate).format(DATE_FORMAT),
            guaranteeCode: 'BBBBBB',
            wlReasonDescription: 'BBBBBB',
            wlReasonCode: 'BBBBBB',
            wlPriority: 'BBBBBB',
            doNotMoveRoom: 'BBBBBB',
            externalReference: 'BBBBBB',
            partyCode: 'BBBBBB',
            walkinYn: 'BBBBBB',
            originalEndDate: dayjs(currentDate).format(DATE_FORMAT),
            approvalAmountCalcMethod: 1,
            amountPercent: 1,
            nameTaxType: 'BBBBBB',
            taxExemptNo: 'BBBBBB',
            roomFeatures: 'BBBBBB',
            wlTelephoneNo: 'BBBBBB',
            videoCheckoutYn: 'BBBBBB',
            discountAmt: 1,
            discountPrcnt: 1,
            discountReasonCode: 'BBBBBB',
            commissionPaid: 1,
            commissionHoldCode: 'BBBBBB',
            truncBeginDate: dayjs(currentDate).format(DATE_FORMAT),
            truncEndDate: dayjs(currentDate).format(DATE_FORMAT),
            sguestName: 'BBBBBB',
            membershipId: 1,
            udfc01: 'BBBBBB',
            udfc02: 'BBBBBB',
            udfc03: 'BBBBBB',
            udfc04: 'BBBBBB',
            udfc05: 'BBBBBB',
            udfc06: 'BBBBBB',
            udfc07: 'BBBBBB',
            udfc08: 'BBBBBB',
            udfc09: 'BBBBBB',
            udfc10: 'BBBBBB',
            udfc11: 'BBBBBB',
            udfc12: 'BBBBBB',
            udfc13: 'BBBBBB',
            udfc14: 'BBBBBB',
            udfc15: 'BBBBBB',
            udfc16: 'BBBBBB',
            udfc17: 'BBBBBB',
            udfc18: 'BBBBBB',
            udfc19: 'BBBBBB',
            udfc20: 'BBBBBB',
            udfc21: 'BBBBBB',
            udfc22: 'BBBBBB',
            udfc23: 'BBBBBB',
            udfc24: 'BBBBBB',
            udfc25: 'BBBBBB',
            udfc26: 'BBBBBB',
            udfc27: 'BBBBBB',
            udfc28: 'BBBBBB',
            udfc29: 'BBBBBB',
            udfc30: 'BBBBBB',
            udfc31: 'BBBBBB',
            udfc32: 'BBBBBB',
            udfc33: 'BBBBBB',
            udfc34: 'BBBBBB',
            udfc35: 'BBBBBB',
            udfc36: 'BBBBBB',
            udfc37: 'BBBBBB',
            udfc38: 'BBBBBB',
            udfc39: 'BBBBBB',
            udfc40: 'BBBBBB',
            udfn01: 1,
            udfn02: 1,
            udfn03: 1,
            udfn04: 1,
            udfn05: 1,
            udfn06: 1,
            udfn07: 1,
            udfn08: 1,
            udfn09: 1,
            udfn10: 1,
            udfn11: 1,
            udfn12: 1,
            udfn13: 1,
            udfn14: 1,
            udfn15: 1,
            udfn16: 1,
            udfn17: 1,
            udfn18: 1,
            udfn19: 1,
            udfn20: 1,
            udfn21: 1,
            udfn22: 1,
            udfn23: 1,
            udfn24: 1,
            udfn25: 1,
            udfn26: 1,
            udfn27: 1,
            udfn28: 1,
            udfn29: 1,
            udfn30: 1,
            udfn31: 1,
            udfn32: 1,
            udfn33: 1,
            udfn34: 1,
            udfn35: 1,
            udfn36: 1,
            udfn37: 1,
            udfn38: 1,
            udfn39: 1,
            udfn40: 1,
            udfd01: dayjs(currentDate).format(DATE_FORMAT),
            udfd02: dayjs(currentDate).format(DATE_FORMAT),
            udfd03: dayjs(currentDate).format(DATE_FORMAT),
            udfd04: dayjs(currentDate).format(DATE_FORMAT),
            udfd05: dayjs(currentDate).format(DATE_FORMAT),
            udfd06: dayjs(currentDate).format(DATE_FORMAT),
            udfd07: dayjs(currentDate).format(DATE_FORMAT),
            udfd08: dayjs(currentDate).format(DATE_FORMAT),
            udfd09: dayjs(currentDate).format(DATE_FORMAT),
            udfd10: dayjs(currentDate).format(DATE_FORMAT),
            insertActionInstanceId: 1,
            dmlSeqNo: 1,
            businessDateCreated: dayjs(currentDate).format(DATE_FORMAT),
            turndownYn: 'BBBBBB',
            roomInstructions: 'BBBBBB',
            roomServiceTime: 'BBBBBB',
            eventId: 1,
            revenueTypeCode: 'BBBBBB',
            hurdle: 1,
            hurdleOverride: 'BBBBBB',
            rateableValue: 1,
            restrictionOverride: 'BBBBBB',
            yieldableYn: 'BBBBBB',
            sguestFirstname: 'BBBBBB',
            guestLastName: 'BBBBBB',
            guestFirstName: 'BBBBBB',
            guestLastNameSdx: 'BBBBBB',
            guestFirstNameSdx: 'BBBBBB',
            channel: 'BBBBBB',
            shareSeqNo: 1,
            guestSignature: 'BBBBBB',
            extensionId: 1,
            resvContactId: 1,
            billingContactId: 1,
            resInsertSource: 'BBBBBB',
            resInsertSourceType: 'BBBBBB',
            masterShare: 'BBBBBB',
            registrationCardNo: 'BBBBBB',
            tiad: 'BBBBBB',
            purposeOfStay: 'BBBBBB',
            reinstateDate: dayjs(currentDate).format(DATE_FORMAT),
            purgeDate: dayjs(currentDate).format(DATE_FORMAT),
            lastSettleDate: dayjs(currentDate).format(DATE_FORMAT),
            lastPeriodicFolioDate: dayjs(currentDate).format(DATE_FORMAT),
            periodicFolioFreq: 1,
            confirmationLegNo: 1,
            guestStatus: 'BBBBBB',
            guestType: 'BBBBBB',
            checkinDuration: 1,
            authorizerId: 1,
            lastOnlinePrintSeq: 1,
            entryPoint: 'BBBBBB',
            entryDate: dayjs(currentDate).format(DATE_FORMAT),
            pseudoMemType: 'BBBBBB',
            pseudoMemTotalPoints: 1,
            folioText1: 'BBBBBB',
            folioText2: 'BBBBBB',
            compTypeCode: 'BBBBBB',
            uniCardId: 'BBBBBB',
            expCheckinresId: 1,
            originalBeginDate: dayjs(currentDate).format(DATE_FORMAT),
            ownerFfFlag: 'BBBBBB',
            commissionPayoutTo: 'BBBBBB',
            preChargingYn: 'BBBBBB',
            postChargingYn: 'BBBBBB',
            postCoFlag: 'BBBBBB',
            folioCloseDate: dayjs(currentDate).format(DATE_FORMAT),
            scheduleCheckoutYn: 'BBBBBB',
            customReference: 'BBBBBB',
            guaranteeCodePreCi: 'BBBBBB',
            awardMembershipId: 1,
            esignedRegCardName: 'BBBBBB',
            statisticalRoomType: 1,
            statisticalRateTier: 1,
            ymCode: 'BBBBBB',
            keyValidUntil: dayjs(currentDate).format(DATE_FORMAT),
            preRegisteredYn: 'BBBBBB',
            taxRegistrationNo: 1,
            visaNumber: 'BBBBBB',
            visaIssueDate: dayjs(currentDate).format(DATE_FORMAT),
            visaExpirationDate: dayjs(currentDate).format(DATE_FORMAT),
            taxNoOfStays: 1,
            asbProratedYn: 'BBBBBB',
            autoSettleDays: 1,
            autoSettleYn: 'BBBBBB',
            splitFromResvNameId: 1,
            nextDestination: 'BBBBBB',
            dateOfArrivalInCountry: dayjs(currentDate).format(DATE_FORMAT),
            preArrReviewedDt: dayjs(currentDate).format(DATE_FORMAT),
            preArrReviewedUser: 1,
            bonusCheckId: 1,
            mobileAudioKeyYn: 'BBBBBB',
            directBillVerifyResponse: 'BBBBBB',
            addresseeNameId: 1,
            superSearchIndexText: 'BBBBBB',
            autoCheckinYn: 'BBBBBB',
            emailFolioYn: 'BBBBBB',
            emailAddress: 'BBBBBB',
            spgUpgradeConfirmedRoomtype: 'BBBBBB',
            spgUpgradeReasonCode: 'BBBBBB',
            spgSuiteNightAwardStatus: 'BBBBBB',
            spgDiscloseRoomTypeYn: 'BBBBBB',
            amenityEligibleYn: 'BBBBBB',
            amenityLevelCode: 'BBBBBB',
            baseRateCurrencyCode: 'BBBBBB',
            baseRateCode: 'BBBBBB',
            localBaseRateAmount: 1,
            phoneDisplayNameYn: 'BBBBBB',
            resortChargeNumber: 'BBBBBB',
            mobileChkoutAllowed: 'BBBBBB',
            mobileViewFolioAllowed: 'BBBBBB',
            hkExpectedServiceTime: 'BBBBBB',
            eligibleForUpgradeYn: 'BBBBBB',
            beginSystemDateTime: dayjs(currentDate).format(DATE_FORMAT),
            mobileCheckinAllowedYn: 'BBBBBB',
            quoteId: 'BBBBBB',
            manualCheckoutStatus: 'BBBBBB',
            mobilePreferredCurrency: 'BBBBBB',
            mobileActionAlertIssued: dayjs(currentDate).format(DATE_FORMAT),
            externalEfolioYn: 'BBBBBB',
            optInBatchFolYn: 'BBBBBB',
            folioAddrElementId: 1,
            operaEsignedRegCardYn: 'BBBBBB',
            resvGuid: 'BBBBBB',
            advanceCheckedInYn: 'BBBBBB',
            expectedTimeOfReturn: dayjs(currentDate).format(DATE_FORMAT),
            etrComments: 'BBBBBB',
            optedForCommYn: 'BBBBBB',
            creditLimitAutoPayAllowYn: 'BBBBBB',
          },
          elemDefault,
        );

        const expected = Object.assign(
          {
            insertDate: currentDate,
            updateDate: currentDate,
            beginDate: currentDate,
            endDate: currentDate,
            actualCheckInDate: currentDate,
            truncActualCheckInDate: currentDate,
            actualCheckOutDate: currentDate,
            truncActualCheckOutDate: currentDate,
            arrivalDateTime: currentDate,
            arrivalEstimateTime: currentDate,
            departureDateTime: currentDate,
            departureEstimateTime: currentDate,
            cancellationDate: currentDate,
            originalEndDate: currentDate,
            truncBeginDate: currentDate,
            truncEndDate: currentDate,
            udfd01: currentDate,
            udfd02: currentDate,
            udfd03: currentDate,
            udfd04: currentDate,
            udfd05: currentDate,
            udfd06: currentDate,
            udfd07: currentDate,
            udfd08: currentDate,
            udfd09: currentDate,
            udfd10: currentDate,
            businessDateCreated: currentDate,
            reinstateDate: currentDate,
            purgeDate: currentDate,
            lastSettleDate: currentDate,
            lastPeriodicFolioDate: currentDate,
            entryDate: currentDate,
            originalBeginDate: currentDate,
            folioCloseDate: currentDate,
            keyValidUntil: currentDate,
            visaIssueDate: currentDate,
            visaExpirationDate: currentDate,
            dateOfArrivalInCountry: currentDate,
            preArrReviewedDt: currentDate,
            beginSystemDateTime: currentDate,
            mobileActionAlertIssued: currentDate,
            expectedTimeOfReturn: currentDate,
          },
          returnedFromService,
        );
        axiosStub.put.resolves({ data: returnedFromService });

        return service.update(expected).then(res => {
          expect(res).toMatchObject(expected);
        });
      });

      it('should not update a ReservationName', async () => {
        axiosStub.put.rejects(error);

        return service
          .update({})
          .then()
          .catch(err => {
            expect(err).toMatchObject(error);
          });
      });

      it('should partial update a ReservationName', async () => {
        const patchObject = Object.assign(
          {
            resvNameId: 1,
            nameId: 1,
            contactNameId: 1,
            insertDate: dayjs(currentDate).format(DATE_FORMAT),
            updateDate: dayjs(currentDate).format(DATE_FORMAT),
            resvStatus: 'BBBBBB',
            commissionCode: 'BBBBBB',
            addressId: 1,
            phoneId: 1,
            printRateYn: 'BBBBBB',
            reportId: 'BBBBBB',
            resvNo: 1,
            beginDate: dayjs(currentDate).format(DATE_FORMAT),
            faxId: 1,
            emailId: 1,
            consumerYn: 'BBBBBB',
            financiallyResponsibleYn: 'BBBBBB',
            truncActualCheckInDate: dayjs(currentDate).format(DATE_FORMAT),
            cancellationReasonDesc: 'BBBBBB',
            arrivalTransportType: 'BBBBBB',
            arrivalEstimateTime: dayjs(currentDate).format(DATE_FORMAT),
            arrivalTranportationYn: 'BBBBBB',
            departureTransportCode: 'BBBBBB',
            departureDateTime: dayjs(currentDate).format(DATE_FORMAT),
            departureComments: 'BBBBBB',
            cancellationDate: dayjs(currentDate).format(DATE_FORMAT),
            wlReasonDescription: 'BBBBBB',
            wlPriority: 'BBBBBB',
            partyCode: 'BBBBBB',
            walkinYn: 'BBBBBB',
            amountPercent: 1,
            nameTaxType: 'BBBBBB',
            taxExemptNo: 'BBBBBB',
            wlTelephoneNo: 'BBBBBB',
            videoCheckoutYn: 'BBBBBB',
            discountPrcnt: 1,
            discountReasonCode: 'BBBBBB',
            commissionPaid: 1,
            commissionHoldCode: 'BBBBBB',
            truncEndDate: dayjs(currentDate).format(DATE_FORMAT),
            sguestName: 'BBBBBB',
            membershipId: 1,
            udfc01: 'BBBBBB',
            udfc03: 'BBBBBB',
            udfc04: 'BBBBBB',
            udfc05: 'BBBBBB',
            udfc06: 'BBBBBB',
            udfc07: 'BBBBBB',
            udfc08: 'BBBBBB',
            udfc09: 'BBBBBB',
            udfc10: 'BBBBBB',
            udfc12: 'BBBBBB',
            udfc13: 'BBBBBB',
            udfc14: 'BBBBBB',
            udfc17: 'BBBBBB',
            udfc19: 'BBBBBB',
            udfc21: 'BBBBBB',
            udfc22: 'BBBBBB',
            udfc24: 'BBBBBB',
            udfc25: 'BBBBBB',
            udfc26: 'BBBBBB',
            udfc28: 'BBBBBB',
            udfc29: 'BBBBBB',
            udfc30: 'BBBBBB',
            udfc31: 'BBBBBB',
            udfc32: 'BBBBBB',
            udfc35: 'BBBBBB',
            udfc39: 'BBBBBB',
            udfc40: 'BBBBBB',
            udfn01: 1,
            udfn02: 1,
            udfn03: 1,
            udfn04: 1,
            udfn06: 1,
            udfn07: 1,
            udfn08: 1,
            udfn09: 1,
            udfn12: 1,
            udfn13: 1,
            udfn17: 1,
            udfn18: 1,
            udfn19: 1,
            udfn21: 1,
            udfn23: 1,
            udfn24: 1,
            udfn25: 1,
            udfn27: 1,
            udfn28: 1,
            udfn29: 1,
            udfn30: 1,
            udfn33: 1,
            udfn34: 1,
            udfn38: 1,
            udfn39: 1,
            udfn40: 1,
            udfd01: dayjs(currentDate).format(DATE_FORMAT),
            udfd04: dayjs(currentDate).format(DATE_FORMAT),
            udfd06: dayjs(currentDate).format(DATE_FORMAT),
            udfd07: dayjs(currentDate).format(DATE_FORMAT),
            udfd08: dayjs(currentDate).format(DATE_FORMAT),
            businessDateCreated: dayjs(currentDate).format(DATE_FORMAT),
            turndownYn: 'BBBBBB',
            roomInstructions: 'BBBBBB',
            eventId: 1,
            revenueTypeCode: 'BBBBBB',
            hurdle: 1,
            restrictionOverride: 'BBBBBB',
            guestLastName: 'BBBBBB',
            guestFirstNameSdx: 'BBBBBB',
            extensionId: 1,
            resInsertSourceType: 'BBBBBB',
            tiad: 'BBBBBB',
            purposeOfStay: 'BBBBBB',
            reinstateDate: dayjs(currentDate).format(DATE_FORMAT),
            lastSettleDate: dayjs(currentDate).format(DATE_FORMAT),
            guestStatus: 'BBBBBB',
            entryPoint: 'BBBBBB',
            entryDate: dayjs(currentDate).format(DATE_FORMAT),
            pseudoMemTotalPoints: 1,
            expCheckinresId: 1,
            originalBeginDate: dayjs(currentDate).format(DATE_FORMAT),
            ownerFfFlag: 'BBBBBB',
            commissionPayoutTo: 'BBBBBB',
            preChargingYn: 'BBBBBB',
            postChargingYn: 'BBBBBB',
            postCoFlag: 'BBBBBB',
            folioCloseDate: dayjs(currentDate).format(DATE_FORMAT),
            guaranteeCodePreCi: 'BBBBBB',
            esignedRegCardName: 'BBBBBB',
            statisticalRateTier: 1,
            ymCode: 'BBBBBB',
            keyValidUntil: dayjs(currentDate).format(DATE_FORMAT),
            taxNoOfStays: 1,
            autoSettleYn: 'BBBBBB',
            nextDestination: 'BBBBBB',
            dateOfArrivalInCountry: dayjs(currentDate).format(DATE_FORMAT),
            preArrReviewedDt: dayjs(currentDate).format(DATE_FORMAT),
            preArrReviewedUser: 1,
            mobileAudioKeyYn: 'BBBBBB',
            superSearchIndexText: 'BBBBBB',
            emailFolioYn: 'BBBBBB',
            amenityEligibleYn: 'BBBBBB',
            localBaseRateAmount: 1,
            phoneDisplayNameYn: 'BBBBBB',
            eligibleForUpgradeYn: 'BBBBBB',
            beginSystemDateTime: dayjs(currentDate).format(DATE_FORMAT),
            mobileCheckinAllowedYn: 'BBBBBB',
            quoteId: 'BBBBBB',
            manualCheckoutStatus: 'BBBBBB',
            optInBatchFolYn: 'BBBBBB',
            advanceCheckedInYn: 'BBBBBB',
            expectedTimeOfReturn: dayjs(currentDate).format(DATE_FORMAT),
            etrComments: 'BBBBBB',
          },
          new ReservationName(),
        );
        const returnedFromService = Object.assign(patchObject, elemDefault);

        const expected = Object.assign(
          {
            insertDate: currentDate,
            updateDate: currentDate,
            beginDate: currentDate,
            endDate: currentDate,
            actualCheckInDate: currentDate,
            truncActualCheckInDate: currentDate,
            actualCheckOutDate: currentDate,
            truncActualCheckOutDate: currentDate,
            arrivalDateTime: currentDate,
            arrivalEstimateTime: currentDate,
            departureDateTime: currentDate,
            departureEstimateTime: currentDate,
            cancellationDate: currentDate,
            originalEndDate: currentDate,
            truncBeginDate: currentDate,
            truncEndDate: currentDate,
            udfd01: currentDate,
            udfd02: currentDate,
            udfd03: currentDate,
            udfd04: currentDate,
            udfd05: currentDate,
            udfd06: currentDate,
            udfd07: currentDate,
            udfd08: currentDate,
            udfd09: currentDate,
            udfd10: currentDate,
            businessDateCreated: currentDate,
            reinstateDate: currentDate,
            purgeDate: currentDate,
            lastSettleDate: currentDate,
            lastPeriodicFolioDate: currentDate,
            entryDate: currentDate,
            originalBeginDate: currentDate,
            folioCloseDate: currentDate,
            keyValidUntil: currentDate,
            visaIssueDate: currentDate,
            visaExpirationDate: currentDate,
            dateOfArrivalInCountry: currentDate,
            preArrReviewedDt: currentDate,
            beginSystemDateTime: currentDate,
            mobileActionAlertIssued: currentDate,
            expectedTimeOfReturn: currentDate,
          },
          returnedFromService,
        );
        axiosStub.patch.resolves({ data: returnedFromService });

        return service.partialUpdate(patchObject).then(res => {
          expect(res).toMatchObject(expected);
        });
      });

      it('should not partial update a ReservationName', async () => {
        axiosStub.patch.rejects(error);

        return service
          .partialUpdate({})
          .then()
          .catch(err => {
            expect(err).toMatchObject(error);
          });
      });

      it('should return a list of ReservationName', async () => {
        const returnedFromService = Object.assign(
          {
            resort: 'BBBBBB',
            resvNameId: 1,
            nameId: 1,
            nameUsageType: 'BBBBBB',
            contactNameId: 1,
            insertDate: dayjs(currentDate).format(DATE_FORMAT),
            insertUser: 1,
            updateUser: 1,
            updateDate: dayjs(currentDate).format(DATE_FORMAT),
            resvStatus: 'BBBBBB',
            commissionCode: 'BBBBBB',
            addressId: 1,
            phoneId: 1,
            faxYn: 'BBBBBB',
            mailYn: 'BBBBBB',
            printRateYn: 'BBBBBB',
            reportId: 'BBBBBB',
            resvNo: 1,
            confirmationNo: 'BBBBBB',
            beginDate: dayjs(currentDate).format(DATE_FORMAT),
            endDate: dayjs(currentDate).format(DATE_FORMAT),
            faxId: 1,
            emailId: 1,
            emailYn: 'BBBBBB',
            consumerYn: 'BBBBBB',
            creditCardId: 1,
            financiallyResponsibleYn: 'BBBBBB',
            paymentMethod: 'BBBBBB',
            intermediaryYn: 'BBBBBB',
            postingAllowedYn: 'BBBBBB',
            displayColor: 'BBBBBB',
            actualCheckInDate: dayjs(currentDate).format(DATE_FORMAT),
            truncActualCheckInDate: dayjs(currentDate).format(DATE_FORMAT),
            actualCheckOutDate: dayjs(currentDate).format(DATE_FORMAT),
            truncActualCheckOutDate: dayjs(currentDate).format(DATE_FORMAT),
            creditLimit: 1,
            authorizedBy: 1,
            parentResvNameId: 1,
            cancellationNo: 'BBBBBB',
            cancellationReasonCode: 'BBBBBB',
            cancellationReasonDesc: 'BBBBBB',
            arrivalTransportType: 'BBBBBB',
            arrivalStationCode: 'BBBBBB',
            arrivalCarrierCode: 'BBBBBB',
            arrivalTransportCode: 'BBBBBB',
            arrivalDateTime: dayjs(currentDate).format(DATE_FORMAT),
            arrivalEstimateTime: dayjs(currentDate).format(DATE_FORMAT),
            arrivalTranportationYn: 'BBBBBB',
            arrivalComments: 'BBBBBB',
            departureTransportType: 'BBBBBB',
            departureStationCode: 'BBBBBB',
            departureCarrierCode: 'BBBBBB',
            departureTransportCode: 'BBBBBB',
            departureDateTime: dayjs(currentDate).format(DATE_FORMAT),
            departureEstimateTime: dayjs(currentDate).format(DATE_FORMAT),
            departureTransportationYn: 'BBBBBB',
            departureComments: 'BBBBBB',
            cancellationDate: dayjs(currentDate).format(DATE_FORMAT),
            guaranteeCode: 'BBBBBB',
            wlReasonDescription: 'BBBBBB',
            wlReasonCode: 'BBBBBB',
            wlPriority: 'BBBBBB',
            doNotMoveRoom: 'BBBBBB',
            externalReference: 'BBBBBB',
            partyCode: 'BBBBBB',
            walkinYn: 'BBBBBB',
            originalEndDate: dayjs(currentDate).format(DATE_FORMAT),
            approvalAmountCalcMethod: 1,
            amountPercent: 1,
            nameTaxType: 'BBBBBB',
            taxExemptNo: 'BBBBBB',
            roomFeatures: 'BBBBBB',
            wlTelephoneNo: 'BBBBBB',
            videoCheckoutYn: 'BBBBBB',
            discountAmt: 1,
            discountPrcnt: 1,
            discountReasonCode: 'BBBBBB',
            commissionPaid: 1,
            commissionHoldCode: 'BBBBBB',
            truncBeginDate: dayjs(currentDate).format(DATE_FORMAT),
            truncEndDate: dayjs(currentDate).format(DATE_FORMAT),
            sguestName: 'BBBBBB',
            membershipId: 1,
            udfc01: 'BBBBBB',
            udfc02: 'BBBBBB',
            udfc03: 'BBBBBB',
            udfc04: 'BBBBBB',
            udfc05: 'BBBBBB',
            udfc06: 'BBBBBB',
            udfc07: 'BBBBBB',
            udfc08: 'BBBBBB',
            udfc09: 'BBBBBB',
            udfc10: 'BBBBBB',
            udfc11: 'BBBBBB',
            udfc12: 'BBBBBB',
            udfc13: 'BBBBBB',
            udfc14: 'BBBBBB',
            udfc15: 'BBBBBB',
            udfc16: 'BBBBBB',
            udfc17: 'BBBBBB',
            udfc18: 'BBBBBB',
            udfc19: 'BBBBBB',
            udfc20: 'BBBBBB',
            udfc21: 'BBBBBB',
            udfc22: 'BBBBBB',
            udfc23: 'BBBBBB',
            udfc24: 'BBBBBB',
            udfc25: 'BBBBBB',
            udfc26: 'BBBBBB',
            udfc27: 'BBBBBB',
            udfc28: 'BBBBBB',
            udfc29: 'BBBBBB',
            udfc30: 'BBBBBB',
            udfc31: 'BBBBBB',
            udfc32: 'BBBBBB',
            udfc33: 'BBBBBB',
            udfc34: 'BBBBBB',
            udfc35: 'BBBBBB',
            udfc36: 'BBBBBB',
            udfc37: 'BBBBBB',
            udfc38: 'BBBBBB',
            udfc39: 'BBBBBB',
            udfc40: 'BBBBBB',
            udfn01: 1,
            udfn02: 1,
            udfn03: 1,
            udfn04: 1,
            udfn05: 1,
            udfn06: 1,
            udfn07: 1,
            udfn08: 1,
            udfn09: 1,
            udfn10: 1,
            udfn11: 1,
            udfn12: 1,
            udfn13: 1,
            udfn14: 1,
            udfn15: 1,
            udfn16: 1,
            udfn17: 1,
            udfn18: 1,
            udfn19: 1,
            udfn20: 1,
            udfn21: 1,
            udfn22: 1,
            udfn23: 1,
            udfn24: 1,
            udfn25: 1,
            udfn26: 1,
            udfn27: 1,
            udfn28: 1,
            udfn29: 1,
            udfn30: 1,
            udfn31: 1,
            udfn32: 1,
            udfn33: 1,
            udfn34: 1,
            udfn35: 1,
            udfn36: 1,
            udfn37: 1,
            udfn38: 1,
            udfn39: 1,
            udfn40: 1,
            udfd01: dayjs(currentDate).format(DATE_FORMAT),
            udfd02: dayjs(currentDate).format(DATE_FORMAT),
            udfd03: dayjs(currentDate).format(DATE_FORMAT),
            udfd04: dayjs(currentDate).format(DATE_FORMAT),
            udfd05: dayjs(currentDate).format(DATE_FORMAT),
            udfd06: dayjs(currentDate).format(DATE_FORMAT),
            udfd07: dayjs(currentDate).format(DATE_FORMAT),
            udfd08: dayjs(currentDate).format(DATE_FORMAT),
            udfd09: dayjs(currentDate).format(DATE_FORMAT),
            udfd10: dayjs(currentDate).format(DATE_FORMAT),
            insertActionInstanceId: 1,
            dmlSeqNo: 1,
            businessDateCreated: dayjs(currentDate).format(DATE_FORMAT),
            turndownYn: 'BBBBBB',
            roomInstructions: 'BBBBBB',
            roomServiceTime: 'BBBBBB',
            eventId: 1,
            revenueTypeCode: 'BBBBBB',
            hurdle: 1,
            hurdleOverride: 'BBBBBB',
            rateableValue: 1,
            restrictionOverride: 'BBBBBB',
            yieldableYn: 'BBBBBB',
            sguestFirstname: 'BBBBBB',
            guestLastName: 'BBBBBB',
            guestFirstName: 'BBBBBB',
            guestLastNameSdx: 'BBBBBB',
            guestFirstNameSdx: 'BBBBBB',
            channel: 'BBBBBB',
            shareSeqNo: 1,
            guestSignature: 'BBBBBB',
            extensionId: 1,
            resvContactId: 1,
            billingContactId: 1,
            resInsertSource: 'BBBBBB',
            resInsertSourceType: 'BBBBBB',
            masterShare: 'BBBBBB',
            registrationCardNo: 'BBBBBB',
            tiad: 'BBBBBB',
            purposeOfStay: 'BBBBBB',
            reinstateDate: dayjs(currentDate).format(DATE_FORMAT),
            purgeDate: dayjs(currentDate).format(DATE_FORMAT),
            lastSettleDate: dayjs(currentDate).format(DATE_FORMAT),
            lastPeriodicFolioDate: dayjs(currentDate).format(DATE_FORMAT),
            periodicFolioFreq: 1,
            confirmationLegNo: 1,
            guestStatus: 'BBBBBB',
            guestType: 'BBBBBB',
            checkinDuration: 1,
            authorizerId: 1,
            lastOnlinePrintSeq: 1,
            entryPoint: 'BBBBBB',
            entryDate: dayjs(currentDate).format(DATE_FORMAT),
            pseudoMemType: 'BBBBBB',
            pseudoMemTotalPoints: 1,
            folioText1: 'BBBBBB',
            folioText2: 'BBBBBB',
            compTypeCode: 'BBBBBB',
            uniCardId: 'BBBBBB',
            expCheckinresId: 1,
            originalBeginDate: dayjs(currentDate).format(DATE_FORMAT),
            ownerFfFlag: 'BBBBBB',
            commissionPayoutTo: 'BBBBBB',
            preChargingYn: 'BBBBBB',
            postChargingYn: 'BBBBBB',
            postCoFlag: 'BBBBBB',
            folioCloseDate: dayjs(currentDate).format(DATE_FORMAT),
            scheduleCheckoutYn: 'BBBBBB',
            customReference: 'BBBBBB',
            guaranteeCodePreCi: 'BBBBBB',
            awardMembershipId: 1,
            esignedRegCardName: 'BBBBBB',
            statisticalRoomType: 1,
            statisticalRateTier: 1,
            ymCode: 'BBBBBB',
            keyValidUntil: dayjs(currentDate).format(DATE_FORMAT),
            preRegisteredYn: 'BBBBBB',
            taxRegistrationNo: 1,
            visaNumber: 'BBBBBB',
            visaIssueDate: dayjs(currentDate).format(DATE_FORMAT),
            visaExpirationDate: dayjs(currentDate).format(DATE_FORMAT),
            taxNoOfStays: 1,
            asbProratedYn: 'BBBBBB',
            autoSettleDays: 1,
            autoSettleYn: 'BBBBBB',
            splitFromResvNameId: 1,
            nextDestination: 'BBBBBB',
            dateOfArrivalInCountry: dayjs(currentDate).format(DATE_FORMAT),
            preArrReviewedDt: dayjs(currentDate).format(DATE_FORMAT),
            preArrReviewedUser: 1,
            bonusCheckId: 1,
            mobileAudioKeyYn: 'BBBBBB',
            directBillVerifyResponse: 'BBBBBB',
            addresseeNameId: 1,
            superSearchIndexText: 'BBBBBB',
            autoCheckinYn: 'BBBBBB',
            emailFolioYn: 'BBBBBB',
            emailAddress: 'BBBBBB',
            spgUpgradeConfirmedRoomtype: 'BBBBBB',
            spgUpgradeReasonCode: 'BBBBBB',
            spgSuiteNightAwardStatus: 'BBBBBB',
            spgDiscloseRoomTypeYn: 'BBBBBB',
            amenityEligibleYn: 'BBBBBB',
            amenityLevelCode: 'BBBBBB',
            baseRateCurrencyCode: 'BBBBBB',
            baseRateCode: 'BBBBBB',
            localBaseRateAmount: 1,
            phoneDisplayNameYn: 'BBBBBB',
            resortChargeNumber: 'BBBBBB',
            mobileChkoutAllowed: 'BBBBBB',
            mobileViewFolioAllowed: 'BBBBBB',
            hkExpectedServiceTime: 'BBBBBB',
            eligibleForUpgradeYn: 'BBBBBB',
            beginSystemDateTime: dayjs(currentDate).format(DATE_FORMAT),
            mobileCheckinAllowedYn: 'BBBBBB',
            quoteId: 'BBBBBB',
            manualCheckoutStatus: 'BBBBBB',
            mobilePreferredCurrency: 'BBBBBB',
            mobileActionAlertIssued: dayjs(currentDate).format(DATE_FORMAT),
            externalEfolioYn: 'BBBBBB',
            optInBatchFolYn: 'BBBBBB',
            folioAddrElementId: 1,
            operaEsignedRegCardYn: 'BBBBBB',
            resvGuid: 'BBBBBB',
            advanceCheckedInYn: 'BBBBBB',
            expectedTimeOfReturn: dayjs(currentDate).format(DATE_FORMAT),
            etrComments: 'BBBBBB',
            optedForCommYn: 'BBBBBB',
            creditLimitAutoPayAllowYn: 'BBBBBB',
          },
          elemDefault,
        );
        const expected = Object.assign(
          {
            insertDate: currentDate,
            updateDate: currentDate,
            beginDate: currentDate,
            endDate: currentDate,
            actualCheckInDate: currentDate,
            truncActualCheckInDate: currentDate,
            actualCheckOutDate: currentDate,
            truncActualCheckOutDate: currentDate,
            arrivalDateTime: currentDate,
            arrivalEstimateTime: currentDate,
            departureDateTime: currentDate,
            departureEstimateTime: currentDate,
            cancellationDate: currentDate,
            originalEndDate: currentDate,
            truncBeginDate: currentDate,
            truncEndDate: currentDate,
            udfd01: currentDate,
            udfd02: currentDate,
            udfd03: currentDate,
            udfd04: currentDate,
            udfd05: currentDate,
            udfd06: currentDate,
            udfd07: currentDate,
            udfd08: currentDate,
            udfd09: currentDate,
            udfd10: currentDate,
            businessDateCreated: currentDate,
            reinstateDate: currentDate,
            purgeDate: currentDate,
            lastSettleDate: currentDate,
            lastPeriodicFolioDate: currentDate,
            entryDate: currentDate,
            originalBeginDate: currentDate,
            folioCloseDate: currentDate,
            keyValidUntil: currentDate,
            visaIssueDate: currentDate,
            visaExpirationDate: currentDate,
            dateOfArrivalInCountry: currentDate,
            preArrReviewedDt: currentDate,
            beginSystemDateTime: currentDate,
            mobileActionAlertIssued: currentDate,
            expectedTimeOfReturn: currentDate,
          },
          returnedFromService,
        );
        axiosStub.get.resolves([returnedFromService]);
        return service.retrieve({ sort: {}, page: 0, size: 10 }).then(res => {
          expect(res).toContainEqual(expected);
        });
      });

      it('should not return a list of ReservationName', async () => {
        axiosStub.get.rejects(error);

        return service
          .retrieve()
          .then()
          .catch(err => {
            expect(err).toMatchObject(error);
          });
      });

      it('should delete a ReservationName', async () => {
        axiosStub.delete.resolves({ ok: true });
        return service.delete(123).then(res => {
          expect(res.ok).toBeTruthy();
        });
      });

      it('should not delete a ReservationName', async () => {
        axiosStub.delete.rejects(error);

        return service
          .delete(123)
          .then()
          .catch(err => {
            expect(err).toMatchObject(error);
          });
      });
    });
  });
});
