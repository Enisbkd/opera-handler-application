package com.sbm.mc.domain;

import static com.sbm.mc.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class ReservationSummaryAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReservationSummaryAllPropertiesEquals(ReservationSummary expected, ReservationSummary actual) {
        assertReservationSummaryAutoGeneratedPropertiesEquals(expected, actual);
        assertReservationSummaryAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReservationSummaryAllUpdatablePropertiesEquals(ReservationSummary expected, ReservationSummary actual) {
        assertReservationSummaryUpdatableFieldsEquals(expected, actual);
        assertReservationSummaryUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReservationSummaryAutoGeneratedPropertiesEquals(ReservationSummary expected, ReservationSummary actual) {
        assertThat(expected)
            .as("Verify ReservationSummary auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReservationSummaryUpdatableFieldsEquals(ReservationSummary expected, ReservationSummary actual) {
        assertThat(expected)
            .as("Verify ReservationSummary relevant properties")
            .satisfies(e -> assertThat(e.getResort()).as("check resort").isEqualTo(actual.getResort()))
            .satisfies(e -> assertThat(e.getEventType()).as("check eventType").isEqualTo(actual.getEventType()))
            .satisfies(e -> assertThat(e.getEventId()).as("check eventId").isEqualTo(actual.getEventId()))
            .satisfies(e -> assertThat(e.getConsideredDate()).as("check consideredDate").isEqualTo(actual.getConsideredDate()))
            .satisfies(e -> assertThat(e.getRoomCategory()).as("check roomCategory").isEqualTo(actual.getRoomCategory()))
            .satisfies(e -> assertThat(e.getRoomClass()).as("check roomClass").isEqualTo(actual.getRoomClass()))
            .satisfies(e -> assertThat(e.getMarketCode()).as("check marketCode").isEqualTo(actual.getMarketCode()))
            .satisfies(e -> assertThat(e.getSourceCode()).as("check sourceCode").isEqualTo(actual.getSourceCode()))
            .satisfies(e -> assertThat(e.getRateCode()).as("check rateCode").isEqualTo(actual.getRateCode()))
            .satisfies(e -> assertThat(e.getRegionCode()).as("check regionCode").isEqualTo(actual.getRegionCode()))
            .satisfies(e -> assertThat(e.getGroupId()).as("check groupId").isEqualTo(actual.getGroupId()))
            .satisfies(e -> assertThat(e.getResvType()).as("check resvType").isEqualTo(actual.getResvType()))
            .satisfies(e -> assertThat(e.getResvInvType()).as("check resvInvType").isEqualTo(actual.getResvInvType()))
            .satisfies(e -> assertThat(e.getPsuedoRoomYn()).as("check psuedoRoomYn").isEqualTo(actual.getPsuedoRoomYn()))
            .satisfies(e -> assertThat(e.getArrRooms()).as("check arrRooms").isEqualTo(actual.getArrRooms()))
            .satisfies(e -> assertThat(e.getAdults()).as("check adults").isEqualTo(actual.getAdults()))
            .satisfies(e -> assertThat(e.getChildren()).as("check children").isEqualTo(actual.getChildren()))
            .satisfies(e -> assertThat(e.getDepRooms()).as("check depRooms").isEqualTo(actual.getDepRooms()))
            .satisfies(e -> assertThat(e.getNoRooms()).as("check noRooms").isEqualTo(actual.getNoRooms()))
            .satisfies(
                e ->
                    assertThat(e.getGrossRate()).as("check grossRate").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getGrossRate())
            )
            .satisfies(
                e ->
                    assertThat(e.getNetRoomRevenue())
                        .as("check netRoomRevenue")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getNetRoomRevenue())
            )
            .satisfies(
                e ->
                    assertThat(e.getExtraRevenue())
                        .as("check extraRevenue")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getExtraRevenue())
            )
            .satisfies(e -> assertThat(e.getOoRooms()).as("check ooRooms").isEqualTo(actual.getOoRooms()))
            .satisfies(e -> assertThat(e.getOsRooms()).as("check osRooms").isEqualTo(actual.getOsRooms()))
            .satisfies(
                e -> assertThat(e.getRemainingBlockRooms()).as("check remainingBlockRooms").isEqualTo(actual.getRemainingBlockRooms())
            )
            .satisfies(e -> assertThat(e.getPickedupBlockRooms()).as("check pickedupBlockRooms").isEqualTo(actual.getPickedupBlockRooms()))
            .satisfies(e -> assertThat(e.getSingleOccupancy()).as("check singleOccupancy").isEqualTo(actual.getSingleOccupancy()))
            .satisfies(e -> assertThat(e.getMultipleOccupancy()).as("check multipleOccupancy").isEqualTo(actual.getMultipleOccupancy()))
            .satisfies(e -> assertThat(e.getBlockStatus()).as("check blockStatus").isEqualTo(actual.getBlockStatus()))
            .satisfies(e -> assertThat(e.getArrPersons()).as("check arrPersons").isEqualTo(actual.getArrPersons()))
            .satisfies(e -> assertThat(e.getDepPersons()).as("check depPersons").isEqualTo(actual.getDepPersons()))
            .satisfies(e -> assertThat(e.getWlRooms()).as("check wlRooms").isEqualTo(actual.getWlRooms()))
            .satisfies(e -> assertThat(e.getWlPersons()).as("check wlPersons").isEqualTo(actual.getWlPersons()))
            .satisfies(e -> assertThat(e.getDayUseRooms()).as("check dayUseRooms").isEqualTo(actual.getDayUseRooms()))
            .satisfies(e -> assertThat(e.getDayUsePersons()).as("check dayUsePersons").isEqualTo(actual.getDayUsePersons()))
            .satisfies(e -> assertThat(e.getBookingStatus()).as("check bookingStatus").isEqualTo(actual.getBookingStatus()))
            .satisfies(e -> assertThat(e.getResvStatus()).as("check resvStatus").isEqualTo(actual.getResvStatus()))
            .satisfies(e -> assertThat(e.getDayUseYn()).as("check dayUseYn").isEqualTo(actual.getDayUseYn()))
            .satisfies(e -> assertThat(e.getChannel()).as("check channel").isEqualTo(actual.getChannel()))
            .satisfies(e -> assertThat(e.getCountry()).as("check country").isEqualTo(actual.getCountry()))
            .satisfies(e -> assertThat(e.getNationality()).as("check nationality").isEqualTo(actual.getNationality()))
            .satisfies(e -> assertThat(e.getCribs()).as("check cribs").isEqualTo(actual.getCribs()))
            .satisfies(e -> assertThat(e.getExtraBeds()).as("check extraBeds").isEqualTo(actual.getExtraBeds()))
            .satisfies(e -> assertThat(e.getAdultsTaxFree()).as("check adultsTaxFree").isEqualTo(actual.getAdultsTaxFree()))
            .satisfies(e -> assertThat(e.getChildrenTaxFree()).as("check childrenTaxFree").isEqualTo(actual.getChildrenTaxFree()))
            .satisfies(e -> assertThat(e.getRateCategory()).as("check rateCategory").isEqualTo(actual.getRateCategory()))
            .satisfies(e -> assertThat(e.getRateClass()).as("check rateClass").isEqualTo(actual.getRateClass()))
            .satisfies(
                e ->
                    assertThat(e.getRoomRevenue())
                        .as("check roomRevenue")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getRoomRevenue())
            )
            .satisfies(
                e ->
                    assertThat(e.getFoodRevenue())
                        .as("check foodRevenue")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getFoodRevenue())
            )
            .satisfies(
                e ->
                    assertThat(e.getOtherRevenue())
                        .as("check otherRevenue")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getOtherRevenue())
            )
            .satisfies(
                e ->
                    assertThat(e.getTotalRevenue())
                        .as("check totalRevenue")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getTotalRevenue())
            )
            .satisfies(
                e ->
                    assertThat(e.getNonRevenue())
                        .as("check nonRevenue")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getNonRevenue())
            )
            .satisfies(e -> assertThat(e.getAllotmentHeaderId()).as("check allotmentHeaderId").isEqualTo(actual.getAllotmentHeaderId()))
            .satisfies(
                e ->
                    assertThat(e.getRoomRevenueTax())
                        .as("check roomRevenueTax")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getRoomRevenueTax())
            )
            .satisfies(
                e ->
                    assertThat(e.getFoodRevenueTax())
                        .as("check foodRevenueTax")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getFoodRevenueTax())
            )
            .satisfies(
                e ->
                    assertThat(e.getOtherRevenueTax())
                        .as("check otherRevenueTax")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getOtherRevenueTax())
            )
            .satisfies(
                e ->
                    assertThat(e.getTotalRevenueTax())
                        .as("check totalRevenueTax")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getTotalRevenueTax())
            )
            .satisfies(
                e ->
                    assertThat(e.getNonRevenueTax())
                        .as("check nonRevenueTax")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getNonRevenueTax())
            )
            .satisfies(e -> assertThat(e.getCity()).as("check city").isEqualTo(actual.getCity()))
            .satisfies(e -> assertThat(e.getZipCode()).as("check zipCode").isEqualTo(actual.getZipCode()))
            .satisfies(e -> assertThat(e.getDistrict()).as("check district").isEqualTo(actual.getDistrict()))
            .satisfies(e -> assertThat(e.getState()).as("check state").isEqualTo(actual.getState()))
            .satisfies(e -> assertThat(e.getChildren1()).as("check children1").isEqualTo(actual.getChildren1()))
            .satisfies(e -> assertThat(e.getChildren2()).as("check children2").isEqualTo(actual.getChildren2()))
            .satisfies(e -> assertThat(e.getChildren3()).as("check children3").isEqualTo(actual.getChildren3()))
            .satisfies(e -> assertThat(e.getChildren4()).as("check children4").isEqualTo(actual.getChildren4()))
            .satisfies(e -> assertThat(e.getChildren5()).as("check children5").isEqualTo(actual.getChildren5()))
            .satisfies(e -> assertThat(e.getOwnerFfFlag()).as("check ownerFfFlag").isEqualTo(actual.getOwnerFfFlag()))
            .satisfies(e -> assertThat(e.getOwnerRentalFlag()).as("check ownerRentalFlag").isEqualTo(actual.getOwnerRentalFlag()))
            .satisfies(
                e ->
                    assertThat(e.getFcGrossRate())
                        .as("check fcGrossRate")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getFcGrossRate())
            )
            .satisfies(
                e ->
                    assertThat(e.getFcNetRoomRevenue())
                        .as("check fcNetRoomRevenue")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getFcNetRoomRevenue())
            )
            .satisfies(
                e ->
                    assertThat(e.getFcExtraRevenue())
                        .as("check fcExtraRevenue")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getFcExtraRevenue())
            )
            .satisfies(
                e ->
                    assertThat(e.getFcRoomRevenue())
                        .as("check fcRoomRevenue")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getFcRoomRevenue())
            )
            .satisfies(
                e ->
                    assertThat(e.getFcFoodRevenue())
                        .as("check fcFoodRevenue")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getFcFoodRevenue())
            )
            .satisfies(
                e ->
                    assertThat(e.getFcOtherRevenue())
                        .as("check fcOtherRevenue")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getFcOtherRevenue())
            )
            .satisfies(
                e ->
                    assertThat(e.getFcTotalRevenue())
                        .as("check fcTotalRevenue")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getFcTotalRevenue())
            )
            .satisfies(
                e ->
                    assertThat(e.getFcNonRevenue())
                        .as("check fcNonRevenue")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getFcNonRevenue())
            )
            .satisfies(
                e ->
                    assertThat(e.getFcRoomRevenueTax())
                        .as("check fcRoomRevenueTax")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getFcRoomRevenueTax())
            )
            .satisfies(
                e ->
                    assertThat(e.getFcFoodRevenueTax())
                        .as("check fcFoodRevenueTax")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getFcFoodRevenueTax())
            )
            .satisfies(
                e ->
                    assertThat(e.getFcOtherRevenueTax())
                        .as("check fcOtherRevenueTax")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getFcOtherRevenueTax())
            )
            .satisfies(
                e ->
                    assertThat(e.getFcTotalRevenueTax())
                        .as("check fcTotalRevenueTax")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getFcTotalRevenueTax())
            )
            .satisfies(
                e ->
                    assertThat(e.getFcNonRevenueTax())
                        .as("check fcNonRevenueTax")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getFcNonRevenueTax())
            )
            .satisfies(e -> assertThat(e.getCurrencyCode()).as("check currencyCode").isEqualTo(actual.getCurrencyCode()))
            .satisfies(e -> assertThat(e.getExchangeDate()).as("check exchangeDate").isEqualTo(actual.getExchangeDate()))
            .satisfies(e -> assertThat(e.getUpdateBusinessDate()).as("check updateBusinessDate").isEqualTo(actual.getUpdateBusinessDate()))
            .satisfies(e -> assertThat(e.getUpdateDate()).as("check updateDate").isEqualTo(actual.getUpdateDate()))
            .satisfies(
                e -> assertThat(e.getCentralCurrencyCode()).as("check centralCurrencyCode").isEqualTo(actual.getCentralCurrencyCode())
            )
            .satisfies(
                e ->
                    assertThat(e.getCentralExchangeRate())
                        .as("check centralExchangeRate")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getCentralExchangeRate())
            )
            .satisfies(e -> assertThat(e.getTruncBeginDate()).as("check truncBeginDate").isEqualTo(actual.getTruncBeginDate()))
            .satisfies(e -> assertThat(e.getTruncEndDate()).as("check truncEndDate").isEqualTo(actual.getTruncEndDate()))
            .satisfies(
                e -> assertThat(e.getBusinessDateCreated()).as("check businessDateCreated").isEqualTo(actual.getBusinessDateCreated())
            )
            .satisfies(e -> assertThat(e.getResInsertSource()).as("check resInsertSource").isEqualTo(actual.getResInsertSource()))
            .satisfies(e -> assertThat(e.getParentCompanyId()).as("check parentCompanyId").isEqualTo(actual.getParentCompanyId()))
            .satisfies(e -> assertThat(e.getAgentId()).as("check agentId").isEqualTo(actual.getAgentId()))
            .satisfies(e -> assertThat(e.getGender()).as("check gender").isEqualTo(actual.getGender()))
            .satisfies(e -> assertThat(e.getVipStatus()).as("check vipStatus").isEqualTo(actual.getVipStatus()))
            .satisfies(e -> assertThat(e.getQuantity()).as("check quantity").isEqualTo(actual.getQuantity()))
            .satisfies(e -> assertThat(e.getTurndownStatus()).as("check turndownStatus").isEqualTo(actual.getTurndownStatus()))
            .satisfies(e -> assertThat(e.getBookedRoomCategory()).as("check bookedRoomCategory").isEqualTo(actual.getBookedRoomCategory()))
            .satisfies(e -> assertThat(e.getSourceProfId()).as("check sourceProfId").isEqualTo(actual.getSourceProfId()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReservationSummaryUpdatableRelationshipsEquals(ReservationSummary expected, ReservationSummary actual) {}
}
