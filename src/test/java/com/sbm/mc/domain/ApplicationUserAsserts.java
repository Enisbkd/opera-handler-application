package com.sbm.mc.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ApplicationUserAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertApplicationUserAllPropertiesEquals(ApplicationUser expected, ApplicationUser actual) {
        assertApplicationUserAutoGeneratedPropertiesEquals(expected, actual);
        assertApplicationUserAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertApplicationUserAllUpdatablePropertiesEquals(ApplicationUser expected, ApplicationUser actual) {
        assertApplicationUserUpdatableFieldsEquals(expected, actual);
        assertApplicationUserUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertApplicationUserAutoGeneratedPropertiesEquals(ApplicationUser expected, ApplicationUser actual) {
        assertThat(expected)
            .as("Verify ApplicationUser auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertApplicationUserUpdatableFieldsEquals(ApplicationUser expected, ApplicationUser actual) {
        assertThat(expected)
            .as("Verify ApplicationUser relevant properties")
            .satisfies(e -> assertThat(e.getAppUserId()).as("check appUserId").isEqualTo(actual.getAppUserId()))
            .satisfies(e -> assertThat(e.getAppUser()).as("check appUser").isEqualTo(actual.getAppUser()))
            .satisfies(e -> assertThat(e.getAppPassword()).as("check appPassword").isEqualTo(actual.getAppPassword()))
            .satisfies(e -> assertThat(e.getInsertDate()).as("check insertDate").isEqualTo(actual.getInsertDate()))
            .satisfies(e -> assertThat(e.getInsertUser()).as("check insertUser").isEqualTo(actual.getInsertUser()))
            .satisfies(e -> assertThat(e.getUpdateDate()).as("check updateDate").isEqualTo(actual.getUpdateDate()))
            .satisfies(e -> assertThat(e.getUpdateUser()).as("check updateUser").isEqualTo(actual.getUpdateUser()))
            .satisfies(e -> assertThat(e.getOracleUid()).as("check oracleUid").isEqualTo(actual.getOracleUid()))
            .satisfies(e -> assertThat(e.getOracleUser()).as("check oracleUser").isEqualTo(actual.getOracleUser()))
            .satisfies(e -> assertThat(e.getOraclePassword()).as("check oraclePassword").isEqualTo(actual.getOraclePassword()))
            .satisfies(e -> assertThat(e.getInactiveDate()).as("check inactiveDate").isEqualTo(actual.getInactiveDate()))
            .satisfies(e -> assertThat(e.getTitle()).as("check title").isEqualTo(actual.getTitle()))
            .satisfies(e -> assertThat(e.getDefaultForm()).as("check defaultForm").isEqualTo(actual.getDefaultForm()))
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(e -> assertThat(e.getAppUserType()).as("check appUserType").isEqualTo(actual.getAppUserType()))
            .satisfies(e -> assertThat(e.getLastLoggedResort()).as("check lastLoggedResort").isEqualTo(actual.getLastLoggedResort()))
            .satisfies(e -> assertThat(e.getDefCashierId()).as("check defCashierId").isEqualTo(actual.getDefCashierId()))
            .satisfies(e -> assertThat(e.getAppUserDescription()).as("check appUserDescription").isEqualTo(actual.getAppUserDescription()))
            .satisfies(e -> assertThat(e.getPersonNameId()).as("check personNameId").isEqualTo(actual.getPersonNameId()))
            .satisfies(e -> assertThat(e.getDisabledUntil()).as("check disabledUntil").isEqualTo(actual.getDisabledUntil()))
            .satisfies(e -> assertThat(e.getExpiresOn()).as("check expiresOn").isEqualTo(actual.getExpiresOn()))
            .satisfies(
                e -> assertThat(e.getLastLoggedTimestamp()).as("check lastLoggedTimestamp").isEqualTo(actual.getLastLoggedTimestamp())
            )
            .satisfies(e -> assertThat(e.getIsSuperuser()).as("check isSuperuser").isEqualTo(actual.getIsSuperuser()))
            .satisfies(e -> assertThat(e.getEmployeeNumber()).as("check employeeNumber").isEqualTo(actual.getEmployeeNumber()))
            .satisfies(e -> assertThat(e.getGeneralFilepath()).as("check generalFilepath").isEqualTo(actual.getGeneralFilepath()))
            .satisfies(e -> assertThat(e.getUserFilepath()).as("check userFilepath").isEqualTo(actual.getUserFilepath()))
            .satisfies(e -> assertThat(e.getDefaultResort()).as("check defaultResort").isEqualTo(actual.getDefaultResort()))
            .satisfies(e -> assertThat(e.getMaxUserSessions()).as("check maxUserSessions").isEqualTo(actual.getMaxUserSessions()))
            .satisfies(e -> assertThat(e.getInternalYn()).as("check internalYn").isEqualTo(actual.getInternalYn()))
            .satisfies(e -> assertThat(e.getMaxCheckoutDays()).as("check maxCheckoutDays").isEqualTo(actual.getMaxCheckoutDays()))
            .satisfies(e -> assertThat(e.getDefaultTerminal()).as("check defaultTerminal").isEqualTo(actual.getDefaultTerminal()))
            .satisfies(e -> assertThat(e.getDefaultLanguage()).as("check defaultLanguage").isEqualTo(actual.getDefaultLanguage()))
            .satisfies(e -> assertThat(e.getDeptId()).as("check deptId").isEqualTo(actual.getDeptId()))
            .satisfies(e -> assertThat(e.getMaleFemale()).as("check maleFemale").isEqualTo(actual.getMaleFemale()))
            .satisfies(e -> assertThat(e.getUserPbxId()).as("check userPbxId").isEqualTo(actual.getUserPbxId()))
            .satisfies(e -> assertThat(e.getDateHired()).as("check dateHired").isEqualTo(actual.getDateHired()))
            .satisfies(e -> assertThat(e.getWorkPermitNo()).as("check workPermitNo").isEqualTo(actual.getWorkPermitNo()))
            .satisfies(e -> assertThat(e.getWorkPermitExpdate()).as("check workPermitExpdate").isEqualTo(actual.getWorkPermitExpdate()))
            .satisfies(e -> assertThat(e.getRateType()).as("check rateType").isEqualTo(actual.getRateType()))
            .satisfies(e -> assertThat(e.getSalaryInterval()).as("check salaryInterval").isEqualTo(actual.getSalaryInterval()))
            .satisfies(e -> assertThat(e.getHourlyRate()).as("check hourlyRate").isEqualTo(actual.getHourlyRate()))
            .satisfies(e -> assertThat(e.getWeeklySalary()).as("check weeklySalary").isEqualTo(actual.getWeeklySalary()))
            .satisfies(e -> assertThat(e.getOtMultiplier()).as("check otMultiplier").isEqualTo(actual.getOtMultiplier()))
            .satisfies(e -> assertThat(e.getHireType()).as("check hireType").isEqualTo(actual.getHireType()))
            .satisfies(e -> assertThat(e.getRehireYn()).as("check rehireYn").isEqualTo(actual.getRehireYn()))
            .satisfies(e -> assertThat(e.getEmpExtension()).as("check empExtension").isEqualTo(actual.getEmpExtension()))
            .satisfies(e -> assertThat(e.getEmpPager()).as("check empPager").isEqualTo(actual.getEmpPager()))
            .satisfies(e -> assertThat(e.getTermReason()).as("check termReason").isEqualTo(actual.getTermReason()))
            .satisfies(e -> assertThat(e.getTerminatedDate()).as("check terminatedDate").isEqualTo(actual.getTerminatedDate()))
            .satisfies(e -> assertThat(e.getInactiveReasonCode()).as("check inactiveReasonCode").isEqualTo(actual.getInactiveReasonCode()))
            .satisfies(e -> assertThat(e.getInactiveFrom()).as("check inactiveFrom").isEqualTo(actual.getInactiveFrom()))
            .satisfies(e -> assertThat(e.getInactiveTo()).as("check inactiveTo").isEqualTo(actual.getInactiveTo()))
            .satisfies(e -> assertThat(e.getWeekMin()).as("check weekMin").isEqualTo(actual.getWeekMin()))
            .satisfies(e -> assertThat(e.getWeekMax()).as("check weekMax").isEqualTo(actual.getWeekMax()))
            .satisfies(e -> assertThat(e.getMondayMin()).as("check mondayMin").isEqualTo(actual.getMondayMin()))
            .satisfies(e -> assertThat(e.getMondayMax()).as("check mondayMax").isEqualTo(actual.getMondayMax()))
            .satisfies(e -> assertThat(e.getTuesdayMin()).as("check tuesdayMin").isEqualTo(actual.getTuesdayMin()))
            .satisfies(e -> assertThat(e.getTuesdayMax()).as("check tuesdayMax").isEqualTo(actual.getTuesdayMax()))
            .satisfies(e -> assertThat(e.getWednesdayMin()).as("check wednesdayMin").isEqualTo(actual.getWednesdayMin()))
            .satisfies(e -> assertThat(e.getWednesdayMax()).as("check wednesdayMax").isEqualTo(actual.getWednesdayMax()))
            .satisfies(e -> assertThat(e.getThursdayMin()).as("check thursdayMin").isEqualTo(actual.getThursdayMin()))
            .satisfies(e -> assertThat(e.getThursdayMax()).as("check thursdayMax").isEqualTo(actual.getThursdayMax()))
            .satisfies(e -> assertThat(e.getFridayMin()).as("check fridayMin").isEqualTo(actual.getFridayMin()))
            .satisfies(e -> assertThat(e.getFridayMax()).as("check fridayMax").isEqualTo(actual.getFridayMax()))
            .satisfies(e -> assertThat(e.getSaturdayMin()).as("check saturdayMin").isEqualTo(actual.getSaturdayMin()))
            .satisfies(e -> assertThat(e.getSaturdayMax()).as("check saturdayMax").isEqualTo(actual.getSaturdayMax()))
            .satisfies(e -> assertThat(e.getSundayMin()).as("check sundayMin").isEqualTo(actual.getSundayMin()))
            .satisfies(e -> assertThat(e.getSundayMax()).as("check sundayMax").isEqualTo(actual.getSundayMax()))
            .satisfies(e -> assertThat(e.getComments()).as("check comments").isEqualTo(actual.getComments()))
            .satisfies(e -> assertThat(e.getLeadAddress()).as("check leadAddress").isEqualTo(actual.getLeadAddress()))
            .satisfies(e -> assertThat(e.getLeadComm()).as("check leadComm").isEqualTo(actual.getLeadComm()))
            .satisfies(e -> assertThat(e.getLeadAddressDet()).as("check leadAddressDet").isEqualTo(actual.getLeadAddressDet()))
            .satisfies(e -> assertThat(e.getLaptopId()).as("check laptopId").isEqualTo(actual.getLaptopId()))
            .satisfies(e -> assertThat(e.getHoursPerWeek()).as("check hoursPerWeek").isEqualTo(actual.getHoursPerWeek()))
            .satisfies(e -> assertThat(e.getEmpStatus()).as("check empStatus").isEqualTo(actual.getEmpStatus()))
            .satisfies(e -> assertThat(e.getPasswordLastChange()).as("check passwordLastChange").isEqualTo(actual.getPasswordLastChange()))
            .satisfies(e -> assertThat(e.getPasswordChangeDays()).as("check passwordChangeDays").isEqualTo(actual.getPasswordChangeDays()))
            .satisfies(e -> assertThat(e.getGraceLogin()).as("check graceLogin").isEqualTo(actual.getGraceLogin()))
            .satisfies(e -> assertThat(e.getSrepGroup()).as("check srepGroup").isEqualTo(actual.getSrepGroup()))
            .satisfies(e -> assertThat(e.getDefaultReportgroup()).as("check defaultReportgroup").isEqualTo(actual.getDefaultReportgroup()))
            .satisfies(e -> assertThat(e.getAuthorizerYn()).as("check authorizerYn").isEqualTo(actual.getAuthorizerYn()))
            .satisfies(
                e ->
                    assertThat(e.getAuthorizerInactiveDate())
                        .as("check authorizerInactiveDate")
                        .isEqualTo(actual.getAuthorizerInactiveDate())
            )
            .satisfies(e -> assertThat(e.getSfaName()).as("check sfaName").isEqualTo(actual.getSfaName()))
            .satisfies(e -> assertThat(e.getLoginCro()).as("check loginCro").isEqualTo(actual.getLoginCro()))
            .satisfies(e -> assertThat(e.getAuthorizerRateCode()).as("check authorizerRateCode").isEqualTo(actual.getAuthorizerRateCode()))
            .satisfies(e -> assertThat(e.getLoginDomain()).as("check loginDomain").isEqualTo(actual.getLoginDomain()))
            .satisfies(
                e -> assertThat(e.getReceiveBroadcastMsg()).as("check receiveBroadcastMsg").isEqualTo(actual.getReceiveBroadcastMsg())
            )
            .satisfies(e -> assertThat(e.getDefaultMfnResort()).as("check defaultMfnResort").isEqualTo(actual.getDefaultMfnResort()))
            .satisfies(e -> assertThat(e.getMfnUserType()).as("check mfnUserType").isEqualTo(actual.getMfnUserType()))
            .satisfies(
                e -> assertThat(e.getForcePasswordChangeYn()).as("check forcePasswordChangeYn").isEqualTo(actual.getForcePasswordChangeYn())
            )
            .satisfies(e -> assertThat(e.getAccountLockedOutYn()).as("check accountLockedOutYn").isEqualTo(actual.getAccountLockedOutYn()))
            .satisfies(
                e -> assertThat(e.getPreventAccountLockout()).as("check preventAccountLockout").isEqualTo(actual.getPreventAccountLockout())
            )
            .satisfies(e -> assertThat(e.getLockoutDate()).as("check lockoutDate").isEqualTo(actual.getLockoutDate()))
            .satisfies(e -> assertThat(e.getAccessPms()).as("check accessPms").isEqualTo(actual.getAccessPms()))
            .satisfies(e -> assertThat(e.getAccessSc()).as("check accessSc").isEqualTo(actual.getAccessSc()))
            .satisfies(e -> assertThat(e.getAccessConfig()).as("check accessConfig").isEqualTo(actual.getAccessConfig()))
            .satisfies(e -> assertThat(e.getAccessEod()).as("check accessEod").isEqualTo(actual.getAccessEod()))
            .satisfies(e -> assertThat(e.getAccessUtil()).as("check accessUtil").isEqualTo(actual.getAccessUtil()))
            .satisfies(e -> assertThat(e.getAccessOrs()).as("check accessOrs").isEqualTo(actual.getAccessOrs()))
            .satisfies(e -> assertThat(e.getAccessSfa()).as("check accessSfa").isEqualTo(actual.getAccessSfa()))
            .satisfies(e -> assertThat(e.getAccessOcis()).as("check accessOcis").isEqualTo(actual.getAccessOcis()))
            .satisfies(e -> assertThat(e.getAccessOcm()).as("check accessOcm").isEqualTo(actual.getAccessOcm()))
            .satisfies(e -> assertThat(e.getAccessOxi()).as("check accessOxi").isEqualTo(actual.getAccessOxi()))
            .satisfies(e -> assertThat(e.getAccessOxihub()).as("check accessOxihub").isEqualTo(actual.getAccessOxihub()))
            .satisfies(e -> assertThat(e.getChainCode()).as("check chainCode").isEqualTo(actual.getChainCode()))
            .satisfies(e -> assertThat(e.getAppUserUniq()).as("check appUserUniq").isEqualTo(actual.getAppUserUniq()))
            .satisfies(e -> assertThat(e.getMaxDaysAfterCo()).as("check maxDaysAfterCo").isEqualTo(actual.getMaxDaysAfterCo()))
            .satisfies(e -> assertThat(e.getUserGroupAdmin()).as("check userGroupAdmin").isEqualTo(actual.getUserGroupAdmin()))
            .satisfies(e -> assertThat(e.getAccessOrms()).as("check accessOrms").isEqualTo(actual.getAccessOrms()))
            .satisfies(e -> assertThat(e.getAccessObi()).as("check accessObi").isEqualTo(actual.getAccessObi()))
            .satisfies(e -> assertThat(e.getSrepCode()).as("check srepCode").isEqualTo(actual.getSrepCode()))
            .satisfies(e -> assertThat(e.getLoginAttempts()).as("check loginAttempts").isEqualTo(actual.getLoginAttempts()))
            .satisfies(e -> assertThat(e.getPropertyAccessYn()).as("check propertyAccessYn").isEqualTo(actual.getPropertyAccessYn()))
            .satisfies(e -> assertThat(e.getAccessScbi()).as("check accessScbi").isEqualTo(actual.getAccessScbi()))
            .satisfies(e -> assertThat(e.getTimezoneRegion()).as("check timezoneRegion").isEqualTo(actual.getTimezoneRegion()))
            .satisfies(e -> assertThat(e.getAccessOcrm()).as("check accessOcrm").isEqualTo(actual.getAccessOcrm()))
            .satisfies(
                e ->
                    assertThat(e.getEmployeeIncentiveNumber())
                        .as("check employeeIncentiveNumber")
                        .isEqualTo(actual.getEmployeeIncentiveNumber())
            )
            .satisfies(
                e ->
                    assertThat(e.getServiceRequestAlertsYn())
                        .as("check serviceRequestAlertsYn")
                        .isEqualTo(actual.getServiceRequestAlertsYn())
            )
            .satisfies(e -> assertThat(e.getMobileAlertsYn()).as("check mobileAlertsYn").isEqualTo(actual.getMobileAlertsYn()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertApplicationUserUpdatableRelationshipsEquals(ApplicationUser expected, ApplicationUser actual) {}
}
