package com.sbm.mc.domain;

import static com.sbm.mc.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class ResortRoomCategoryAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertResortRoomCategoryAllPropertiesEquals(ResortRoomCategory expected, ResortRoomCategory actual) {
        assertResortRoomCategoryAutoGeneratedPropertiesEquals(expected, actual);
        assertResortRoomCategoryAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertResortRoomCategoryAllUpdatablePropertiesEquals(ResortRoomCategory expected, ResortRoomCategory actual) {
        assertResortRoomCategoryUpdatableFieldsEquals(expected, actual);
        assertResortRoomCategoryUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertResortRoomCategoryAutoGeneratedPropertiesEquals(ResortRoomCategory expected, ResortRoomCategory actual) {
        assertThat(expected)
            .as("Verify ResortRoomCategory auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertResortRoomCategoryUpdatableFieldsEquals(ResortRoomCategory expected, ResortRoomCategory actual) {
        assertThat(expected)
            .as("Verify ResortRoomCategory relevant properties")
            .satisfies(e -> assertThat(e.getResort()).as("check resort").isEqualTo(actual.getResort()))
            .satisfies(e -> assertThat(e.getRoomCategory()).as("check roomCategory").isEqualTo(actual.getRoomCategory()))
            .satisfies(e -> assertThat(e.getRoomClass()).as("check roomClass").isEqualTo(actual.getRoomClass()))
            .satisfies(e -> assertThat(e.getNumberRooms()).as("check numberRooms").isEqualTo(actual.getNumberRooms()))
            .satisfies(e -> assertThat(e.getShortDescription()).as("check shortDescription").isEqualTo(actual.getShortDescription()))
            .satisfies(e -> assertThat(e.getLongDescription()).as("check longDescription").isEqualTo(actual.getLongDescription()))
            .satisfies(e -> assertThat(e.getCompiled()).as("check compiled").isEqualTo(actual.getCompiled()))
            .satisfies(e -> assertThat(e.getPsuedoRoomType()).as("check psuedoRoomType").isEqualTo(actual.getPsuedoRoomType()))
            .satisfies(e -> assertThat(e.getActiveDate()).as("check activeDate").isEqualTo(actual.getActiveDate()))
            .satisfies(e -> assertThat(e.getInactiveDate()).as("check inactiveDate").isEqualTo(actual.getInactiveDate()))
            .satisfies(e -> assertThat(e.getReplacesCategory()).as("check replacesCategory").isEqualTo(actual.getReplacesCategory()))
            .satisfies(e -> assertThat(e.getOrderBy()).as("check orderBy").isEqualTo(actual.getOrderBy()))
            .satisfies(e -> assertThat(e.getMaxOccupancy()).as("check maxOccupancy").isEqualTo(actual.getMaxOccupancy()))
            .satisfies(e -> assertThat(e.getMaxRollaways()).as("check maxRollaways").isEqualTo(actual.getMaxRollaways()))
            .satisfies(e -> assertThat(e.getRateCategory()).as("check rateCategory").isEqualTo(actual.getRateCategory()))
            .satisfies(e -> assertThat(e.getLabel()).as("check label").isEqualTo(actual.getLabel()))
            .satisfies(e -> assertThat(e.getGenericFlag()).as("check genericFlag").isEqualTo(actual.getGenericFlag()))
            .satisfies(e -> assertThat(e.getSuiteYn()).as("check suiteYn").isEqualTo(actual.getSuiteYn()))
            .satisfies(e -> assertThat(e.getMeetingroomYn()).as("check meetingroomYn").isEqualTo(actual.getMeetingroomYn()))
            .satisfies(e -> assertThat(e.getInsertUser()).as("check insertUser").isEqualTo(actual.getInsertUser()))
            .satisfies(e -> assertThat(e.getInsertDate()).as("check insertDate").isEqualTo(actual.getInsertDate()))
            .satisfies(e -> assertThat(e.getUpdateUser()).as("check updateUser").isEqualTo(actual.getUpdateUser()))
            .satisfies(e -> assertThat(e.getUpdateDate()).as("check updateDate").isEqualTo(actual.getUpdateDate()))
            .satisfies(e -> assertThat(e.getRateCode()).as("check rateCode").isEqualTo(actual.getRateCode()))
            .satisfies(
                e ->
                    assertThat(e.getRateAmount())
                        .as("check rateAmount")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getRateAmount())
            )
            .satisfies(e -> assertThat(e.getDefOccupancy()).as("check defOccupancy").isEqualTo(actual.getDefOccupancy()))
            .satisfies(e -> assertThat(e.getImageId()).as("check imageId").isEqualTo(actual.getImageId()))
            .satisfies(e -> assertThat(e.getPseudoYn()).as("check pseudoYn").isEqualTo(actual.getPseudoYn()))
            .satisfies(e -> assertThat(e.getSendToInterfaceYn()).as("check sendToInterfaceYn").isEqualTo(actual.getSendToInterfaceYn()))
            .satisfies(e -> assertThat(e.getYieldableYn()).as("check yieldableYn").isEqualTo(actual.getYieldableYn()))
            .satisfies(e -> assertThat(e.getYieldCategory()).as("check yieldCategory").isEqualTo(actual.getYieldCategory()))
            .satisfies(e -> assertThat(e.getHousekeeping()).as("check housekeeping").isEqualTo(actual.getHousekeeping()))
            .satisfies(e -> assertThat(e.getCanDeleteYn()).as("check canDeleteYn").isEqualTo(actual.getCanDeleteYn()))
            .satisfies(e -> assertThat(e.getRoominfoUrl()).as("check roominfoUrl").isEqualTo(actual.getRoominfoUrl()))
            .satisfies(e -> assertThat(e.getOwnerYn()).as("check ownerYn").isEqualTo(actual.getOwnerYn()))
            .satisfies(e -> assertThat(e.getAutoIncludeYn()).as("check autoIncludeYn").isEqualTo(actual.getAutoIncludeYn()))
            .satisfies(e -> assertThat(e.getInitialRoundUp()).as("check initialRoundUp").isEqualTo(actual.getInitialRoundUp()))
            .satisfies(e -> assertThat(e.getIncrements()).as("check increments").isEqualTo(actual.getIncrements()))
            .satisfies(e -> assertThat(e.getRotationGroup()).as("check rotationGroup").isEqualTo(actual.getRotationGroup()))
            .satisfies(e -> assertThat(e.getSalesFlag()).as("check salesFlag").isEqualTo(actual.getSalesFlag()))
            .satisfies(e -> assertThat(e.getAutoRoomAssignYn()).as("check autoRoomAssignYn").isEqualTo(actual.getAutoRoomAssignYn()))
            .satisfies(e -> assertThat(e.getUpsellYn()).as("check upsellYn").isEqualTo(actual.getUpsellYn()))
            .satisfies(e -> assertThat(e.getOrmsUpsellRank()).as("check ormsUpsellRank").isEqualTo(actual.getOrmsUpsellRank()))
            .satisfies(
                e ->
                    assertThat(e.getOrmsUpsellAmt())
                        .as("check ormsUpsellAmt")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getOrmsUpsellAmt())
            )
            .satisfies(e -> assertThat(e.getOrmsDrxtraAdult()).as("check ormsDrxtraAdult").isEqualTo(actual.getOrmsDrxtraAdult()))
            .satisfies(e -> assertThat(e.getOrmsDrxtraChild()).as("check ormsDrxtraChild").isEqualTo(actual.getOrmsDrxtraChild()))
            .satisfies(e -> assertThat(e.getMaxOccupancyAdults()).as("check maxOccupancyAdults").isEqualTo(actual.getMaxOccupancyAdults()))
            .satisfies(
                e -> assertThat(e.getMaxOccupancyChildren()).as("check maxOccupancyChildren").isEqualTo(actual.getMaxOccupancyChildren())
            )
            .satisfies(e -> assertThat(e.getRoomPool()).as("check roomPool").isEqualTo(actual.getRoomPool()))
            .satisfies(e -> assertThat(e.getMemberAwardRoomGrp()).as("check memberAwardRoomGrp").isEqualTo(actual.getMemberAwardRoomGrp()))
            .satisfies(e -> assertThat(e.getOrmsDrxtra2ndAdult()).as("check ormsDrxtra2ndAdult").isEqualTo(actual.getOrmsDrxtra2ndAdult()))
            .satisfies(e -> assertThat(e.getOrmsDrtier1()).as("check ormsDrtier1").isEqualTo(actual.getOrmsDrtier1()))
            .satisfies(e -> assertThat(e.getOrmsDrtier2()).as("check ormsDrtier2").isEqualTo(actual.getOrmsDrtier2()))
            .satisfies(e -> assertThat(e.getOrmsDrtier3()).as("check ormsDrtier3").isEqualTo(actual.getOrmsDrtier3()))
            .satisfies(e -> assertThat(e.getAutoCheckinYn()).as("check autoCheckinYn").isEqualTo(actual.getAutoCheckinYn()))
            .satisfies(
                e ->
                    assertThat(e.getRateFloor()).as("check rateFloor").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getRateFloor())
            )
            .satisfies(e -> assertThat(e.getMaxFixBedOccupancy()).as("check maxFixBedOccupancy").isEqualTo(actual.getMaxFixBedOccupancy()))
            .satisfies(e -> assertThat(e.getMaintenanceYn()).as("check maintenanceYn").isEqualTo(actual.getMaintenanceYn()))
            .satisfies(e -> assertThat(e.getSmokingPreference()).as("check smokingPreference").isEqualTo(actual.getSmokingPreference()))
            .satisfies(e -> assertThat(e.getsLabel()).as("check sLabel").isEqualTo(actual.getsLabel()))
            .satisfies(e -> assertThat(e.getsBedtype()).as("check sBedtype").isEqualTo(actual.getsBedtype()))
            .satisfies(e -> assertThat(e.getSellThruRuleYn()).as("check sellThruRuleYn").isEqualTo(actual.getSellThruRuleYn()))
            .satisfies(e -> assertThat(e.getCrsDescription()).as("check crsDescription").isEqualTo(actual.getCrsDescription()))
            .satisfies(e -> assertThat(e.getEvisitorFacilityId()).as("check evisitorFacilityId").isEqualTo(actual.getEvisitorFacilityId()))
            .satisfies(e -> assertThat(e.getMinOccupancy()).as("check minOccupancy").isEqualTo(actual.getMinOccupancy()))
            .satisfies(e -> assertThat(e.getAccessibleYn()).as("check accessibleYn").isEqualTo(actual.getAccessibleYn()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertResortRoomCategoryUpdatableRelationshipsEquals(ResortRoomCategory expected, ResortRoomCategory actual) {}
}
