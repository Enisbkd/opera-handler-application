package com.sbm.mc.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ResortOriginsOfBookingAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertResortOriginsOfBookingAllPropertiesEquals(ResortOriginsOfBooking expected, ResortOriginsOfBooking actual) {
        assertResortOriginsOfBookingAutoGeneratedPropertiesEquals(expected, actual);
        assertResortOriginsOfBookingAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertResortOriginsOfBookingAllUpdatablePropertiesEquals(
        ResortOriginsOfBooking expected,
        ResortOriginsOfBooking actual
    ) {
        assertResortOriginsOfBookingUpdatableFieldsEquals(expected, actual);
        assertResortOriginsOfBookingUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertResortOriginsOfBookingAutoGeneratedPropertiesEquals(
        ResortOriginsOfBooking expected,
        ResortOriginsOfBooking actual
    ) {
        assertThat(expected)
            .as("Verify ResortOriginsOfBooking auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertResortOriginsOfBookingUpdatableFieldsEquals(ResortOriginsOfBooking expected, ResortOriginsOfBooking actual) {
        assertThat(expected)
            .as("Verify ResortOriginsOfBooking relevant properties")
            .satisfies(e -> assertThat(e.getResort()).as("check resort").isEqualTo(actual.getResort()))
            .satisfies(e -> assertThat(e.getSourceCode()).as("check sourceCode").isEqualTo(actual.getSourceCode()))
            .satisfies(e -> assertThat(e.getParentSourceCode()).as("check parentSourceCode").isEqualTo(actual.getParentSourceCode()))
            .satisfies(e -> assertThat(e.getDescription()).as("check description").isEqualTo(actual.getDescription()))
            .satisfies(e -> assertThat(e.getInsertUser()).as("check insertUser").isEqualTo(actual.getInsertUser()))
            .satisfies(e -> assertThat(e.getInsertDate()).as("check insertDate").isEqualTo(actual.getInsertDate()))
            .satisfies(e -> assertThat(e.getUpdateUser()).as("check updateUser").isEqualTo(actual.getUpdateUser()))
            .satisfies(e -> assertThat(e.getUpdateDate()).as("check updateDate").isEqualTo(actual.getUpdateDate()))
            .satisfies(e -> assertThat(e.getInactiveDate()).as("check inactiveDate").isEqualTo(actual.getInactiveDate()))
            .satisfies(e -> assertThat(e.getSellSequence()).as("check sellSequence").isEqualTo(actual.getSellSequence()))
            .satisfies(e -> assertThat(e.getScOrderby()).as("check scOrderby").isEqualTo(actual.getScOrderby()))
            .satisfies(e -> assertThat(e.getInternetSalesYn()).as("check internetSalesYn").isEqualTo(actual.getInternetSalesYn()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertResortOriginsOfBookingUpdatableRelationshipsEquals(
        ResortOriginsOfBooking expected,
        ResortOriginsOfBooking actual
    ) {}
}
