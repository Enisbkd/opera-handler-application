package com.sbm.mc.domain;

import static com.sbm.mc.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class ReservationStatDailyAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReservationStatDailyAllPropertiesEquals(ReservationStatDaily expected, ReservationStatDaily actual) {
        assertReservationStatDailyAutoGeneratedPropertiesEquals(expected, actual);
        assertReservationStatDailyAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReservationStatDailyAllUpdatablePropertiesEquals(ReservationStatDaily expected, ReservationStatDaily actual) {
        assertReservationStatDailyUpdatableFieldsEquals(expected, actual);
        assertReservationStatDailyUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReservationStatDailyAutoGeneratedPropertiesEquals(ReservationStatDaily expected, ReservationStatDaily actual) {
        assertThat(expected)
            .as("Verify ReservationStatDaily auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReservationStatDailyUpdatableFieldsEquals(ReservationStatDaily expected, ReservationStatDaily actual) {
        assertThat(expected)
            .as("Verify ReservationStatDaily relevant properties")
            .satisfies(e -> assertThat(e.getResort()).as("check resort").isEqualTo(actual.getResort()))
            .satisfies(e -> assertThat(e.getBusinessDate()).as("check businessDate").isEqualTo(actual.getBusinessDate()))
            .satisfies(e -> assertThat(e.getNameId()).as("check nameId").isEqualTo(actual.getNameId()))
            .satisfies(e -> assertThat(e.getRateCode()).as("check rateCode").isEqualTo(actual.getRateCode()))
            .satisfies(e -> assertThat(e.getSourceCode()).as("check sourceCode").isEqualTo(actual.getSourceCode()))
            .satisfies(e -> assertThat(e.getMarketCode()).as("check marketCode").isEqualTo(actual.getMarketCode()))
            .satisfies(e -> assertThat(e.getRoomCategory()).as("check roomCategory").isEqualTo(actual.getRoomCategory()))
            .satisfies(e -> assertThat(e.getCompanyId()).as("check companyId").isEqualTo(actual.getCompanyId()))
            .satisfies(e -> assertThat(e.getAgentId()).as("check agentId").isEqualTo(actual.getAgentId()))
            .satisfies(e -> assertThat(e.getGroupId()).as("check groupId").isEqualTo(actual.getGroupId()))
            .satisfies(e -> assertThat(e.getSourceProfId()).as("check sourceProfId").isEqualTo(actual.getSourceProfId()))
            .satisfies(e -> assertThat(e.getResvStatus()).as("check resvStatus").isEqualTo(actual.getResvStatus()))
            .satisfies(e -> assertThat(e.getTruncBeginDate()).as("check truncBeginDate").isEqualTo(actual.getTruncBeginDate()))
            .satisfies(e -> assertThat(e.getTruncEndDate()).as("check truncEndDate").isEqualTo(actual.getTruncEndDate()))
            .satisfies(e -> assertThat(e.getResvNameId()).as("check resvNameId").isEqualTo(actual.getResvNameId()))
            .satisfies(e -> assertThat(e.getQuantity()).as("check quantity").isEqualTo(actual.getQuantity()))
            .satisfies(e -> assertThat(e.getPhysicalQuantity()).as("check physicalQuantity").isEqualTo(actual.getPhysicalQuantity()))
            .satisfies(e -> assertThat(e.getDueOutYn()).as("check dueOutYn").isEqualTo(actual.getDueOutYn()))
            .satisfies(e -> assertThat(e.getRoomResvStatus()).as("check roomResvStatus").isEqualTo(actual.getRoomResvStatus()))
            .satisfies(e -> assertThat(e.getAdults()).as("check adults").isEqualTo(actual.getAdults()))
            .satisfies(e -> assertThat(e.getChildren()).as("check children").isEqualTo(actual.getChildren()))
            .satisfies(e -> assertThat(e.getRoomAdults()).as("check roomAdults").isEqualTo(actual.getRoomAdults()))
            .satisfies(e -> assertThat(e.getRoomChildren()).as("check roomChildren").isEqualTo(actual.getRoomChildren()))
            .satisfies(e -> assertThat(e.getPrimaryYn()).as("check primaryYn").isEqualTo(actual.getPrimaryYn()))
            .satisfies(e -> assertThat(e.getAllotmentHeaderId()).as("check allotmentHeaderId").isEqualTo(actual.getAllotmentHeaderId()))
            .satisfies(
                e ->
                    assertThat(e.getRoomRevenue())
                        .as("check roomRevenue")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getRoomRevenue())
            )
            .satisfies(
                e ->
                    assertThat(e.getFoodRevenue())
                        .as("check foodRevenue")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getFoodRevenue())
            )
            .satisfies(
                e ->
                    assertThat(e.getPackageRoomRevenue())
                        .as("check packageRoomRevenue")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getPackageRoomRevenue())
            )
            .satisfies(
                e ->
                    assertThat(e.getPackageFoodRevenue())
                        .as("check packageFoodRevenue")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getPackageFoodRevenue())
            )
            .satisfies(
                e ->
                    assertThat(e.getTotalRoomTax())
                        .as("check totalRoomTax")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getTotalRoomTax())
            )
            .satisfies(
                e ->
                    assertThat(e.getTotalFoodTax())
                        .as("check totalFoodTax")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getTotalFoodTax())
            )
            .satisfies(
                e ->
                    assertThat(e.getTotalPackageRevenue())
                        .as("check totalPackageRevenue")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getTotalPackageRevenue())
            )
            .satisfies(
                e ->
                    assertThat(e.getTotalRevenue())
                        .as("check totalRevenue")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getTotalRevenue())
            )
            .satisfies(
                e -> assertThat(e.getTotalTax()).as("check totalTax").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getTotalTax())
            )
            .satisfies(e -> assertThat(e.getInsertDate()).as("check insertDate").isEqualTo(actual.getInsertDate()))
            .satisfies(e -> assertThat(e.getOriginalEndDate()).as("check originalEndDate").isEqualTo(actual.getOriginalEndDate()))
            .satisfies(e -> assertThat(e.getWalkinYn()).as("check walkinYn").isEqualTo(actual.getWalkinYn()))
            .satisfies(e -> assertThat(e.getReservationDate()).as("check reservationDate").isEqualTo(actual.getReservationDate()))
            .satisfies(e -> assertThat(e.getRoomClass()).as("check roomClass").isEqualTo(actual.getRoomClass()))
            .satisfies(e -> assertThat(e.getVipStatus()).as("check vipStatus").isEqualTo(actual.getVipStatus()))
            .satisfies(e -> assertThat(e.getCancellationDate()).as("check cancellationDate").isEqualTo(actual.getCancellationDate()))
            .satisfies(e -> assertThat(e.getBirthDate()).as("check birthDate").isEqualTo(actual.getBirthDate()))
            .satisfies(e -> assertThat(e.getRoom()).as("check room").isEqualTo(actual.getRoom()))
            .satisfies(e -> assertThat(e.getMembershipId()).as("check membershipId").isEqualTo(actual.getMembershipId()))
            .satisfies(e -> assertThat(e.getContactId()).as("check contactId").isEqualTo(actual.getContactId()))
            .satisfies(e -> assertThat(e.getRateCategory()).as("check rateCategory").isEqualTo(actual.getRateCategory()))
            .satisfies(e -> assertThat(e.getMarketMainGroup()).as("check marketMainGroup").isEqualTo(actual.getMarketMainGroup()))
            .satisfies(e -> assertThat(e.getSourceMainGroup()).as("check sourceMainGroup").isEqualTo(actual.getSourceMainGroup()))
            .satisfies(e -> assertThat(e.getChannel()).as("check channel").isEqualTo(actual.getChannel()))
            .satisfies(e -> assertThat(e.getCountry()).as("check country").isEqualTo(actual.getCountry()))
            .satisfies(e -> assertThat(e.getRegionCode()).as("check regionCode").isEqualTo(actual.getRegionCode()))
            .satisfies(e -> assertThat(e.getNationality()).as("check nationality").isEqualTo(actual.getNationality()))
            .satisfies(e -> assertThat(e.getPsuedoRoomYn()).as("check psuedoRoomYn").isEqualTo(actual.getPsuedoRoomYn()))
            .satisfies(e -> assertThat(e.getAdultsTaxFree()).as("check adultsTaxFree").isEqualTo(actual.getAdultsTaxFree()))
            .satisfies(e -> assertThat(e.getChildrenTaxFree()).as("check childrenTaxFree").isEqualTo(actual.getChildrenTaxFree()))
            .satisfies(e -> assertThat(e.getStayRooms()).as("check stayRooms").isEqualTo(actual.getStayRooms()))
            .satisfies(e -> assertThat(e.getStayPersons()).as("check stayPersons").isEqualTo(actual.getStayPersons()))
            .satisfies(e -> assertThat(e.getStayAdults()).as("check stayAdults").isEqualTo(actual.getStayAdults()))
            .satisfies(e -> assertThat(e.getStayChildren()).as("check stayChildren").isEqualTo(actual.getStayChildren()))
            .satisfies(e -> assertThat(e.getArrRooms()).as("check arrRooms").isEqualTo(actual.getArrRooms()))
            .satisfies(e -> assertThat(e.getArrPersons()).as("check arrPersons").isEqualTo(actual.getArrPersons()))
            .satisfies(e -> assertThat(e.getDepRooms()).as("check depRooms").isEqualTo(actual.getDepRooms()))
            .satisfies(e -> assertThat(e.getDepPersons()).as("check depPersons").isEqualTo(actual.getDepPersons()))
            .satisfies(e -> assertThat(e.getDayUseRooms()).as("check dayUseRooms").isEqualTo(actual.getDayUseRooms()))
            .satisfies(e -> assertThat(e.getDayUsePersons()).as("check dayUsePersons").isEqualTo(actual.getDayUsePersons()))
            .satisfies(e -> assertThat(e.getCancelledRooms()).as("check cancelledRooms").isEqualTo(actual.getCancelledRooms()))
            .satisfies(e -> assertThat(e.getCancelledPersons()).as("check cancelledPersons").isEqualTo(actual.getCancelledPersons()))
            .satisfies(e -> assertThat(e.getNoShowRooms()).as("check noShowRooms").isEqualTo(actual.getNoShowRooms()))
            .satisfies(e -> assertThat(e.getNoShowPersons()).as("check noShowPersons").isEqualTo(actual.getNoShowPersons()))
            .satisfies(e -> assertThat(e.getSingleOccupancy()).as("check singleOccupancy").isEqualTo(actual.getSingleOccupancy()))
            .satisfies(e -> assertThat(e.getMultipleOccupancy()).as("check multipleOccupancy").isEqualTo(actual.getMultipleOccupancy()))
            .satisfies(e -> assertThat(e.getCribs()).as("check cribs").isEqualTo(actual.getCribs()))
            .satisfies(e -> assertThat(e.getExtraBeds()).as("check extraBeds").isEqualTo(actual.getExtraBeds()))
            .satisfies(
                e ->
                    assertThat(e.getOtherRevenue())
                        .as("check otherRevenue")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getOtherRevenue())
            )
            .satisfies(
                e ->
                    assertThat(e.getPackageOtherRevenue())
                        .as("check packageOtherRevenue")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getPackageOtherRevenue())
            )
            .satisfies(
                e ->
                    assertThat(e.getTotalOtherTax())
                        .as("check totalOtherTax")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getTotalOtherTax())
            )
            .satisfies(e -> assertThat(e.getCountryMainGroup()).as("check countryMainGroup").isEqualTo(actual.getCountryMainGroup()))
            .satisfies(e -> assertThat(e.getState()).as("check state").isEqualTo(actual.getState()))
            .satisfies(e -> assertThat(e.getFiscalRegionCode()).as("check fiscalRegionCode").isEqualTo(actual.getFiscalRegionCode()))
            .satisfies(
                e ->
                    assertThat(e.getNonRevenue())
                        .as("check nonRevenue")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getNonRevenue())
            )
            .satisfies(
                e ->
                    assertThat(e.getPackageNonRevenue())
                        .as("check packageNonRevenue")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getPackageNonRevenue())
            )
            .satisfies(
                e ->
                    assertThat(e.getTotalNonRevenueTax())
                        .as("check totalNonRevenueTax")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getTotalNonRevenueTax())
            )
            .satisfies(
                e ->
                    assertThat(e.getPrRoomRevenue())
                        .as("check prRoomRevenue")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getPrRoomRevenue())
            )
            .satisfies(
                e ->
                    assertThat(e.getPrFoodRevenue())
                        .as("check prFoodRevenue")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getPrFoodRevenue())
            )
            .satisfies(
                e ->
                    assertThat(e.getPrPackageRoomRevenue())
                        .as("check prPackageRoomRevenue")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getPrPackageRoomRevenue())
            )
            .satisfies(
                e ->
                    assertThat(e.getPrPackageFoodRevenue())
                        .as("check prPackageFoodRevenue")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getPrPackageFoodRevenue())
            )
            .satisfies(
                e ->
                    assertThat(e.getPrTotalRoomTax())
                        .as("check prTotalRoomTax")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getPrTotalRoomTax())
            )
            .satisfies(
                e ->
                    assertThat(e.getPrTotalFoodTax())
                        .as("check prTotalFoodTax")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getPrTotalFoodTax())
            )
            .satisfies(
                e ->
                    assertThat(e.getPrTotalPackageRevenue())
                        .as("check prTotalPackageRevenue")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getPrTotalPackageRevenue())
            )
            .satisfies(
                e ->
                    assertThat(e.getPrTotalRevenue())
                        .as("check prTotalRevenue")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getPrTotalRevenue())
            )
            .satisfies(
                e ->
                    assertThat(e.getPrTotalTax())
                        .as("check prTotalTax")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getPrTotalTax())
            )
            .satisfies(
                e ->
                    assertThat(e.getPrOtherRevenue())
                        .as("check prOtherRevenue")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getPrOtherRevenue())
            )
            .satisfies(
                e ->
                    assertThat(e.getPrPackageOtherRevenue())
                        .as("check prPackageOtherRevenue")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getPrPackageOtherRevenue())
            )
            .satisfies(
                e ->
                    assertThat(e.getPrTotalOtherTax())
                        .as("check prTotalOtherTax")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getPrTotalOtherTax())
            )
            .satisfies(
                e ->
                    assertThat(e.getPrNonRevenue())
                        .as("check prNonRevenue")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getPrNonRevenue())
            )
            .satisfies(
                e ->
                    assertThat(e.getPrPackageNonRevenue())
                        .as("check prPackageNonRevenue")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getPrPackageNonRevenue())
            )
            .satisfies(
                e ->
                    assertThat(e.getPrTotalNonRevenueTax())
                        .as("check prTotalNonRevenueTax")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getPrTotalNonRevenueTax())
            )
            .satisfies(e -> assertThat(e.getNights()).as("check nights").isEqualTo(actual.getNights()))
            .satisfies(e -> assertThat(e.getNoOfStays()).as("check noOfStays").isEqualTo(actual.getNoOfStays()))
            .satisfies(e -> assertThat(e.getReservationNights()).as("check reservationNights").isEqualTo(actual.getReservationNights()))
            .satisfies(
                e -> assertThat(e.getReservationArrivals()).as("check reservationArrivals").isEqualTo(actual.getReservationArrivals())
            )
            .satisfies(
                e -> assertThat(e.getReservationNoOfStays()).as("check reservationNoOfStays").isEqualTo(actual.getReservationNoOfStays())
            )
            .satisfies(e -> assertThat(e.getDayUseReservations()).as("check dayUseReservations").isEqualTo(actual.getDayUseReservations()))
            .satisfies(
                e -> assertThat(e.getCancelledReservations()).as("check cancelledReservations").isEqualTo(actual.getCancelledReservations())
            )
            .satisfies(e -> assertThat(e.getNoShowReservations()).as("check noShowReservations").isEqualTo(actual.getNoShowReservations()))
            .satisfies(e -> assertThat(e.getCity()).as("check city").isEqualTo(actual.getCity()))
            .satisfies(e -> assertThat(e.getZipCode()).as("check zipCode").isEqualTo(actual.getZipCode()))
            .satisfies(e -> assertThat(e.getDistrict()).as("check district").isEqualTo(actual.getDistrict()))
            .satisfies(e -> assertThat(e.getCashRoomNts()).as("check cashRoomNts").isEqualTo(actual.getCashRoomNts()))
            .satisfies(e -> assertThat(e.getCompRoomNts()).as("check compRoomNts").isEqualTo(actual.getCompRoomNts()))
            .satisfies(
                e ->
                    assertThat(e.getCashRoomRevenue())
                        .as("check cashRoomRevenue")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getCashRoomRevenue())
            )
            .satisfies(
                e ->
                    assertThat(e.getCompRoomRevenue())
                        .as("check compRoomRevenue")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getCompRoomRevenue())
            )
            .satisfies(e -> assertThat(e.getResInsertSource()).as("check resInsertSource").isEqualTo(actual.getResInsertSource()))
            .satisfies(
                e -> assertThat(e.getResInsertSourceType()).as("check resInsertSourceType").isEqualTo(actual.getResInsertSourceType())
            )
            .satisfies(e -> assertThat(e.getChildren1()).as("check children1").isEqualTo(actual.getChildren1()))
            .satisfies(e -> assertThat(e.getChildren2()).as("check children2").isEqualTo(actual.getChildren2()))
            .satisfies(e -> assertThat(e.getChildren3()).as("check children3").isEqualTo(actual.getChildren3()))
            .satisfies(e -> assertThat(e.getChildren4()).as("check children4").isEqualTo(actual.getChildren4()))
            .satisfies(e -> assertThat(e.getChildren5()).as("check children5").isEqualTo(actual.getChildren5()))
            .satisfies(e -> assertThat(e.getFfMembershipType()).as("check ffMembershipType").isEqualTo(actual.getFfMembershipType()))
            .satisfies(e -> assertThat(e.getFgMembershipType()).as("check fgMembershipType").isEqualTo(actual.getFgMembershipType()))
            .satisfies(e -> assertThat(e.getPromotionCode()).as("check promotionCode").isEqualTo(actual.getPromotionCode()))
            .satisfies(e -> assertThat(e.getOwnerFfFlag()).as("check ownerFfFlag").isEqualTo(actual.getOwnerFfFlag()))
            .satisfies(e -> assertThat(e.getOwnerRentalFlag()).as("check ownerRentalFlag").isEqualTo(actual.getOwnerRentalFlag()))
            .satisfies(
                e -> assertThat(e.getCentralCurrencyCode()).as("check centralCurrencyCode").isEqualTo(actual.getCentralCurrencyCode())
            )
            .satisfies(
                e ->
                    assertThat(e.getCentralExchangeRate())
                        .as("check centralExchangeRate")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getCentralExchangeRate())
            )
            .satisfies(e -> assertThat(e.getBookedRoomCategory()).as("check bookedRoomCategory").isEqualTo(actual.getBookedRoomCategory()))
            .satisfies(
                e -> assertThat(e.getBusinessDateCreated()).as("check businessDateCreated").isEqualTo(actual.getBusinessDateCreated())
            )
            .satisfies(
                e ->
                    assertThat(e.getRateAmount())
                        .as("check rateAmount")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getRateAmount())
            )
            .satisfies(e -> assertThat(e.getParentCompanyId()).as("check parentCompanyId").isEqualTo(actual.getParentCompanyId()))
            .satisfies(e -> assertThat(e.getHouseUseYn()).as("check houseUseYn").isEqualTo(actual.getHouseUseYn()))
            .satisfies(e -> assertThat(e.getComplimentaryYn()).as("check complimentaryYn").isEqualTo(actual.getComplimentaryYn()))
            .satisfies(e -> assertThat(e.getBiResvNameId()).as("check biResvNameId").isEqualTo(actual.getBiResvNameId()))
            .satisfies(
                e ->
                    assertThat(e.getAdvFoodRevenue())
                        .as("check advFoodRevenue")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getAdvFoodRevenue())
            )
            .satisfies(
                e ->
                    assertThat(e.getAdvNonRevenue())
                        .as("check advNonRevenue")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getAdvNonRevenue())
            )
            .satisfies(
                e ->
                    assertThat(e.getAdvOtherRevenue())
                        .as("check advOtherRevenue")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getAdvOtherRevenue())
            )
            .satisfies(
                e ->
                    assertThat(e.getAdvRoomRevenue())
                        .as("check advRoomRevenue")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getAdvRoomRevenue())
            )
            .satisfies(
                e ->
                    assertThat(e.getAdvTotalFoodTax())
                        .as("check advTotalFoodTax")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getAdvTotalFoodTax())
            )
            .satisfies(
                e ->
                    assertThat(e.getAdvTotalNonRevenueTax())
                        .as("check advTotalNonRevenueTax")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getAdvTotalNonRevenueTax())
            )
            .satisfies(
                e ->
                    assertThat(e.getAdvTotalOtherTax())
                        .as("check advTotalOtherTax")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getAdvTotalOtherTax())
            )
            .satisfies(
                e ->
                    assertThat(e.getAdvTotalRevenue())
                        .as("check advTotalRevenue")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getAdvTotalRevenue())
            )
            .satisfies(
                e ->
                    assertThat(e.getAdvTotalRoomTax())
                        .as("check advTotalRoomTax")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getAdvTotalRoomTax())
            )
            .satisfies(
                e ->
                    assertThat(e.getAdvTotalTax())
                        .as("check advTotalTax")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getAdvTotalTax())
            )
            .satisfies(
                e ->
                    assertThat(e.getPrAdvFoodRevenue())
                        .as("check prAdvFoodRevenue")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getPrAdvFoodRevenue())
            )
            .satisfies(
                e ->
                    assertThat(e.getPrAdvNonRevenue())
                        .as("check prAdvNonRevenue")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getPrAdvNonRevenue())
            )
            .satisfies(
                e ->
                    assertThat(e.getPrAdvOtherRevenue())
                        .as("check prAdvOtherRevenue")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getPrAdvOtherRevenue())
            )
            .satisfies(
                e ->
                    assertThat(e.getPrAdvRoomRevenue())
                        .as("check prAdvRoomRevenue")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getPrAdvRoomRevenue())
            )
            .satisfies(
                e ->
                    assertThat(e.getPrAdvTotalFoodTax())
                        .as("check prAdvTotalFoodTax")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getPrAdvTotalFoodTax())
            )
            .satisfies(
                e ->
                    assertThat(e.getPrAdvTotalNonRevenueTax())
                        .as("check prAdvTotalNonRevenueTax")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getPrAdvTotalNonRevenueTax())
            )
            .satisfies(
                e ->
                    assertThat(e.getPrAdvTotalOtherTax())
                        .as("check prAdvTotalOtherTax")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getPrAdvTotalOtherTax())
            )
            .satisfies(
                e ->
                    assertThat(e.getPrAdvTotalRevenue())
                        .as("check prAdvTotalRevenue")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getPrAdvTotalRevenue())
            )
            .satisfies(
                e ->
                    assertThat(e.getPrAdvTotalRoomTax())
                        .as("check prAdvTotalRoomTax")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getPrAdvTotalRoomTax())
            )
            .satisfies(
                e ->
                    assertThat(e.getPrAdvTotalTax())
                        .as("check prAdvTotalTax")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getPrAdvTotalTax())
            )
            .satisfies(
                e ->
                    assertThat(e.getUpsoldRevenue())
                        .as("check upsoldRevenue")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getUpsoldRevenue())
            )
            .satisfies(
                e ->
                    assertThat(e.getFlgdRoomRevenue())
                        .as("check flgdRoomRevenue")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getFlgdRoomRevenue())
            )
            .satisfies(
                e ->
                    assertThat(e.getFlgdFoodRevenue())
                        .as("check flgdFoodRevenue")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getFlgdFoodRevenue())
            )
            .satisfies(
                e ->
                    assertThat(e.getFlgdNonRevenue())
                        .as("check flgdNonRevenue")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getFlgdNonRevenue())
            )
            .satisfies(
                e ->
                    assertThat(e.getFlgdOtherRevenue())
                        .as("check flgdOtherRevenue")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getFlgdOtherRevenue())
            )
            .satisfies(
                e ->
                    assertThat(e.getFlgdTotalRoomTax())
                        .as("check flgdTotalRoomTax")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getFlgdTotalRoomTax())
            )
            .satisfies(
                e ->
                    assertThat(e.getFlgdTotalFoodTax())
                        .as("check flgdTotalFoodTax")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getFlgdTotalFoodTax())
            )
            .satisfies(
                e ->
                    assertThat(e.getFlgdTotalNonRevenueTax())
                        .as("check flgdTotalNonRevenueTax")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getFlgdTotalNonRevenueTax())
            )
            .satisfies(
                e ->
                    assertThat(e.getFlgdTotalOtherTax())
                        .as("check flgdTotalOtherTax")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getFlgdTotalOtherTax())
            )
            .satisfies(
                e ->
                    assertThat(e.getFlgdTotalRevenue())
                        .as("check flgdTotalRevenue")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getFlgdTotalRevenue())
            )
            .satisfies(
                e ->
                    assertThat(e.getFlgdTotalTax())
                        .as("check flgdTotalTax")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getFlgdTotalTax())
            )
            .satisfies(e -> assertThat(e.getContactYn()).as("check contactYn").isEqualTo(actual.getContactYn()))
            .satisfies(e -> assertThat(e.getExtendedStayTier()).as("check extendedStayTier").isEqualTo(actual.getExtendedStayTier()))
            .satisfies(
                e ->
                    assertThat(e.getRsAdvTotalRevenue())
                        .as("check rsAdvTotalRevenue")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getRsAdvTotalRevenue())
            )
            .satisfies(
                e ->
                    assertThat(e.getRsAdvRoomRevenue())
                        .as("check rsAdvRoomRevenue")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getRsAdvRoomRevenue())
            )
            .satisfies(
                e ->
                    assertThat(e.getRsAdvFoodRevenue())
                        .as("check rsAdvFoodRevenue")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getRsAdvFoodRevenue())
            )
            .satisfies(
                e ->
                    assertThat(e.getRsAdvOtherRevenue())
                        .as("check rsAdvOtherRevenue")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getRsAdvOtherRevenue())
            )
            .satisfies(
                e ->
                    assertThat(e.getRsAdvNonRevenue())
                        .as("check rsAdvNonRevenue")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getRsAdvNonRevenue())
            )
            .satisfies(
                e ->
                    assertThat(e.getRsAdvTotalTax())
                        .as("check rsAdvTotalTax")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getRsAdvTotalTax())
            )
            .satisfies(
                e ->
                    assertThat(e.getRsAdvRoomTax())
                        .as("check rsAdvRoomTax")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getRsAdvRoomTax())
            )
            .satisfies(
                e ->
                    assertThat(e.getRsAdvFoodTax())
                        .as("check rsAdvFoodTax")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getRsAdvFoodTax())
            )
            .satisfies(
                e ->
                    assertThat(e.getRsAdvOtherTax())
                        .as("check rsAdvOtherTax")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getRsAdvOtherTax())
            )
            .satisfies(
                e ->
                    assertThat(e.getRsAdvNonRevenueTax())
                        .as("check rsAdvNonRevenueTax")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getRsAdvNonRevenueTax())
            )
            .satisfies(e -> assertThat(e.getUpdateDate()).as("check updateDate").isEqualTo(actual.getUpdateDate()))
            .satisfies(e -> assertThat(e.getGuid()).as("check guid").isEqualTo(actual.getGuid()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReservationStatDailyUpdatableRelationshipsEquals(ReservationStatDaily expected, ReservationStatDaily actual) {}
}
