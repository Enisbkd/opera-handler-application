package com.sbm.mc.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class NameAddressAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNameAddressAllPropertiesEquals(NameAddress expected, NameAddress actual) {
        assertNameAddressAutoGeneratedPropertiesEquals(expected, actual);
        assertNameAddressAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNameAddressAllUpdatablePropertiesEquals(NameAddress expected, NameAddress actual) {
        assertNameAddressUpdatableFieldsEquals(expected, actual);
        assertNameAddressUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNameAddressAutoGeneratedPropertiesEquals(NameAddress expected, NameAddress actual) {
        assertThat(expected)
            .as("Verify NameAddress auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNameAddressUpdatableFieldsEquals(NameAddress expected, NameAddress actual) {
        assertThat(expected)
            .as("Verify NameAddress relevant properties")
            .satisfies(e -> assertThat(e.getAddressId()).as("check addressId").isEqualTo(actual.getAddressId()))
            .satisfies(e -> assertThat(e.getAddressType()).as("check addressType").isEqualTo(actual.getAddressType()))
            .satisfies(e -> assertThat(e.getAddress1()).as("check address1").isEqualTo(actual.getAddress1()))
            .satisfies(e -> assertThat(e.getAddress2()).as("check address2").isEqualTo(actual.getAddress2()))
            .satisfies(e -> assertThat(e.getAddress3()).as("check address3").isEqualTo(actual.getAddress3()))
            .satisfies(e -> assertThat(e.getAddress4()).as("check address4").isEqualTo(actual.getAddress4()))
            .satisfies(e -> assertThat(e.getBarcode()).as("check barcode").isEqualTo(actual.getBarcode()))
            .satisfies(e -> assertThat(e.getBeginDate()).as("check beginDate").isEqualTo(actual.getBeginDate()))
            .satisfies(e -> assertThat(e.getChainCode()).as("check chainCode").isEqualTo(actual.getChainCode()))
            .satisfies(e -> assertThat(e.getCity()).as("check city").isEqualTo(actual.getCity()))
            .satisfies(e -> assertThat(e.getCityExt()).as("check cityExt").isEqualTo(actual.getCityExt()))
            .satisfies(e -> assertThat(e.getCleansedDatetime()).as("check cleansedDatetime").isEqualTo(actual.getCleansedDatetime()))
            .satisfies(e -> assertThat(e.getCleansedErrormsg()).as("check cleansedErrormsg").isEqualTo(actual.getCleansedErrormsg()))
            .satisfies(
                e -> assertThat(e.getCleansedMatchstatus()).as("check cleansedMatchstatus").isEqualTo(actual.getCleansedMatchstatus())
            )
            .satisfies(e -> assertThat(e.getCleansedStatus()).as("check cleansedStatus").isEqualTo(actual.getCleansedStatus()))
            .satisfies(
                e ->
                    assertThat(e.getCleansedValidationstatus())
                        .as("check cleansedValidationstatus")
                        .isEqualTo(actual.getCleansedValidationstatus())
            )
            .satisfies(e -> assertThat(e.getCountry()).as("check country").isEqualTo(actual.getCountry()))
            .satisfies(e -> assertThat(e.getEndDate()).as("check endDate").isEqualTo(actual.getEndDate()))
            .satisfies(e -> assertThat(e.getForeignCountry()).as("check foreignCountry").isEqualTo(actual.getForeignCountry()))
            .satisfies(e -> assertThat(e.getInCareOf()).as("check inCareOf").isEqualTo(actual.getInCareOf()))
            .satisfies(e -> assertThat(e.getInactiveDate()).as("check inactiveDate").isEqualTo(actual.getInactiveDate()))
            .satisfies(e -> assertThat(e.getInsertDate()).as("check insertDate").isEqualTo(actual.getInsertDate()))
            .satisfies(e -> assertThat(e.getInsertUser()).as("check insertUser").isEqualTo(actual.getInsertUser()))
            .satisfies(e -> assertThat(e.getLanguageCode()).as("check languageCode").isEqualTo(actual.getLanguageCode()))
            .satisfies(e -> assertThat(e.getLaptopChange()).as("check laptopChange").isEqualTo(actual.getLaptopChange()))
            .satisfies(e -> assertThat(e.getLastUpdatedResort()).as("check lastUpdatedResort").isEqualTo(actual.getLastUpdatedResort()))
            .satisfies(e -> assertThat(e.getNameId()).as("check nameId").isEqualTo(actual.getNameId()))
            .satisfies(e -> assertThat(e.getPrimaryYn()).as("check primaryYn").isEqualTo(actual.getPrimaryYn()))
            .satisfies(e -> assertThat(e.getProvince()).as("check province").isEqualTo(actual.getProvince()))
            .satisfies(e -> assertThat(e.getState()).as("check state").isEqualTo(actual.getState()))
            .satisfies(e -> assertThat(e.getUpdateDate()).as("check updateDate").isEqualTo(actual.getUpdateDate()))
            .satisfies(e -> assertThat(e.getUpdateUser()).as("check updateUser").isEqualTo(actual.getUpdateUser()))
            .satisfies(e -> assertThat(e.getZipCode()).as("check zipCode").isEqualTo(actual.getZipCode()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNameAddressUpdatableRelationshipsEquals(NameAddress expected, NameAddress actual) {}
}
