package com.sbm.mc.domain;

import static com.sbm.mc.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class FinancialTransactionsAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFinancialTransactionsAllPropertiesEquals(FinancialTransactions expected, FinancialTransactions actual) {
        assertFinancialTransactionsAutoGeneratedPropertiesEquals(expected, actual);
        assertFinancialTransactionsAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFinancialTransactionsAllUpdatablePropertiesEquals(
        FinancialTransactions expected,
        FinancialTransactions actual
    ) {
        assertFinancialTransactionsUpdatableFieldsEquals(expected, actual);
        assertFinancialTransactionsUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFinancialTransactionsAutoGeneratedPropertiesEquals(
        FinancialTransactions expected,
        FinancialTransactions actual
    ) {
        assertThat(expected)
            .as("Verify FinancialTransactions auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFinancialTransactionsUpdatableFieldsEquals(FinancialTransactions expected, FinancialTransactions actual) {
        assertThat(expected)
            .as("Verify FinancialTransactions relevant properties")
            .satisfies(e -> assertThat(e.getTrxNo()).as("check trxNo").isEqualTo(actual.getTrxNo()))
            .satisfies(e -> assertThat(e.getFtSubtype()).as("check ftSubtype").isEqualTo(actual.getFtSubtype()))
            .satisfies(e -> assertThat(e.getInvoiceCloseDate()).as("check invoiceCloseDate").isEqualTo(actual.getInvoiceCloseDate()))
            .satisfies(e -> assertThat(e.getArTransferDate()).as("check arTransferDate").isEqualTo(actual.getArTransferDate()))
            .satisfies(e -> assertThat(e.getTrxDate()).as("check trxDate").isEqualTo(actual.getTrxDate()))
            .satisfies(e -> assertThat(e.getBusinessDate()).as("check businessDate").isEqualTo(actual.getBusinessDate()))
            .satisfies(e -> assertThat(e.getInsertDate()).as("check insertDate").isEqualTo(actual.getInsertDate()))
            .satisfies(e -> assertThat(e.getUpdateDate()).as("check updateDate").isEqualTo(actual.getUpdateDate()))
            .satisfies(e -> assertThat(e.getTrnsActivityDate()).as("check trnsActivityDate").isEqualTo(actual.getTrnsActivityDate()))
            .satisfies(e -> assertThat(e.getApprovalDate()).as("check approvalDate").isEqualTo(actual.getApprovalDate()))
            .satisfies(e -> assertThat(e.getPostingDate()).as("check postingDate").isEqualTo(actual.getPostingDate()))
            .satisfies(e -> assertThat(e.getExchangeDate()).as("check exchangeDate").isEqualTo(actual.getExchangeDate()))
            .satisfies(e -> assertThat(e.getRoutingDate()).as("check routingDate").isEqualTo(actual.getRoutingDate()))
            .satisfies(e -> assertThat(e.getEffectiveDate()).as("check effectiveDate").isEqualTo(actual.getEffectiveDate()))
            .satisfies(e -> assertThat(e.getCustomChargeDate()).as("check customChargeDate").isEqualTo(actual.getCustomChargeDate()))
            .satisfies(e -> assertThat(e.getRecptNo()).as("check recptNo").isEqualTo(actual.getRecptNo()))
            .satisfies(e -> assertThat(e.getTrxNoAdjust()).as("check trxNoAdjust").isEqualTo(actual.getTrxNoAdjust()))
            .satisfies(e -> assertThat(e.getTrxNoAddedBy()).as("check trxNoAddedBy").isEqualTo(actual.getTrxNoAddedBy()))
            .satisfies(
                e -> assertThat(e.getTrxNoAgainstPackage()).as("check trxNoAgainstPackage").isEqualTo(actual.getTrxNoAgainstPackage())
            )
            .satisfies(e -> assertThat(e.getTrxNoHeader()).as("check trxNoHeader").isEqualTo(actual.getTrxNoHeader()))
            .satisfies(e -> assertThat(e.getArNumber()).as("check arNumber").isEqualTo(actual.getArNumber()))
            .satisfies(e -> assertThat(e.getResvNameId()).as("check resvNameId").isEqualTo(actual.getResvNameId()))
            .satisfies(e -> assertThat(e.getCashierId()).as("check cashierId").isEqualTo(actual.getCashierId()))
            .satisfies(e -> assertThat(e.getCreditCardId()).as("check creditCardId").isEqualTo(actual.getCreditCardId()))
            .satisfies(e -> assertThat(e.getNameId()).as("check nameId").isEqualTo(actual.getNameId()))
            .satisfies(e -> assertThat(e.getTranActionId()).as("check tranActionId").isEqualTo(actual.getTranActionId()))
            .satisfies(e -> assertThat(e.getFinDmlSeqNo()).as("check finDmlSeqNo").isEqualTo(actual.getFinDmlSeqNo()))
            .satisfies(e -> assertThat(e.getRoutingInstrnId()).as("check routingInstrnId").isEqualTo(actual.getRoutingInstrnId()))
            .satisfies(e -> assertThat(e.getFromResvId()).as("check fromResvId").isEqualTo(actual.getFromResvId()))
            .satisfies(e -> assertThat(e.getGenCashierId()).as("check genCashierId").isEqualTo(actual.getGenCashierId()))
            .satisfies(e -> assertThat(e.getFolioNo()).as("check folioNo").isEqualTo(actual.getFolioNo()))
            .satisfies(e -> assertThat(e.getInvoiceNo()).as("check invoiceNo").isEqualTo(actual.getInvoiceNo()))
            .satisfies(e -> assertThat(e.getInsertUser()).as("check insertUser").isEqualTo(actual.getInsertUser()))
            .satisfies(e -> assertThat(e.getUpdateUser()).as("check updateUser").isEqualTo(actual.getUpdateUser()))
            .satisfies(e -> assertThat(e.getArrangementId()).as("check arrangementId").isEqualTo(actual.getArrangementId()))
            .satisfies(e -> assertThat(e.getTrnsFromAcct()).as("check trnsFromAcct").isEqualTo(actual.getTrnsFromAcct()))
            .satisfies(e -> assertThat(e.getTrnsToAcct()).as("check trnsToAcct").isEqualTo(actual.getTrnsToAcct()))
            .satisfies(e -> assertThat(e.getBillNo()).as("check billNo").isEqualTo(actual.getBillNo()))
            .satisfies(e -> assertThat(e.getRevisionNo()).as("check revisionNo").isEqualTo(actual.getRevisionNo()))
            .satisfies(e -> assertThat(e.getResvDepositId()).as("check resvDepositId").isEqualTo(actual.getResvDepositId()))
            .satisfies(e -> assertThat(e.getLinkTrxNo()).as("check linkTrxNo").isEqualTo(actual.getLinkTrxNo()))
            .satisfies(e -> assertThat(e.getAuthorizerId()).as("check authorizerId").isEqualTo(actual.getAuthorizerId()))
            .satisfies(e -> assertThat(e.getCompLinkTrxNo()).as("check compLinkTrxNo").isEqualTo(actual.getCompLinkTrxNo()))
            .satisfies(
                e -> assertThat(e.getMtrxNoAgainstPackage()).as("check mtrxNoAgainstPackage").isEqualTo(actual.getMtrxNoAgainstPackage())
            )
            .satisfies(e -> assertThat(e.getForexCommPerc()).as("check forexCommPerc").isEqualTo(actual.getForexCommPerc()))
            .satisfies(e -> assertThat(e.getForexCommAmount()).as("check forexCommAmount").isEqualTo(actual.getForexCommAmount()))
            .satisfies(e -> assertThat(e.getArticleId()).as("check articleId").isEqualTo(actual.getArticleId()))
            .satisfies(e -> assertThat(e.getToResvNameId()).as("check toResvNameId").isEqualTo(actual.getToResvNameId()))
            .satisfies(e -> assertThat(e.getRoomNts()).as("check roomNts").isEqualTo(actual.getRoomNts()))
            .satisfies(e -> assertThat(e.getOrgArLedDebit()).as("check orgArLedDebit").isEqualTo(actual.getOrgArLedDebit()))
            .satisfies(e -> assertThat(e.getClosureNo()).as("check closureNo").isEqualTo(actual.getClosureNo()))
            .satisfies(e -> assertThat(e.getOriginalResvNameId()).as("check originalResvNameId").isEqualTo(actual.getOriginalResvNameId()))
            .satisfies(e -> assertThat(e.getOrgBillNo()).as("check orgBillNo").isEqualTo(actual.getOrgBillNo()))
            .satisfies(e -> assertThat(e.getMembershipId()).as("check membershipId").isEqualTo(actual.getMembershipId()))
            .satisfies(e -> assertThat(e.getInstallments()).as("check installments").isEqualTo(actual.getInstallments()))
            .satisfies(e -> assertThat(e.getContractGuestDebit()).as("check contractGuestDebit").isEqualTo(actual.getContractGuestDebit()))
            .satisfies(
                e -> assertThat(e.getContractGuestCredit()).as("check contractGuestCredit").isEqualTo(actual.getContractGuestCredit())
            )
            .satisfies(e -> assertThat(e.getContractNetAmount()).as("check contractNetAmount").isEqualTo(actual.getContractNetAmount()))
            .satisfies(
                e -> assertThat(e.getContractGrossAmount()).as("check contractGrossAmount").isEqualTo(actual.getContractGrossAmount())
            )
            .satisfies(e -> assertThat(e.getPostitNo()).as("check postitNo").isEqualTo(actual.getPostitNo()))
            .satisfies(e -> assertThat(e.getCcTrxFeeAmount()).as("check ccTrxFeeAmount").isEqualTo(actual.getCcTrxFeeAmount()))
            .satisfies(e -> assertThat(e.getChangeDue()).as("check changeDue").isEqualTo(actual.getChangeDue()))
            .satisfies(
                e -> assertThat(e.getPostingSourceNameId()).as("check postingSourceNameId").isEqualTo(actual.getPostingSourceNameId())
            )
            .satisfies(e -> assertThat(e.getBonusCheckId()).as("check bonusCheckId").isEqualTo(actual.getBonusCheckId()))
            .satisfies(e -> assertThat(e.getRoundLinkTrxno()).as("check roundLinkTrxno").isEqualTo(actual.getRoundLinkTrxno()))
            .satisfies(
                e -> assertThat(e.getReversePaymentTrxNo()).as("check reversePaymentTrxNo").isEqualTo(actual.getReversePaymentTrxNo())
            )
            .satisfies(
                e -> assertThat(e.getElectronicVoucherNo()).as("check electronicVoucherNo").isEqualTo(actual.getElectronicVoucherNo())
            )
            .satisfies(
                e -> assertThat(e.getThresholdDiversionId()).as("check thresholdDiversionId").isEqualTo(actual.getThresholdDiversionId())
            )
            .satisfies(e -> assertThat(e.getThresholdEntityQty()).as("check thresholdEntityQty").isEqualTo(actual.getThresholdEntityQty()))
            .satisfies(e -> assertThat(e.getTrxNoSplit()).as("check trxNoSplit").isEqualTo(actual.getTrxNoSplit()))
            .satisfies(e -> assertThat(e.getExchDiffTrxNo()).as("check exchDiffTrxNo").isEqualTo(actual.getExchDiffTrxNo()))
            .satisfies(e -> assertThat(e.getAssociatedTrxNo()).as("check associatedTrxNo").isEqualTo(actual.getAssociatedTrxNo()))
            .satisfies(e -> assertThat(e.getTaxRate()).as("check taxRate").isEqualTo(actual.getTaxRate()))
            .satisfies(e -> assertThat(e.getPropChargeId()).as("check propChargeId").isEqualTo(actual.getPropChargeId()))
            .satisfies(
                e -> assertThat(e.getQuantity()).as("check quantity").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getQuantity())
            )
            .satisfies(
                e ->
                    assertThat(e.getNetAmount()).as("check netAmount").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getNetAmount())
            )
            .satisfies(
                e ->
                    assertThat(e.getGrossAmount())
                        .as("check grossAmount")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getGrossAmount())
            )
            .satisfies(
                e ->
                    assertThat(e.getCashierOpeningBalance())
                        .as("check cashierOpeningBalance")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getCashierOpeningBalance())
            )
            .satisfies(
                e ->
                    assertThat(e.getPricePerUnit())
                        .as("check pricePerUnit")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getPricePerUnit())
            )
            .satisfies(
                e ->
                    assertThat(e.getTrxAmount()).as("check trxAmount").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getTrxAmount())
            )
            .satisfies(
                e ->
                    assertThat(e.getPostedAmount())
                        .as("check postedAmount")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getPostedAmount())
            )
            .satisfies(
                e ->
                    assertThat(e.getGuestAccountCredit())
                        .as("check guestAccountCredit")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getGuestAccountCredit())
            )
            .satisfies(
                e ->
                    assertThat(e.getExchangeRate())
                        .as("check exchangeRate")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getExchangeRate())
            )
            .satisfies(
                e ->
                    assertThat(e.getGuestAccountDebit())
                        .as("check guestAccountDebit")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getGuestAccountDebit())
            )
            .satisfies(
                e ->
                    assertThat(e.getCashierCredit())
                        .as("check cashierCredit")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getCashierCredit())
            )
            .satisfies(
                e ->
                    assertThat(e.getCashierDebit())
                        .as("check cashierDebit")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getCashierDebit())
            )
            .satisfies(
                e ->
                    assertThat(e.getPackageCredit())
                        .as("check packageCredit")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getPackageCredit())
            )
            .satisfies(
                e ->
                    assertThat(e.getPackageDebit())
                        .as("check packageDebit")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getPackageDebit())
            )
            .satisfies(
                e ->
                    assertThat(e.getDepLedCredit())
                        .as("check depLedCredit")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getDepLedCredit())
            )
            .satisfies(
                e ->
                    assertThat(e.getDepLedDebit())
                        .as("check depLedDebit")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getDepLedDebit())
            )
            .satisfies(
                e ->
                    assertThat(e.getRevenueAmt())
                        .as("check revenueAmt")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getRevenueAmt())
            )
            .satisfies(
                e ->
                    assertThat(e.getArLedCredit())
                        .as("check arLedCredit")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getArLedCredit())
            )
            .satisfies(
                e ->
                    assertThat(e.getArLedDebit())
                        .as("check arLedDebit")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getArLedDebit())
            )
            .satisfies(
                e ->
                    assertThat(e.getEuroExchangeRate())
                        .as("check euroExchangeRate")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getEuroExchangeRate())
            )
            .satisfies(
                e -> assertThat(e.getInhDebit()).as("check inhDebit").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getInhDebit())
            )
            .satisfies(
                e ->
                    assertThat(e.getInhCredit()).as("check inhCredit").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getInhCredit())
            )
            .satisfies(
                e ->
                    assertThat(e.getPackageAllowance())
                        .as("check packageAllowance")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getPackageAllowance())
            )
            .satisfies(
                e ->
                    assertThat(e.getParallelGuestCredit())
                        .as("check parallelGuestCredit")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getParallelGuestCredit())
            )
            .satisfies(
                e ->
                    assertThat(e.getParallelGuestDebit())
                        .as("check parallelGuestDebit")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getParallelGuestDebit())
            )
            .satisfies(
                e ->
                    assertThat(e.getParallelNetAmount())
                        .as("check parallelNetAmount")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getParallelNetAmount())
            )
            .satisfies(
                e ->
                    assertThat(e.getParallelGrossAmount())
                        .as("check parallelGrossAmount")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getParallelGrossAmount())
            )
            .satisfies(
                e ->
                    assertThat(e.getOrgPostedAmount())
                        .as("check orgPostedAmount")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getOrgPostedAmount())
            )
            .satisfies(
                e ->
                    assertThat(e.getRoomNtsEffective())
                        .as("check roomNtsEffective")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getRoomNtsEffective())
            )
            .satisfies(
                e ->
                    assertThat(e.getPaymentSurchargeAmt())
                        .as("check paymentSurchargeAmt")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getPaymentSurchargeAmt())
            )
            .satisfies(e -> assertThat(e.getFolioView()).as("check folioView").isEqualTo(actual.getFolioView()))
            .satisfies(e -> assertThat(e.getTaxInclusiveYn()).as("check taxInclusiveYn").isEqualTo(actual.getTaxInclusiveYn()))
            .satisfies(e -> assertThat(e.getDeferredYn()).as("check deferredYn").isEqualTo(actual.getDeferredYn()))
            .satisfies(e -> assertThat(e.getIndAdjustmentYn()).as("check indAdjustmentYn").isEqualTo(actual.getIndAdjustmentYn()))
            .satisfies(e -> assertThat(e.getFixedChargesYn()).as("check fixedChargesYn").isEqualTo(actual.getFixedChargesYn()))
            .satisfies(e -> assertThat(e.getTaCommissionableYn()).as("check taCommissionableYn").isEqualTo(actual.getTaCommissionableYn()))
            .satisfies(e -> assertThat(e.getTaxGeneratedYn()).as("check taxGeneratedYn").isEqualTo(actual.getTaxGeneratedYn()))
            .satisfies(e -> assertThat(e.getCompressedYn()).as("check compressedYn").isEqualTo(actual.getCompressedYn()))
            .satisfies(e -> assertThat(e.getDisplayYn()).as("check displayYn").isEqualTo(actual.getDisplayYn()))
            .satisfies(e -> assertThat(e.getCollAgentPostingYn()).as("check collAgentPostingYn").isEqualTo(actual.getCollAgentPostingYn()))
            .satisfies(e -> assertThat(e.getFiscalTrxCodeType()).as("check fiscalTrxCodeType").isEqualTo(actual.getFiscalTrxCodeType()))
            .satisfies(e -> assertThat(e.getDeferredTaxesYn()).as("check deferredTaxesYn").isEqualTo(actual.getDeferredTaxesYn()))
            .satisfies(e -> assertThat(e.getAdvancedGenerateYn()).as("check advancedGenerateYn").isEqualTo(actual.getAdvancedGenerateYn()))
            .satisfies(e -> assertThat(e.getForexType()).as("check forexType").isEqualTo(actual.getForexType()))
            .satisfies(e -> assertThat(e.getTaCommissionNetYn()).as("check taCommissionNetYn").isEqualTo(actual.getTaCommissionNetYn()))
            .satisfies(
                e -> assertThat(e.getSourceCommissionNetYn()).as("check sourceCommissionNetYn").isEqualTo(actual.getSourceCommissionNetYn())
            )
            .satisfies(e -> assertThat(e.getSettlementFlag()).as("check settlementFlag").isEqualTo(actual.getSettlementFlag()))
            .satisfies(e -> assertThat(e.getAccTypeFlag()).as("check accTypeFlag").isEqualTo(actual.getAccTypeFlag()))
            .satisfies(e -> assertThat(e.getProfitLossFlag()).as("check profitLossFlag").isEqualTo(actual.getProfitLossFlag()))
            .satisfies(e -> assertThat(e.getProformaYn()).as("check proformaYn").isEqualTo(actual.getProformaYn()))
            .satisfies(e -> assertThat(e.getHoldYn()).as("check holdYn").isEqualTo(actual.getHoldYn()))
            .satisfies(
                e -> assertThat(e.getExchangeDifferenceYn()).as("check exchangeDifferenceYn").isEqualTo(actual.getExchangeDifferenceYn())
            )
            .satisfies(e -> assertThat(e.getCalcPointsYn()).as("check calcPointsYn").isEqualTo(actual.getCalcPointsYn()))
            .satisfies(e -> assertThat(e.getArChargeTransferYn()).as("check arChargeTransferYn").isEqualTo(actual.getArChargeTransferYn()))
            .satisfies(e -> assertThat(e.getProcessed8300Yn()).as("check processed8300Yn").isEqualTo(actual.getProcessed8300Yn()))
            .satisfies(e -> assertThat(e.getAsbFlag()).as("check asbFlag").isEqualTo(actual.getAsbFlag()))
            .satisfies(e -> assertThat(e.getPostitYn()).as("check postitYn").isEqualTo(actual.getPostitYn()))
            .satisfies(e -> assertThat(e.getAutoSettleYn()).as("check autoSettleYn").isEqualTo(actual.getAutoSettleYn()))
            .satisfies(e -> assertThat(e.getDepTaxTransferedYn()).as("check depTaxTransferedYn").isEqualTo(actual.getDepTaxTransferedYn()))
            .satisfies(e -> assertThat(e.getAutoCreditbillYn()).as("check autoCreditbillYn").isEqualTo(actual.getAutoCreditbillYn()))
            .satisfies(
                e ->
                    assertThat(e.getAsbOnlyPostTaxesOnceYn())
                        .as("check asbOnlyPostTaxesOnceYn")
                        .isEqualTo(actual.getAsbOnlyPostTaxesOnceYn())
            )
            .satisfies(e -> assertThat(e.getRoundFactorYn()).as("check roundFactorYn").isEqualTo(actual.getRoundFactorYn()))
            .satisfies(e -> assertThat(e.getDepPostingFlag()).as("check depPostingFlag").isEqualTo(actual.getDepPostingFlag()))
            .satisfies(e -> assertThat(e.getCorrectionYn()).as("check correctionYn").isEqualTo(actual.getCorrectionYn()))
            .satisfies(e -> assertThat(e.getRoutedYn()).as("check routedYn").isEqualTo(actual.getRoutedYn()))
            .satisfies(e -> assertThat(e.getUpsellChargeYn()).as("check upsellChargeYn").isEqualTo(actual.getUpsellChargeYn()))
            .satisfies(e -> assertThat(e.getAdvanceBillYn()).as("check advanceBillYn").isEqualTo(actual.getAdvanceBillYn()))
            .satisfies(
                e -> assertThat(e.getAdvanceBillReversedYn()).as("check advanceBillReversedYn").isEqualTo(actual.getAdvanceBillReversedYn())
            )
            .satisfies(e -> assertThat(e.getIncTaxDeductedYn()).as("check incTaxDeductedYn").isEqualTo(actual.getIncTaxDeductedYn()))
            .satisfies(e -> assertThat(e.getGpAwardCancelledYn()).as("check gpAwardCancelledYn").isEqualTo(actual.getGpAwardCancelledYn()))
            .satisfies(
                e ->
                    assertThat(e.getServiceRecoveryAdjustmentYn())
                        .as("check serviceRecoveryAdjustmentYn")
                        .isEqualTo(actual.getServiceRecoveryAdjustmentYn())
            )
            .satisfies(e -> assertThat(e.getSplitType()).as("check splitType").isEqualTo(actual.getSplitType()))
            .satisfies(e -> assertThat(e.getBucketRedempYn()).as("check bucketRedempYn").isEqualTo(actual.getBucketRedempYn()))
            .satisfies(e -> assertThat(e.getVatOffsetYn()).as("check vatOffsetYn").isEqualTo(actual.getVatOffsetYn()))
            .satisfies(e -> assertThat(e.getForexTaxYn()).as("check forexTaxYn").isEqualTo(actual.getForexTaxYn()))
            .satisfies(e -> assertThat(e.getStampDutyYn()).as("check stampDutyYn").isEqualTo(actual.getStampDutyYn()))
            .satisfies(e -> assertThat(e.getCovers()).as("check covers").isEqualTo(actual.getCovers()))
            .satisfies(
                e -> assertThat(e.getAdvGenerateAdjustment()).as("check advGenerateAdjustment").isEqualTo(actual.getAdvGenerateAdjustment())
            )
            .satisfies(e -> assertThat(e.getExpInvoiceType()).as("check expInvoiceType").isEqualTo(actual.getExpInvoiceType()))
            .satisfies(e -> assertThat(e.getFolioType()).as("check folioType").isEqualTo(actual.getFolioType()))
            .satisfies(e -> assertThat(e.getOrgFolioType()).as("check orgFolioType").isEqualTo(actual.getOrgFolioType()))
            .satisfies(e -> assertThat(e.getInvoiceType()).as("check invoiceType").isEqualTo(actual.getInvoiceType()))
            .satisfies(e -> assertThat(e.getArState()).as("check arState").isEqualTo(actual.getArState()))
            .satisfies(e -> assertThat(e.getExchangeType()).as("check exchangeType").isEqualTo(actual.getExchangeType()))
            .satisfies(e -> assertThat(e.getRecptType()).as("check recptType").isEqualTo(actual.getRecptType()))
            .satisfies(e -> assertThat(e.getRoomClass()).as("check roomClass").isEqualTo(actual.getRoomClass()))
            .satisfies(e -> assertThat(e.getResort()).as("check resort").isEqualTo(actual.getResort()))
            .satisfies(e -> assertThat(e.getTcGroup()).as("check tcGroup").isEqualTo(actual.getTcGroup()))
            .satisfies(e -> assertThat(e.getTcSubgroup()).as("check tcSubgroup").isEqualTo(actual.getTcSubgroup()))
            .satisfies(e -> assertThat(e.getTrxCode()).as("check trxCode").isEqualTo(actual.getTrxCode()))
            .satisfies(e -> assertThat(e.getRoom()).as("check room").isEqualTo(actual.getRoom()))
            .satisfies(e -> assertThat(e.getTclCode1()).as("check tclCode1").isEqualTo(actual.getTclCode1()))
            .satisfies(e -> assertThat(e.getCurrency()).as("check currency").isEqualTo(actual.getCurrency()))
            .satisfies(e -> assertThat(e.getFtGeneratedType()).as("check ftGeneratedType").isEqualTo(actual.getFtGeneratedType()))
            .satisfies(e -> assertThat(e.getTclCode2()).as("check tclCode2").isEqualTo(actual.getTclCode2()))
            .satisfies(e -> assertThat(e.getMarketCode()).as("check marketCode").isEqualTo(actual.getMarketCode()))
            .satisfies(e -> assertThat(e.getSourceCode()).as("check sourceCode").isEqualTo(actual.getSourceCode()))
            .satisfies(e -> assertThat(e.getRateCode()).as("check rateCode").isEqualTo(actual.getRateCode()))
            .satisfies(e -> assertThat(e.getHotelAcct()).as("check hotelAcct").isEqualTo(actual.getHotelAcct()))
            .satisfies(e -> assertThat(e.getReasonCode()).as("check reasonCode").isEqualTo(actual.getReasonCode()))
            .satisfies(e -> assertThat(e.getProduct()).as("check product").isEqualTo(actual.getProduct()))
            .satisfies(e -> assertThat(e.getTargetResort()).as("check targetResort").isEqualTo(actual.getTargetResort()))
            .satisfies(e -> assertThat(e.getNameTaxType()).as("check nameTaxType").isEqualTo(actual.getNameTaxType()))
            .satisfies(e -> assertThat(e.getTaxInvNo()).as("check taxInvNo").isEqualTo(actual.getTaxInvNo()))
            .satisfies(e -> assertThat(e.getApprovalCode()).as("check approvalCode").isEqualTo(actual.getApprovalCode()))
            .satisfies(e -> assertThat(e.getApprovalStatus()).as("check approvalStatus").isEqualTo(actual.getApprovalStatus()))
            .satisfies(e -> assertThat(e.getCompLinkTrxCode()).as("check compLinkTrxCode").isEqualTo(actual.getCompLinkTrxCode()))
            .satisfies(e -> assertThat(e.getCompTypeCode()).as("check compTypeCode").isEqualTo(actual.getCompTypeCode()))
            .satisfies(e -> assertThat(e.getCouponNo()).as("check couponNo").isEqualTo(actual.getCouponNo()))
            .satisfies(e -> assertThat(e.getOriginalRoom()).as("check originalRoom").isEqualTo(actual.getOriginalRoom()))
            .satisfies(e -> assertThat(e.getAllowanceType()).as("check allowanceType").isEqualTo(actual.getAllowanceType()))
            .satisfies(e -> assertThat(e.getAdvGenerateTrxCode()).as("check advGenerateTrxCode").isEqualTo(actual.getAdvGenerateTrxCode()))
            .satisfies(e -> assertThat(e.getTrxServiceType()).as("check trxServiceType").isEqualTo(actual.getTrxServiceType()))
            .satisfies(e -> assertThat(e.getPostingType()).as("check postingType").isEqualTo(actual.getPostingType()))
            .satisfies(e -> assertThat(e.getParallelCurrency()).as("check parallelCurrency").isEqualTo(actual.getParallelCurrency()))
            .satisfies(e -> assertThat(e.getContractCurrency()).as("check contractCurrency").isEqualTo(actual.getContractCurrency()))
            .satisfies(
                e -> assertThat(e.getFbaCertificateNumber()).as("check fbaCertificateNumber").isEqualTo(actual.getFbaCertificateNumber())
            )
            .satisfies(e -> assertThat(e.getPostingRhythm()).as("check postingRhythm").isEqualTo(actual.getPostingRhythm()))
            .satisfies(e -> assertThat(e.getAsbTaxFlag()).as("check asbTaxFlag").isEqualTo(actual.getAsbTaxFlag()))
            .satisfies(
                e ->
                    assertThat(e.getPackageArrangementCode())
                        .as("check packageArrangementCode")
                        .isEqualTo(actual.getPackageArrangementCode())
            )
            .satisfies(e -> assertThat(e.getGpAwardCode()).as("check gpAwardCode").isEqualTo(actual.getGpAwardCode()))
            .satisfies(e -> assertThat(e.getGpAwardCancelCode()).as("check gpAwardCancelCode").isEqualTo(actual.getGpAwardCancelCode()))
            .satisfies(
                e ->
                    assertThat(e.getServiceRecoveryDeptCode())
                        .as("check serviceRecoveryDeptCode")
                        .isEqualTo(actual.getServiceRecoveryDeptCode())
            )
            .satisfies(e -> assertThat(e.getBucketCode()).as("check bucketCode").isEqualTo(actual.getBucketCode()))
            .satisfies(e -> assertThat(e.getTaxRateType()).as("check taxRateType").isEqualTo(actual.getTaxRateType()))
            .satisfies(e -> assertThat(e.getChequeNumber()).as("check chequeNumber").isEqualTo(actual.getChequeNumber()))
            .satisfies(e -> assertThat(e.getPasserByName()).as("check passerByName").isEqualTo(actual.getPasserByName()))
            .satisfies(e -> assertThat(e.getEsignedReceiptName()).as("check esignedReceiptName").isEqualTo(actual.getEsignedReceiptName()))
            .satisfies(e -> assertThat(e.getRemark()).as("check remark").isEqualTo(actual.getRemark()))
            .satisfies(e -> assertThat(e.getReference()).as("check reference").isEqualTo(actual.getReference()))
            .satisfies(e -> assertThat(e.getoTrxDesc()).as("check oTrxDesc").isEqualTo(actual.getoTrxDesc()))
            .satisfies(e -> assertThat(e.getComments()).as("check comments").isEqualTo(actual.getComments()))
            .satisfies(e -> assertThat(e.getFiscalBillNo()).as("check fiscalBillNo").isEqualTo(actual.getFiscalBillNo()))
            .satisfies(e -> assertThat(e.getExtSysResultMsg()).as("check extSysResultMsg").isEqualTo(actual.getExtSysResultMsg()))
            .satisfies(e -> assertThat(e.getQueueName()).as("check queueName").isEqualTo(actual.getQueueName()))
            .satisfies(e -> assertThat(e.getPaymentType()).as("check paymentType").isEqualTo(actual.getPaymentType()))
            .satisfies(e -> assertThat(e.getCcRefundPosting()).as("check ccRefundPosting").isEqualTo(actual.getCcRefundPosting()))
            .satisfies(
                e -> assertThat(e.getThresholdEntityType()).as("check thresholdEntityType").isEqualTo(actual.getThresholdEntityType())
            )
            .satisfies(
                e ->
                    assertThat(e.getThresholdTreatmentFlag())
                        .as("check thresholdTreatmentFlag")
                        .isEqualTo(actual.getThresholdTreatmentFlag())
            )
            .satisfies(
                e -> assertThat(e.getPaymentSurchargeType()).as("check paymentSurchargeType").isEqualTo(actual.getPaymentSurchargeType())
            )
            .satisfies(e -> assertThat(e.getPropertyBillPrefix()).as("check propertyBillPrefix").isEqualTo(actual.getPropertyBillPrefix()))
            .satisfies(e -> assertThat(e.getTaxElements()).as("check taxElements").isEqualTo(actual.getTaxElements()))
            .satisfies(e -> assertThat(e.getNumberDialed()).as("check numberDialed").isEqualTo(actual.getNumberDialed()))
            .satisfies(e -> assertThat(e.getCheckFileId()).as("check checkFileId").isEqualTo(actual.getCheckFileId()))
            .satisfies(e -> assertThat(e.getExtTrxId()).as("check extTrxId").isEqualTo(actual.getExtTrxId()))
            .satisfies(e -> assertThat(e.getPackageTrxType()).as("check packageTrxType").isEqualTo(actual.getPackageTrxType()))
            .satisfies(e -> assertThat(e.getExpOriginalInvoice()).as("check expOriginalInvoice").isEqualTo(actual.getExpOriginalInvoice()))
            .satisfies(
                e -> assertThat(e.getDepositTransactionId()).as("check depositTransactionId").isEqualTo(actual.getDepositTransactionId())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFinancialTransactionsUpdatableRelationshipsEquals(
        FinancialTransactions expected,
        FinancialTransactions actual
    ) {}
}
